
MorseCodeDecoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  0000175e  000017f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000175e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800220  00800220  00001812  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001812  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000268  00000000  00000000  0000186e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e6d  00000000  00000000  00001ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010d1  00000000  00000000  00004943  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000185d  00000000  00000000  00005a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005dc  00000000  00000000  00007274  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a16  00000000  00000000  00007850  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001e1b  00000000  00000000  00008266  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002a0  00000000  00000000  0000a081  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	bf c0       	rjmp	.+382    	; 0x180 <__ctors_end>
       2:	00 00       	nop
       4:	dd c0       	rjmp	.+442    	; 0x1c0 <__bad_interrupt>
       6:	00 00       	nop
       8:	db c0       	rjmp	.+438    	; 0x1c0 <__bad_interrupt>
       a:	00 00       	nop
       c:	d9 c0       	rjmp	.+434    	; 0x1c0 <__bad_interrupt>
       e:	00 00       	nop
      10:	d7 c0       	rjmp	.+430    	; 0x1c0 <__bad_interrupt>
      12:	00 00       	nop
      14:	d5 c0       	rjmp	.+426    	; 0x1c0 <__bad_interrupt>
      16:	00 00       	nop
      18:	d3 c0       	rjmp	.+422    	; 0x1c0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d1 c0       	rjmp	.+418    	; 0x1c0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	cf c0       	rjmp	.+414    	; 0x1c0 <__bad_interrupt>
      22:	00 00       	nop
      24:	cd c0       	rjmp	.+410    	; 0x1c0 <__bad_interrupt>
      26:	00 00       	nop
      28:	cb c0       	rjmp	.+406    	; 0x1c0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c9 c0       	rjmp	.+402    	; 0x1c0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c7 c0       	rjmp	.+398    	; 0x1c0 <__bad_interrupt>
      32:	00 00       	nop
      34:	c5 c0       	rjmp	.+394    	; 0x1c0 <__bad_interrupt>
      36:	00 00       	nop
      38:	c3 c0       	rjmp	.+390    	; 0x1c0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c1 c0       	rjmp	.+386    	; 0x1c0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	bf c0       	rjmp	.+382    	; 0x1c0 <__bad_interrupt>
      42:	00 00       	nop
      44:	bd c0       	rjmp	.+378    	; 0x1c0 <__bad_interrupt>
      46:	00 00       	nop
      48:	bb c0       	rjmp	.+374    	; 0x1c0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b9 c0       	rjmp	.+370    	; 0x1c0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	b7 c0       	rjmp	.+366    	; 0x1c0 <__bad_interrupt>
      52:	00 00       	nop
      54:	b5 c0       	rjmp	.+362    	; 0x1c0 <__bad_interrupt>
      56:	00 00       	nop
      58:	b3 c0       	rjmp	.+358    	; 0x1c0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b1 c0       	rjmp	.+354    	; 0x1c0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	af c0       	rjmp	.+350    	; 0x1c0 <__bad_interrupt>
      62:	00 00       	nop
      64:	ad c0       	rjmp	.+346    	; 0x1c0 <__bad_interrupt>
      66:	00 00       	nop
      68:	ab c0       	rjmp	.+342    	; 0x1c0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a9 c0       	rjmp	.+338    	; 0x1c0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a7 c0       	rjmp	.+334    	; 0x1c0 <__bad_interrupt>
      72:	00 00       	nop
      74:	a5 c0       	rjmp	.+330    	; 0x1c0 <__bad_interrupt>
      76:	00 00       	nop
      78:	a3 c0       	rjmp	.+326    	; 0x1c0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a1 c0       	rjmp	.+322    	; 0x1c0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	9f c0       	rjmp	.+318    	; 0x1c0 <__bad_interrupt>
      82:	00 00       	nop
      84:	9d c0       	rjmp	.+314    	; 0x1c0 <__bad_interrupt>
      86:	00 00       	nop
      88:	9b c0       	rjmp	.+310    	; 0x1c0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b7 c6       	rjmp	.+3438   	; 0xdfc <__vector_35>
      8e:	00 00       	nop
      90:	97 c0       	rjmp	.+302    	; 0x1c0 <__bad_interrupt>
      92:	00 00       	nop
      94:	95 c0       	rjmp	.+298    	; 0x1c0 <__bad_interrupt>
      96:	00 00       	nop
      98:	93 c0       	rjmp	.+294    	; 0x1c0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	91 c0       	rjmp	.+290    	; 0x1c0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	8f c0       	rjmp	.+286    	; 0x1c0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	8d c0       	rjmp	.+282    	; 0x1c0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8b c0       	rjmp	.+278    	; 0x1c0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	89 c0       	rjmp	.+274    	; 0x1c0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	87 c0       	rjmp	.+270    	; 0x1c0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	85 c0       	rjmp	.+266    	; 0x1c0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	83 c0       	rjmp	.+262    	; 0x1c0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	81 c0       	rjmp	.+258    	; 0x1c0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	7f c0       	rjmp	.+254    	; 0x1c0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	7d c0       	rjmp	.+250    	; 0x1c0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7b c0       	rjmp	.+246    	; 0x1c0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	79 c0       	rjmp	.+242    	; 0x1c0 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	77 c0       	rjmp	.+238    	; 0x1c0 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	75 c0       	rjmp	.+234    	; 0x1c0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	73 c0       	rjmp	.+230    	; 0x1c0 <__bad_interrupt>
      da:	00 00       	nop
      dc:	71 c0       	rjmp	.+226    	; 0x1c0 <__bad_interrupt>
      de:	00 00       	nop
      e0:	6f c0       	rjmp	.+222    	; 0x1c0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	91 03       	fmuls	r17, r17
      e6:	b2 03       	fmuls	r19, r18
      e8:	86 03       	fmuls	r16, r22
      ea:	b2 03       	fmuls	r19, r18
      ec:	24 03       	mulsu	r18, r20
      ee:	2d 03       	fmul	r18, r21
      f0:	37 03       	mulsu	r19, r23
      f2:	41 03       	mulsu	r20, r17
      f4:	4b 03       	fmul	r20, r19
      f6:	55 03       	mulsu	r21, r21
      f8:	5e 03       	fmul	r21, r22
      fa:	68 03       	fmul	r22, r16
      fc:	72 03       	mulsu	r23, r18
      fe:	7c 03       	fmul	r23, r20
     100:	9c 03       	fmulsu	r17, r20
     102:	b2 03       	fmuls	r19, r18
     104:	b2 03       	fmuls	r19, r18
     106:	b2 03       	fmuls	r19, r18
     108:	b2 03       	fmuls	r19, r18
     10a:	a7 03       	fmuls	r18, r23
     10c:	b2 03       	fmuls	r19, r18
     10e:	57 02       	muls	r21, r23
     110:	5e 02       	muls	r21, r30
     112:	67 02       	muls	r22, r23
     114:	70 02       	muls	r23, r16
     116:	78 02       	muls	r23, r24
     118:	7d 02       	muls	r23, r29
     11a:	86 02       	muls	r24, r22
     11c:	8e 02       	muls	r24, r30
     11e:	96 02       	muls	r25, r22
     120:	9c 02       	muls	r25, r28
     122:	a5 02       	muls	r26, r21
     124:	ad 02       	muls	r26, r29
     126:	b6 02       	muls	r27, r22
     128:	bc 02       	muls	r27, r28
     12a:	c3 02       	muls	r28, r19
     12c:	ca 02       	muls	r28, r26
     12e:	d3 02       	muls	r29, r19
     130:	dc 02       	muls	r29, r28
     132:	e4 02       	muls	r30, r20
     134:	eb 02       	muls	r30, r27
     136:	f0 02       	muls	r31, r16
     138:	f8 02       	muls	r31, r24
     13a:	01 03       	mulsu	r16, r17
     13c:	09 03       	fmul	r16, r17
     13e:	b2 03       	fmuls	r19, r18
     140:	1b 03       	fmul	r17, r19
     142:	b2 03       	fmuls	r19, r18
     144:	b2 03       	fmuls	r19, r18
     146:	b2 03       	fmuls	r19, r18
     148:	b2 03       	fmuls	r19, r18
     14a:	b2 03       	fmuls	r19, r18
     14c:	b2 03       	fmuls	r19, r18
     14e:	b2 03       	fmuls	r19, r18
     150:	b2 03       	fmuls	r19, r18
     152:	b2 03       	fmuls	r19, r18
     154:	b2 03       	fmuls	r19, r18
     156:	b2 03       	fmuls	r19, r18
     158:	b2 03       	fmuls	r19, r18
     15a:	b2 03       	fmuls	r19, r18
     15c:	b2 03       	fmuls	r19, r18
     15e:	b2 03       	fmuls	r19, r18
     160:	b2 03       	fmuls	r19, r18
     162:	b2 03       	fmuls	r19, r18
     164:	b2 03       	fmuls	r19, r18
     166:	b2 03       	fmuls	r19, r18
     168:	b2 03       	fmuls	r19, r18
     16a:	b2 03       	fmuls	r19, r18
     16c:	b2 03       	fmuls	r19, r18
     16e:	b2 03       	fmuls	r19, r18
     170:	b2 03       	fmuls	r19, r18
     172:	b2 03       	fmuls	r19, r18
     174:	b2 03       	fmuls	r19, r18
     176:	b2 03       	fmuls	r19, r18
     178:	b2 03       	fmuls	r19, r18
     17a:	b2 03       	fmuls	r19, r18
     17c:	b2 03       	fmuls	r19, r18
     17e:	12 03       	mulsu	r17, r18

00000180 <__ctors_end>:
     180:	11 24       	eor	r1, r1
     182:	1f be       	out	0x3f, r1	; 63
     184:	cf ef       	ldi	r28, 0xFF	; 255
     186:	d1 e2       	ldi	r29, 0x21	; 33
     188:	de bf       	out	0x3e, r29	; 62
     18a:	cd bf       	out	0x3d, r28	; 61
     18c:	00 e0       	ldi	r16, 0x00	; 0
     18e:	0c bf       	out	0x3c, r16	; 60

00000190 <__do_copy_data>:
     190:	12 e0       	ldi	r17, 0x02	; 2
     192:	a0 e0       	ldi	r26, 0x00	; 0
     194:	b2 e0       	ldi	r27, 0x02	; 2
     196:	ee e5       	ldi	r30, 0x5E	; 94
     198:	f7 e1       	ldi	r31, 0x17	; 23
     19a:	00 e0       	ldi	r16, 0x00	; 0
     19c:	0b bf       	out	0x3b, r16	; 59
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <__do_copy_data+0x14>
     1a0:	07 90       	elpm	r0, Z+
     1a2:	0d 92       	st	X+, r0
     1a4:	a0 32       	cpi	r26, 0x20	; 32
     1a6:	b1 07       	cpc	r27, r17
     1a8:	d9 f7       	brne	.-10     	; 0x1a0 <__do_copy_data+0x10>

000001aa <__do_clear_bss>:
     1aa:	22 e0       	ldi	r18, 0x02	; 2
     1ac:	a0 e2       	ldi	r26, 0x20	; 32
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <.do_clear_bss_start>

000001b2 <.do_clear_bss_loop>:
     1b2:	1d 92       	st	X+, r1

000001b4 <.do_clear_bss_start>:
     1b4:	a4 32       	cpi	r26, 0x24	; 36
     1b6:	b2 07       	cpc	r27, r18
     1b8:	e1 f7       	brne	.-8      	; 0x1b2 <.do_clear_bss_loop>
     1ba:	55 d5       	rcall	.+2730   	; 0xc66 <main>
     1bc:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <_exit>

000001c0 <__bad_interrupt>:
     1c0:	1f cf       	rjmp	.-450    	; 0x0 <__vectors>

000001c2 <_ZN3LCD10portConfigEv>:
}

//Function to Initialize PORTS
void LCD::portInit()
{
	portConfig();
     1c2:	87 b1       	in	r24, 0x07	; 7
     1c4:	87 6f       	ori	r24, 0xF7	; 247
     1c6:	87 b9       	out	0x07, r24	; 7
     1c8:	88 b1       	in	r24, 0x08	; 8
     1ca:	80 78       	andi	r24, 0x80	; 128
     1cc:	88 b9       	out	0x08, r24	; 8
     1ce:	08 95       	ret

000001d0 <_ZN3LCD7set4bitEv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1d0:	86 e6       	ldi	r24, 0x66	; 102
     1d2:	9e e0       	ldi	r25, 0x0E	; 14
     1d4:	01 97       	sbiw	r24, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <_ZN3LCD7set4bitEv+0x4>
     1d8:	00 00       	nop
//Function to Reset LCD
void LCD::set4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1da:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1dc:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1de:	80 e3       	ldi	r24, 0x30	; 48
     1e0:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1e2:	42 9a       	sbi	0x08, 2	; 8
     1e4:	8f ef       	ldi	r24, 0xFF	; 255
     1e6:	97 e4       	ldi	r25, 0x47	; 71
     1e8:	01 97       	sbiw	r24, 0x01	; 1
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <_ZN3LCD7set4bitEv+0x18>
     1ec:	00 c0       	rjmp	.+0      	; 0x1ee <_ZN3LCD7set4bitEv+0x1e>
     1ee:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1f0:	42 98       	cbi	0x08, 2	; 8
     1f2:	86 e6       	ldi	r24, 0x66	; 102
     1f4:	9e e0       	ldi	r25, 0x0E	; 14
     1f6:	01 97       	sbiw	r24, 0x01	; 1
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <_ZN3LCD7set4bitEv+0x26>
     1fa:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1fc:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1fe:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     200:	80 e3       	ldi	r24, 0x30	; 48
     202:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     204:	42 9a       	sbi	0x08, 2	; 8
     206:	8f ef       	ldi	r24, 0xFF	; 255
     208:	97 e4       	ldi	r25, 0x47	; 71
     20a:	01 97       	sbiw	r24, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <_ZN3LCD7set4bitEv+0x3a>
     20e:	00 c0       	rjmp	.+0      	; 0x210 <_ZN3LCD7set4bitEv+0x40>
     210:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     212:	42 98       	cbi	0x08, 2	; 8
     214:	86 e6       	ldi	r24, 0x66	; 102
     216:	9e e0       	ldi	r25, 0x0E	; 14
     218:	01 97       	sbiw	r24, 0x01	; 1
     21a:	f1 f7       	brne	.-4      	; 0x218 <_ZN3LCD7set4bitEv+0x48>
     21c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     21e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     220:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     222:	80 e3       	ldi	r24, 0x30	; 48
     224:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     226:	42 9a       	sbi	0x08, 2	; 8
     228:	8f ef       	ldi	r24, 0xFF	; 255
     22a:	97 e4       	ldi	r25, 0x47	; 71
     22c:	01 97       	sbiw	r24, 0x01	; 1
     22e:	f1 f7       	brne	.-4      	; 0x22c <_ZN3LCD7set4bitEv+0x5c>
     230:	00 c0       	rjmp	.+0      	; 0x232 <_ZN3LCD7set4bitEv+0x62>
     232:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     234:	42 98       	cbi	0x08, 2	; 8
     236:	86 e6       	ldi	r24, 0x66	; 102
     238:	9e e0       	ldi	r25, 0x0E	; 14
     23a:	01 97       	sbiw	r24, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <_ZN3LCD7set4bitEv+0x6a>
     23e:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     240:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     242:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     244:	80 e2       	ldi	r24, 0x20	; 32
     246:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     248:	42 9a       	sbi	0x08, 2	; 8
     24a:	86 e6       	ldi	r24, 0x66	; 102
     24c:	9e e0       	ldi	r25, 0x0E	; 14
     24e:	01 97       	sbiw	r24, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <_ZN3LCD7set4bitEv+0x7e>
     252:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     254:	42 98       	cbi	0x08, 2	; 8
     256:	08 95       	ret

00000258 <_ZN3LCD12writeCommandEh>:
void LCD::writeCommand(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     258:	88 b1       	in	r24, 0x08	; 8
     25a:	8f 70       	andi	r24, 0x0F	; 15
     25c:	88 b9       	out	0x08, r24	; 8
	lcd_port |= temp;
     25e:	88 b1       	in	r24, 0x08	; 8
//Function to Write Command on LCD
void LCD::writeCommand(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     260:	96 2f       	mov	r25, r22
     262:	90 7f       	andi	r25, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     264:	89 2b       	or	r24, r25
     266:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     268:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     26a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     26c:	42 9a       	sbi	0x08, 2	; 8
     26e:	8f ef       	ldi	r24, 0xFF	; 255
     270:	97 e4       	ldi	r25, 0x47	; 71
     272:	01 97       	sbiw	r24, 0x01	; 1
     274:	f1 f7       	brne	.-4      	; 0x272 <_ZN3LCD12writeCommandEh+0x1a>
     276:	00 c0       	rjmp	.+0      	; 0x278 <_ZN3LCD12writeCommandEh+0x20>
     278:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     27a:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     27c:	88 b1       	in	r24, 0x08	; 8
     27e:	8f 70       	andi	r24, 0x0F	; 15
     280:	88 b9       	out	0x08, r24	; 8
	lcd_port |= cmd;
     282:	88 b1       	in	r24, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     284:	62 95       	swap	r22
     286:	60 7f       	andi	r22, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     288:	68 2b       	or	r22, r24
     28a:	68 b9       	out	0x08, r22	; 8
	cbit(lcd_port,RS);
     28c:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     28e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     290:	42 9a       	sbi	0x08, 2	; 8
     292:	8f ef       	ldi	r24, 0xFF	; 255
     294:	97 e4       	ldi	r25, 0x47	; 71
     296:	01 97       	sbiw	r24, 0x01	; 1
     298:	f1 f7       	brne	.-4      	; 0x296 <_ZN3LCD12writeCommandEh+0x3e>
     29a:	00 c0       	rjmp	.+0      	; 0x29c <_ZN3LCD12writeCommandEh+0x44>
     29c:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     29e:	42 98       	cbi	0x08, 2	; 8
     2a0:	08 95       	ret

000002a2 <_ZN3LCD4initEv>:
	
}

//Function to Initialize LCD
void LCD::init()
{
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	ec 01       	movw	r28, r24
     2a8:	86 e6       	ldi	r24, 0x66	; 102
     2aa:	9e e0       	ldi	r25, 0x0E	; 14
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <_ZN3LCD4initEv+0xa>
     2b0:	00 00       	nop
	_delay_ms(1);

	writeCommand(0x28);			//LCD 4-bit mode and 2 lines.
     2b2:	68 e2       	ldi	r22, 0x28	; 40
     2b4:	ce 01       	movw	r24, r28
     2b6:	d0 df       	rcall	.-96     	; 0x258 <_ZN3LCD12writeCommandEh>
	writeCommand(0x01);
     2b8:	61 e0       	ldi	r22, 0x01	; 1
     2ba:	ce 01       	movw	r24, r28
     2bc:	cd df       	rcall	.-102    	; 0x258 <_ZN3LCD12writeCommandEh>
	writeCommand(0x06);
     2be:	66 e0       	ldi	r22, 0x06	; 6
     2c0:	ce 01       	movw	r24, r28
     2c2:	ca df       	rcall	.-108    	; 0x258 <_ZN3LCD12writeCommandEh>
	writeCommand(0x0E);
     2c4:	6e e0       	ldi	r22, 0x0E	; 14
     2c6:	ce 01       	movw	r24, r28
     2c8:	c7 df       	rcall	.-114    	; 0x258 <_ZN3LCD12writeCommandEh>
	writeCommand(0x80);
     2ca:	60 e8       	ldi	r22, 0x80	; 128
     2cc:	ce 01       	movw	r24, r28
     2ce:	c4 df       	rcall	.-120    	; 0x258 <_ZN3LCD12writeCommandEh>
	
}
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	08 95       	ret

000002d6 <_ZN3LCDC1Ev>:
 * Created: 07-03-2015 05:52:49 PM
 *  Author: Ajinkya
 */ 
#include "lcd.h"
#include "stdlib.h"
LCD::LCD()
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	ec 01       	movw	r28, r24
}

//Function to Initialize PORTS
void LCD::portInit()
{
	portConfig();
     2dc:	72 df       	rcall	.-284    	; 0x1c2 <_ZN3LCD10portConfigEv>
#include "lcd.h"
#include "stdlib.h"
LCD::LCD()
{
	portInit();
	set4bit();
     2de:	ce 01       	movw	r24, r28
     2e0:	77 df       	rcall	.-274    	; 0x1d0 <_ZN3LCD7set4bitEv>
	init();
     2e2:	ce 01       	movw	r24, r28
     2e4:	de df       	rcall	.-68     	; 0x2a2 <_ZN3LCD4initEv>
}
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	08 95       	ret

000002ec <_ZN3LCD9writeCharEc>:
void LCD::writeChar(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     2ec:	88 b1       	in	r24, 0x08	; 8
     2ee:	8f 70       	andi	r24, 0x0F	; 15
     2f0:	88 b9       	out	0x08, r24	; 8
	lcd_port |= temp;
     2f2:	88 b1       	in	r24, 0x08	; 8
//Function to Write Data on LCD
void LCD::writeChar(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     2f4:	96 2f       	mov	r25, r22
     2f6:	90 7f       	andi	r25, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     2f8:	89 2b       	or	r24, r25
     2fa:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     2fc:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2fe:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     300:	42 9a       	sbi	0x08, 2	; 8
     302:	8f ef       	ldi	r24, 0xFF	; 255
     304:	97 e4       	ldi	r25, 0x47	; 71
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <_ZN3LCD9writeCharEc+0x1a>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <_ZN3LCD9writeCharEc+0x20>
     30c:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     30e:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     310:	88 b1       	in	r24, 0x08	; 8
     312:	8f 70       	andi	r24, 0x0F	; 15
     314:	88 b9       	out	0x08, r24	; 8
	lcd_port |= letter;
     316:	88 b1       	in	r24, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     318:	62 95       	swap	r22
     31a:	60 7f       	andi	r22, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     31c:	68 2b       	or	r22, r24
     31e:	68 b9       	out	0x08, r22	; 8
	sbit(lcd_port,RS);
     320:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     322:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     324:	42 9a       	sbi	0x08, 2	; 8
     326:	8f ef       	ldi	r24, 0xFF	; 255
     328:	97 e4       	ldi	r25, 0x47	; 71
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <_ZN3LCD9writeCharEc+0x3e>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <_ZN3LCD9writeCharEc+0x44>
     330:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     332:	42 98       	cbi	0x08, 2	; 8
     334:	08 95       	ret

00000336 <_ZN3LCD4homeEv>:


//Function to bring cursor at home position
void LCD::home()
{
	writeCommand(0x80);
     336:	60 e8       	ldi	r22, 0x80	; 128
     338:	8f cf       	rjmp	.-226    	; 0x258 <_ZN3LCD12writeCommandEh>
     33a:	08 95       	ret

0000033c <_ZN3LCD5printEPc>:
}


//Function to Print String on LCD
void LCD::print(char *str)
{
     33c:	0f 93       	push	r16
     33e:	1f 93       	push	r17
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	8c 01       	movw	r16, r24
     346:	eb 01       	movw	r28, r22
	while(*str != '\0')
     348:	68 81       	ld	r22, Y
     34a:	66 23       	and	r22, r22
     34c:	31 f0       	breq	.+12     	; 0x35a <_ZN3LCD5printEPc+0x1e>
     34e:	21 96       	adiw	r28, 0x01	; 1
	{
		writeChar(*str);
     350:	c8 01       	movw	r24, r16
     352:	cc df       	rcall	.-104    	; 0x2ec <_ZN3LCD9writeCharEc>


//Function to Print String on LCD
void LCD::print(char *str)
{
	while(*str != '\0')
     354:	69 91       	ld	r22, Y+
     356:	61 11       	cpse	r22, r1
     358:	fb cf       	rjmp	.-10     	; 0x350 <_ZN3LCD5printEPc+0x14>
	{
		writeChar(*str);
		str++;
	}
}
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	1f 91       	pop	r17
     360:	0f 91       	pop	r16
     362:	08 95       	ret

00000364 <_ZN3LCD6cursorEcc>:
//Position the LCD cursor at "row", "column".

void LCD::cursor (char row, char col)
{
	
	switch (row) {
     364:	62 30       	cpi	r22, 0x02	; 2
     366:	69 f0       	breq	.+26     	; 0x382 <_ZN3LCD6cursorEcc+0x1e>
     368:	18 f4       	brcc	.+6      	; 0x370 <_ZN3LCD6cursorEcc+0xc>
     36a:	61 30       	cpi	r22, 0x01	; 1
     36c:	31 f0       	breq	.+12     	; 0x37a <_ZN3LCD6cursorEcc+0x16>
     36e:	15 c0       	rjmp	.+42     	; 0x39a <_ZN3LCD6cursorEcc+0x36>
     370:	63 30       	cpi	r22, 0x03	; 3
     372:	59 f0       	breq	.+22     	; 0x38a <_ZN3LCD6cursorEcc+0x26>
     374:	64 30       	cpi	r22, 0x04	; 4
     376:	69 f0       	breq	.+26     	; 0x392 <_ZN3LCD6cursorEcc+0x2e>
     378:	10 c0       	rjmp	.+32     	; 0x39a <_ZN3LCD6cursorEcc+0x36>
		case 1: writeCommand (0x80 + col - 1); break;
     37a:	6f e7       	ldi	r22, 0x7F	; 127
     37c:	64 0f       	add	r22, r20
     37e:	6c cf       	rjmp	.-296    	; 0x258 <_ZN3LCD12writeCommandEh>
     380:	08 95       	ret
		case 2: writeCommand (0xc0 + col - 1); break;
     382:	6f eb       	ldi	r22, 0xBF	; 191
     384:	64 0f       	add	r22, r20
     386:	68 cf       	rjmp	.-304    	; 0x258 <_ZN3LCD12writeCommandEh>
     388:	08 95       	ret
		case 3: writeCommand (0x94 + col - 1); break;
     38a:	63 e9       	ldi	r22, 0x93	; 147
     38c:	64 0f       	add	r22, r20
     38e:	64 cf       	rjmp	.-312    	; 0x258 <_ZN3LCD12writeCommandEh>
     390:	08 95       	ret
		case 4: writeCommand (0xd4 + col - 1); break;
     392:	63 ed       	ldi	r22, 0xD3	; 211
     394:	64 0f       	add	r22, r20
     396:	60 cf       	rjmp	.-320    	; 0x258 <_ZN3LCD12writeCommandEh>
     398:	08 95       	ret
		default: break;
	}
	if(row==0&&col==0)home();
     39a:	61 11       	cpse	r22, r1
     39c:	03 c0       	rjmp	.+6      	; 0x3a4 <_ZN3LCD6cursorEcc+0x40>
     39e:	41 11       	cpse	r20, r1
     3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <_ZN3LCD6cursorEcc+0x40>
     3a2:	c9 cf       	rjmp	.-110    	; 0x336 <_ZN3LCD4homeEv>
     3a4:	08 95       	ret

000003a6 <_ZN11morsebuzzer15buzzerPinConfigEv>:
	timeofdit=t;
	buzzerPinConfig();
}
void morsebuzzer::buzzerPinConfig()
{
	DDRC|=0x08;
     3a6:	3b 9a       	sbi	0x07, 3	; 7
	PORTC&=~0x08;
     3a8:	43 98       	cbi	0x08, 3	; 8
     3aa:	08 95       	ret

000003ac <_ZN11morsebuzzerC1Ei>:
#include "morsebuzzer.h"


morsebuzzer::morsebuzzer (int t)
{
	timeofdit=t;
     3ac:	fc 01       	movw	r30, r24
     3ae:	71 83       	std	Z+1, r23	; 0x01
     3b0:	60 83       	st	Z, r22
	buzzerPinConfig();
     3b2:	f9 cf       	rjmp	.-14     	; 0x3a6 <_ZN11morsebuzzer15buzzerPinConfigEv>
     3b4:	08 95       	ret

000003b6 <_ZN11morsebuzzer8buzzerOnEv>:
		buzzerOff();
		delay(timeofdit);
}
void morsebuzzer::buzzerOn()
{
	DDRC|=0x08;		//set buzzer on 
     3b6:	3b 9a       	sbi	0x07, 3	; 7
     3b8:	08 95       	ret

000003ba <_ZN11morsebuzzer9buzzerOffEv>:
}
void morsebuzzer::buzzerOff()
{
	DDRC&=~0x08;	//set buzzer off
     3ba:	3b 98       	cbi	0x07, 3	; 7
     3bc:	08 95       	ret

000003be <_ZN11morsebuzzer11transmitDitEv>:
	
	*/
}

void morsebuzzer::transmitDit()
{
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	ec 01       	movw	r28, r24
	buzzerOn();
     3c4:	f8 df       	rcall	.-16     	; 0x3b6 <_ZN11morsebuzzer8buzzerOnEv>
{
	DDRC&=~0x08;	//set buzzer off
}
void morsebuzzer::delay(int time_ms)
{
	while(time_ms)
     3c6:	88 81       	ld	r24, Y
     3c8:	99 81       	ldd	r25, Y+1	; 0x01
     3ca:	89 2b       	or	r24, r25
     3cc:	c9 f4       	brne	.+50     	; 0x400 <_ZN11morsebuzzer11transmitDitEv+0x42>

void morsebuzzer::transmitDit()
{
	buzzerOn();
	delay(timeofdit);
	buzzerOff();
     3ce:	ce 01       	movw	r24, r28
     3d0:	f4 df       	rcall	.-24     	; 0x3ba <_ZN11morsebuzzer9buzzerOffEv>
{
	DDRC&=~0x08;	//set buzzer off
}
void morsebuzzer::delay(int time_ms)
{
	while(time_ms)
     3d2:	88 81       	ld	r24, Y
     3d4:	99 81       	ldd	r25, Y+1	; 0x01
     3d6:	89 2b       	or	r24, r25
     3d8:	39 f4       	brne	.+14     	; 0x3e8 <_ZN11morsebuzzer11transmitDitEv+0x2a>
     3da:	18 c0       	rjmp	.+48     	; 0x40c <_ZN11morsebuzzer11transmitDitEv+0x4e>
     3dc:	86 e6       	ldi	r24, 0x66	; 102
     3de:	9e e0       	ldi	r25, 0x0E	; 14
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <_ZN11morsebuzzer11transmitDitEv+0x22>
     3e4:	00 00       	nop
     3e6:	fa cf       	rjmp	.-12     	; 0x3dc <_ZN11morsebuzzer11transmitDitEv+0x1e>
     3e8:	86 e6       	ldi	r24, 0x66	; 102
     3ea:	9e e0       	ldi	r25, 0x0E	; 14
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <_ZN11morsebuzzer11transmitDitEv+0x2e>
     3f0:	00 00       	nop
     3f2:	f4 cf       	rjmp	.-24     	; 0x3dc <_ZN11morsebuzzer11transmitDitEv+0x1e>
     3f4:	86 e6       	ldi	r24, 0x66	; 102
     3f6:	9e e0       	ldi	r25, 0x0E	; 14
     3f8:	01 97       	sbiw	r24, 0x01	; 1
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <_ZN11morsebuzzer11transmitDitEv+0x3a>
     3fc:	00 00       	nop
     3fe:	fa cf       	rjmp	.-12     	; 0x3f4 <_ZN11morsebuzzer11transmitDitEv+0x36>
     400:	86 e6       	ldi	r24, 0x66	; 102
     402:	9e e0       	ldi	r25, 0x0E	; 14
     404:	01 97       	sbiw	r24, 0x01	; 1
     406:	f1 f7       	brne	.-4      	; 0x404 <_ZN11morsebuzzer11transmitDitEv+0x46>
     408:	00 00       	nop
     40a:	f4 cf       	rjmp	.-24     	; 0x3f4 <_ZN11morsebuzzer11transmitDitEv+0x36>
	buzzerOn();
	delay(timeofdit);
	buzzerOff();
	delay(timeofdit);
	
}
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	08 95       	ret

00000412 <_ZN11morsebuzzer11transmitDahEv>:
void morsebuzzer::transmitDah()
{
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	ec 01       	movw	r28, r24
		buzzerOn();
     418:	ce df       	rcall	.-100    	; 0x3b6 <_ZN11morsebuzzer8buzzerOnEv>
		delay(3*timeofdit);
     41a:	88 81       	ld	r24, Y
     41c:	99 81       	ldd	r25, Y+1	; 0x01
     41e:	9c 01       	movw	r18, r24
     420:	22 0f       	add	r18, r18
     422:	33 1f       	adc	r19, r19
     424:	82 0f       	add	r24, r18
     426:	93 1f       	adc	r25, r19
{
	DDRC&=~0x08;	//set buzzer off
}
void morsebuzzer::delay(int time_ms)
{
	while(time_ms)
     428:	89 2b       	or	r24, r25
     42a:	c9 f4       	brne	.+50     	; 0x45e <_ZN11morsebuzzer11transmitDahEv+0x4c>
}
void morsebuzzer::transmitDah()
{
		buzzerOn();
		delay(3*timeofdit);
		buzzerOff();
     42c:	ce 01       	movw	r24, r28
     42e:	c5 df       	rcall	.-118    	; 0x3ba <_ZN11morsebuzzer9buzzerOffEv>
{
	DDRC&=~0x08;	//set buzzer off
}
void morsebuzzer::delay(int time_ms)
{
	while(time_ms)
     430:	88 81       	ld	r24, Y
     432:	99 81       	ldd	r25, Y+1	; 0x01
     434:	89 2b       	or	r24, r25
     436:	39 f4       	brne	.+14     	; 0x446 <_ZN11morsebuzzer11transmitDahEv+0x34>
     438:	18 c0       	rjmp	.+48     	; 0x46a <_ZN11morsebuzzer11transmitDahEv+0x58>
     43a:	86 e6       	ldi	r24, 0x66	; 102
     43c:	9e e0       	ldi	r25, 0x0E	; 14
     43e:	01 97       	sbiw	r24, 0x01	; 1
     440:	f1 f7       	brne	.-4      	; 0x43e <_ZN11morsebuzzer11transmitDahEv+0x2c>
     442:	00 00       	nop
     444:	fa cf       	rjmp	.-12     	; 0x43a <_ZN11morsebuzzer11transmitDahEv+0x28>
     446:	86 e6       	ldi	r24, 0x66	; 102
     448:	9e e0       	ldi	r25, 0x0E	; 14
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <_ZN11morsebuzzer11transmitDahEv+0x38>
     44e:	00 00       	nop
     450:	f4 cf       	rjmp	.-24     	; 0x43a <_ZN11morsebuzzer11transmitDahEv+0x28>
     452:	86 e6       	ldi	r24, 0x66	; 102
     454:	9e e0       	ldi	r25, 0x0E	; 14
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <_ZN11morsebuzzer11transmitDahEv+0x44>
     45a:	00 00       	nop
     45c:	fa cf       	rjmp	.-12     	; 0x452 <_ZN11morsebuzzer11transmitDahEv+0x40>
     45e:	86 e6       	ldi	r24, 0x66	; 102
     460:	9e e0       	ldi	r25, 0x0E	; 14
     462:	01 97       	sbiw	r24, 0x01	; 1
     464:	f1 f7       	brne	.-4      	; 0x462 <_ZN11morsebuzzer11transmitDahEv+0x50>
     466:	00 00       	nop
     468:	f4 cf       	rjmp	.-24     	; 0x452 <_ZN11morsebuzzer11transmitDahEv+0x40>
{
		buzzerOn();
		delay(3*timeofdit);
		buzzerOff();
		delay(timeofdit);
}
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	08 95       	ret

00000470 <_ZN11morsebuzzer13morseTransmitEc>:
	PORTC&=~0x08;
}


void morsebuzzer::morseTransmit(char data)
{
     470:	af 92       	push	r10
     472:	bf 92       	push	r11
     474:	cf 92       	push	r12
     476:	df 92       	push	r13
     478:	ef 92       	push	r14
     47a:	ff 92       	push	r15
     47c:	0f 93       	push	r16
     47e:	1f 93       	push	r17
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
     488:	27 97       	sbiw	r28, 0x07	; 7
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	f8 94       	cli
     48e:	de bf       	out	0x3e, r29	; 62
     490:	0f be       	out	0x3f, r0	; 63
     492:	cd bf       	out	0x3d, r28	; 61
     494:	5c 01       	movw	r10, r24
	char str1[7];
    int j=0;
	
		
		switch(toupper(data))
     496:	86 2f       	mov	r24, r22
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	95 d6       	rcall	.+3370   	; 0x11c6 <toupper>
     49c:	8c 97       	sbiw	r24, 0x2c	; 44
     49e:	8e 34       	cpi	r24, 0x4E	; 78
     4a0:	91 05       	cpc	r25, r1
     4a2:	08 f0       	brcs	.+2      	; 0x4a6 <_ZN11morsebuzzer13morseTransmitEc+0x36>
     4a4:	5f c1       	rjmp	.+702    	; 0x764 <_ZN11morsebuzzer13morseTransmitEc+0x2f4>
     4a6:	8e 58       	subi	r24, 0x8E	; 142
     4a8:	9f 4f       	sbci	r25, 0xFF	; 255
     4aa:	fc 01       	movw	r30, r24
     4ac:	86 c6       	rjmp	.+3340   	; 0x11ba <__tablejump2__>
		{
		  case 'A':
		  str1[j++]='1';
     4ae:	81 e3       	ldi	r24, 0x31	; 49
     4b0:	89 83       	std	Y+1, r24	; 0x01
		  str1[j]='3';
     4b2:	83 e3       	ldi	r24, 0x33	; 51
     4b4:	8a 83       	std	Y+2, r24	; 0x02
	
		
		switch(toupper(data))
		{
		  case 'A':
		  str1[j++]='1';
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='3';
		  break;
     4ba:	6b c1       	rjmp	.+726    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		  case 'B':
		  str1[j++]='3';
     4bc:	83 e3       	ldi	r24, 0x33	; 51
     4be:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='1';
     4c0:	81 e3       	ldi	r24, 0x31	; 49
     4c2:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='1';
     4c4:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j]='1';
     4c6:	8c 83       	std	Y+4, r24	; 0x04
		  break;
 
		  case 'B':
		  str1[j++]='3';
		  str1[j++]='1';
		  str1[j++]='1';
     4c8:	83 e0       	ldi	r24, 0x03	; 3
     4ca:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='1';
		  break;
     4cc:	62 c1       	rjmp	.+708    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		  case 'C':
		  str1[j++]='3';
     4ce:	93 e3       	ldi	r25, 0x33	; 51
     4d0:	99 83       	std	Y+1, r25	; 0x01
		  str1[j++]='1';
     4d2:	81 e3       	ldi	r24, 0x31	; 49
     4d4:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='3';
     4d6:	9b 83       	std	Y+3, r25	; 0x03
		  str1[j]='1';
     4d8:	8c 83       	std	Y+4, r24	; 0x04
		  break;
 
		  case 'C':
		  str1[j++]='3';
		  str1[j++]='1';
		  str1[j++]='3';
     4da:	83 e0       	ldi	r24, 0x03	; 3
     4dc:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='1';
		  break;
     4de:	59 c1       	rjmp	.+690    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		  case 'D':
		  str1[j++]='3';
     4e0:	83 e3       	ldi	r24, 0x33	; 51
     4e2:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='1';
     4e4:	81 e3       	ldi	r24, 0x31	; 49
     4e6:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j]='1';
     4e8:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j]='1';
		  break;
 
		  case 'D':
		  str1[j++]='3';
		  str1[j++]='1';
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='1';
		  break;
     4ee:	51 c1       	rjmp	.+674    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		  case 'E':
		  str1[j]='1';
     4f0:	81 e3       	ldi	r24, 0x31	; 49
     4f2:	89 83       	std	Y+1, r24	; 0x01


void morsebuzzer::morseTransmit(char data)
{
	char str1[7];
    int j=0;
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='1';
		  break;
 
		  case 'E':
		  str1[j]='1';
		  break;
     4f8:	4c c1       	rjmp	.+664    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		  case 'F':
		  str1[j++]='1';
     4fa:	81 e3       	ldi	r24, 0x31	; 49
     4fc:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='1';
     4fe:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='3';
     500:	93 e3       	ldi	r25, 0x33	; 51
     502:	9b 83       	std	Y+3, r25	; 0x03
		  str1[j]='1';
     504:	8c 83       	std	Y+4, r24	; 0x04
		  break;
 
		  case 'F':
		  str1[j++]='1';
		  str1[j++]='1';
		  str1[j++]='3';
     506:	83 e0       	ldi	r24, 0x03	; 3
     508:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='1';
		    break;
     50a:	43 c1       	rjmp	.+646    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		  case 'G':
		  str1[j++]='3';
     50c:	83 e3       	ldi	r24, 0x33	; 51
     50e:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='3';
     510:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j]='1';
     512:	81 e3       	ldi	r24, 0x31	; 49
     514:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j]='1';
		    break;
 
		  case 'G':
		  str1[j++]='3';
		  str1[j++]='3';
     516:	82 e0       	ldi	r24, 0x02	; 2
     518:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='1';
		  break;
     51a:	3b c1       	rjmp	.+630    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		  case 'H':
		  str1[j++]='1';
     51c:	81 e3       	ldi	r24, 0x31	; 49
     51e:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='1';
     520:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='1';
     522:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j]='1';
     524:	8c 83       	std	Y+4, r24	; 0x04
		  break;
 
		  case 'H':
		  str1[j++]='1';
		  str1[j++]='1';
		  str1[j++]='1';
     526:	83 e0       	ldi	r24, 0x03	; 3
     528:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='1';
		    break;
     52a:	33 c1       	rjmp	.+614    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		   case 'I':
		  str1[j++]='1';
     52c:	81 e3       	ldi	r24, 0x31	; 49
     52e:	89 83       	std	Y+1, r24	; 0x01
		  str1[j]='1';
     530:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='1';
		  str1[j]='1';
		    break;
 
		   case 'I':
		  str1[j++]='1';
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='1';
		    break;
     536:	2d c1       	rjmp	.+602    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case 'J':
		  str1[j++]='1';
     538:	81 e3       	ldi	r24, 0x31	; 49
     53a:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='3';
     53c:	83 e3       	ldi	r24, 0x33	; 51
     53e:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='3';
     540:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j]='3';
     542:	8c 83       	std	Y+4, r24	; 0x04
		    break;
 
		case 'J':
		  str1[j++]='1';
		  str1[j++]='3';
		  str1[j++]='3';
     544:	83 e0       	ldi	r24, 0x03	; 3
     546:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='3';
		    break;
     548:	24 c1       	rjmp	.+584    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case 'K':
		  str1[j++]='3';
     54a:	83 e3       	ldi	r24, 0x33	; 51
     54c:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='1';
     54e:	91 e3       	ldi	r25, 0x31	; 49
     550:	9a 83       	std	Y+2, r25	; 0x02
		  str1[j]='3';
     552:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j]='3';
		    break;
 
		case 'K':
		  str1[j++]='3';
		  str1[j++]='1';
     554:	82 e0       	ldi	r24, 0x02	; 2
     556:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='3';
		    break;
     558:	1c c1       	rjmp	.+568    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case 'L':
		  str1[j++]='1';
     55a:	81 e3       	ldi	r24, 0x31	; 49
     55c:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='3';
     55e:	93 e3       	ldi	r25, 0x33	; 51
     560:	9a 83       	std	Y+2, r25	; 0x02
		  str1[j++]='1';
     562:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j]='1';
     564:	8c 83       	std	Y+4, r24	; 0x04
		    break;
 
		case 'L':
		  str1[j++]='1';
		  str1[j++]='3';
		  str1[j++]='1';
     566:	83 e0       	ldi	r24, 0x03	; 3
     568:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='1';
		  break;
     56a:	13 c1       	rjmp	.+550    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case 'M':
		  str1[j++]='3';
     56c:	83 e3       	ldi	r24, 0x33	; 51
     56e:	89 83       	std	Y+1, r24	; 0x01
		    str1[j]='3';
     570:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='1';
		  str1[j]='1';
		  break;
 
		case 'M':
		  str1[j++]='3';
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	90 e0       	ldi	r25, 0x00	; 0
		    str1[j]='3';
		    break;
     576:	0d c1       	rjmp	.+538    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case 'N':
		  str1[j++]='3';
     578:	83 e3       	ldi	r24, 0x33	; 51
     57a:	89 83       	std	Y+1, r24	; 0x01
		  str1[j]='1';
     57c:	81 e3       	ldi	r24, 0x31	; 49
     57e:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='3';
		    str1[j]='3';
		    break;
 
		case 'N':
		  str1[j++]='3';
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='1';
		    break;
     584:	06 c1       	rjmp	.+524    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case 'O':
		  str1[j++]='3';
     586:	83 e3       	ldi	r24, 0x33	; 51
     588:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='3';
     58a:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j]='3';
     58c:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j]='1';
		    break;
 
		case 'O':
		  str1[j++]='3';
		  str1[j++]='3';
     58e:	82 e0       	ldi	r24, 0x02	; 2
     590:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='3';
		    break;
     592:	ff c0       	rjmp	.+510    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case 'P':
		  str1[j++]='1';
     594:	81 e3       	ldi	r24, 0x31	; 49
     596:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='3';
     598:	93 e3       	ldi	r25, 0x33	; 51
     59a:	9a 83       	std	Y+2, r25	; 0x02
		  str1[j++]='3';
     59c:	9b 83       	std	Y+3, r25	; 0x03
		  str1[j]='1';
     59e:	8c 83       	std	Y+4, r24	; 0x04
		    break;
 
		case 'P':
		  str1[j++]='1';
		  str1[j++]='3';
		  str1[j++]='3';
     5a0:	83 e0       	ldi	r24, 0x03	; 3
     5a2:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='1';
		    break;
     5a4:	f6 c0       	rjmp	.+492    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case 'Q':
		  str1[j++]='3';
     5a6:	83 e3       	ldi	r24, 0x33	; 51
     5a8:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='3';
     5aa:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='1';
     5ac:	91 e3       	ldi	r25, 0x31	; 49
     5ae:	9b 83       	std	Y+3, r25	; 0x03
		  str1[j]='3';
     5b0:	8c 83       	std	Y+4, r24	; 0x04
		    break;
 
		case 'Q':
		  str1[j++]='3';
		  str1[j++]='3';
		  str1[j++]='1';
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='3';
		    break;
     5b6:	ed c0       	rjmp	.+474    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case 'R':
		  str1[j++]='1';
     5b8:	81 e3       	ldi	r24, 0x31	; 49
     5ba:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='3';
     5bc:	93 e3       	ldi	r25, 0x33	; 51
     5be:	9a 83       	std	Y+2, r25	; 0x02
		  str1[j]='1';
     5c0:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j]='3';
		    break;
 
		case 'R':
		  str1[j++]='1';
		  str1[j++]='3';
     5c2:	82 e0       	ldi	r24, 0x02	; 2
     5c4:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='1';
		    break;
     5c6:	e5 c0       	rjmp	.+458    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case 'S':
		  str1[j++]='1';
     5c8:	81 e3       	ldi	r24, 0x31	; 49
     5ca:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='1';
     5cc:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j]='1';
     5ce:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j]='1';
		    break;
 
		case 'S':
		  str1[j++]='1';
		  str1[j++]='1';
     5d0:	82 e0       	ldi	r24, 0x02	; 2
     5d2:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='1';
		    break;
     5d4:	de c0       	rjmp	.+444    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case 'T':
		  str1[j]='3';
     5d6:	83 e3       	ldi	r24, 0x33	; 51
     5d8:	89 83       	std	Y+1, r24	; 0x01


void morsebuzzer::morseTransmit(char data)
{
	char str1[7];
    int j=0;
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='1';
		    break;
 
		case 'T':
		  str1[j]='3';
		    break;
     5de:	d9 c0       	rjmp	.+434    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case 'U':
		  str1[j++]='1';
     5e0:	81 e3       	ldi	r24, 0x31	; 49
     5e2:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='1';
     5e4:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j]='3';
     5e6:	83 e3       	ldi	r24, 0x33	; 51
     5e8:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j]='3';
		    break;
 
		case 'U':
		  str1[j++]='1';
		  str1[j++]='1';
     5ea:	82 e0       	ldi	r24, 0x02	; 2
     5ec:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='3';
		    break;
     5ee:	d1 c0       	rjmp	.+418    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case 'V':
		  str1[j++]='1';
     5f0:	81 e3       	ldi	r24, 0x31	; 49
     5f2:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='1';
     5f4:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='1';
     5f6:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j]='3';
     5f8:	83 e3       	ldi	r24, 0x33	; 51
     5fa:	8c 83       	std	Y+4, r24	; 0x04
		    break;
 
		case 'V':
		  str1[j++]='1';
		  str1[j++]='1';
		  str1[j++]='1';
     5fc:	83 e0       	ldi	r24, 0x03	; 3
     5fe:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='3';
		    break;
     600:	c8 c0       	rjmp	.+400    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case 'W':
		  str1[j++]='1';
     602:	81 e3       	ldi	r24, 0x31	; 49
     604:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='3';
     606:	83 e3       	ldi	r24, 0x33	; 51
     608:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j]='3';
     60a:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j]='3';
		    break;
 
		case 'W':
		  str1[j++]='1';
		  str1[j++]='3';
     60c:	82 e0       	ldi	r24, 0x02	; 2
     60e:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='3';
		    break;
     610:	c0 c0       	rjmp	.+384    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case 'X':
		  str1[j++]='3';
     612:	83 e3       	ldi	r24, 0x33	; 51
     614:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='1';
     616:	91 e3       	ldi	r25, 0x31	; 49
     618:	9a 83       	std	Y+2, r25	; 0x02
		  str1[j++]='1';
     61a:	9b 83       	std	Y+3, r25	; 0x03
		  str1[j]='3';
     61c:	8c 83       	std	Y+4, r24	; 0x04
		    break;
 
		case 'X':
		  str1[j++]='3';
		  str1[j++]='1';
		  str1[j++]='1';
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='3';
		    break;
     622:	b7 c0       	rjmp	.+366    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case 'y':
		  str1[j++]='3';
     624:	83 e3       	ldi	r24, 0x33	; 51
     626:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='1';
     628:	91 e3       	ldi	r25, 0x31	; 49
     62a:	9a 83       	std	Y+2, r25	; 0x02
		  str1[j++]='3';
     62c:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j]='3';
     62e:	8c 83       	std	Y+4, r24	; 0x04
		    break;
 
		case 'y':
		  str1[j++]='3';
		  str1[j++]='1';
		  str1[j++]='3';
     630:	83 e0       	ldi	r24, 0x03	; 3
     632:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='3';
		    break;
     634:	ae c0       	rjmp	.+348    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case 'Z':
		  str1[j++]='3';
     636:	83 e3       	ldi	r24, 0x33	; 51
     638:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='3';
     63a:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='1';
     63c:	81 e3       	ldi	r24, 0x31	; 49
     63e:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j]='1';
     640:	8c 83       	std	Y+4, r24	; 0x04
		    break;
 
		case 'Z':
		  str1[j++]='3';
		  str1[j++]='3';
		  str1[j++]='1';
     642:	83 e0       	ldi	r24, 0x03	; 3
     644:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='1';
		    break;
     646:	a5 c0       	rjmp	.+330    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case '0':
		  str1[j++]='3';
     648:	83 e3       	ldi	r24, 0x33	; 51
     64a:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='3';
     64c:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='3';
     64e:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j++]='3';
     650:	8c 83       	std	Y+4, r24	; 0x04
		  str1[j]='3';
     652:	8d 83       	std	Y+5, r24	; 0x05
 
		case '0':
		  str1[j++]='3';
		  str1[j++]='3';
		  str1[j++]='3';
		  str1[j++]='3';
     654:	84 e0       	ldi	r24, 0x04	; 4
     656:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='3';
		    break;
     658:	9c c0       	rjmp	.+312    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case '1':
		  str1[j++]='1';
     65a:	81 e3       	ldi	r24, 0x31	; 49
     65c:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='3';
     65e:	83 e3       	ldi	r24, 0x33	; 51
     660:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='3';
     662:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j++]='3'; 
     664:	8c 83       	std	Y+4, r24	; 0x04
		  str1[j]='3';
     666:	8d 83       	std	Y+5, r24	; 0x05
 
		case '1':
		  str1[j++]='1';
		  str1[j++]='3';
		  str1[j++]='3';
		  str1[j++]='3'; 
     668:	84 e0       	ldi	r24, 0x04	; 4
     66a:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='3';
		    break;
     66c:	92 c0       	rjmp	.+292    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case '2':
		  str1[j++]='1';
     66e:	81 e3       	ldi	r24, 0x31	; 49
     670:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='1';
     672:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='3';
     674:	83 e3       	ldi	r24, 0x33	; 51
     676:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j+1]='3';
     678:	8d 83       	std	Y+5, r24	; 0x05
		  str1[j]='3';
     67a:	8c 83       	std	Y+4, r24	; 0x04
		    break;
 
		case '2':
		  str1[j++]='1';
		  str1[j++]='1';
		  str1[j++]='3';
     67c:	83 e0       	ldi	r24, 0x03	; 3
     67e:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j+1]='3';
		  str1[j]='3';
		    break;
     680:	88 c0       	rjmp	.+272    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case '3':
		  str1[j++]='1';
     682:	81 e3       	ldi	r24, 0x31	; 49
     684:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='1';
     686:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='1';
     688:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j++]='3';
     68a:	83 e3       	ldi	r24, 0x33	; 51
     68c:	8c 83       	std	Y+4, r24	; 0x04
		  str1[j]='3';
     68e:	8d 83       	std	Y+5, r24	; 0x05
 
		case '3':
		  str1[j++]='1';
		  str1[j++]='1';
		  str1[j++]='1';
		  str1[j++]='3';
     690:	84 e0       	ldi	r24, 0x04	; 4
     692:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='3';
		    break;
     694:	7e c0       	rjmp	.+252    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		
		case '4':
		  str1[j++]='1';
     696:	81 e3       	ldi	r24, 0x31	; 49
     698:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='1';
     69a:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='1';
     69c:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j++]='1';
     69e:	8c 83       	std	Y+4, r24	; 0x04
		  str1[j]='3';
     6a0:	83 e3       	ldi	r24, 0x33	; 51
     6a2:	8d 83       	std	Y+5, r24	; 0x05
		
		case '4':
		  str1[j++]='1';
		  str1[j++]='1';
		  str1[j++]='1';
		  str1[j++]='1';
     6a4:	84 e0       	ldi	r24, 0x04	; 4
     6a6:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='3';
		    break;
     6a8:	74 c0       	rjmp	.+232    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case '5':
		  str1[j++]='1';
     6aa:	81 e3       	ldi	r24, 0x31	; 49
     6ac:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='1';
     6ae:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='1';
     6b0:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j++]='1';
     6b2:	8c 83       	std	Y+4, r24	; 0x04
		  str1[j]='1';
     6b4:	8d 83       	std	Y+5, r24	; 0x05
 
		case '5':
		  str1[j++]='1';
		  str1[j++]='1';
		  str1[j++]='1';
		  str1[j++]='1';
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='1';
		    break;
     6ba:	6b c0       	rjmp	.+214    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case '6':
		  str1[j++]='3';
     6bc:	83 e3       	ldi	r24, 0x33	; 51
     6be:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='1';
     6c0:	81 e3       	ldi	r24, 0x31	; 49
     6c2:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='1';
     6c4:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j++]='1';
     6c6:	8c 83       	std	Y+4, r24	; 0x04
		  str1[j]='1';
     6c8:	8d 83       	std	Y+5, r24	; 0x05
 
		case '6':
		  str1[j++]='3';
		  str1[j++]='1';
		  str1[j++]='1';
		  str1[j++]='1';
     6ca:	84 e0       	ldi	r24, 0x04	; 4
     6cc:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='1';
		    break;
     6ce:	61 c0       	rjmp	.+194    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case '7':
		  str1[j++]='3';
     6d0:	83 e3       	ldi	r24, 0x33	; 51
     6d2:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='3';
     6d4:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='1';
     6d6:	81 e3       	ldi	r24, 0x31	; 49
     6d8:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j++]='1';
     6da:	8c 83       	std	Y+4, r24	; 0x04
		  str1[j]='1';
     6dc:	8d 83       	std	Y+5, r24	; 0x05
 
		case '7':
		  str1[j++]='3';
		  str1[j++]='3';
		  str1[j++]='1';
		  str1[j++]='1';
     6de:	84 e0       	ldi	r24, 0x04	; 4
     6e0:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='1';
		    break;
     6e2:	57 c0       	rjmp	.+174    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case '8':
		  str1[j++]='3';
     6e4:	83 e3       	ldi	r24, 0x33	; 51
     6e6:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='3';
     6e8:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='3';
     6ea:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j++]='1';
     6ec:	81 e3       	ldi	r24, 0x31	; 49
     6ee:	8c 83       	std	Y+4, r24	; 0x04
		  str1[j]='1';
     6f0:	8d 83       	std	Y+5, r24	; 0x05
 
		case '8':
		  str1[j++]='3';
		  str1[j++]='3';
		  str1[j++]='3';
		  str1[j++]='1';
     6f2:	84 e0       	ldi	r24, 0x04	; 4
     6f4:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='1';
		    break;
     6f6:	4d c0       	rjmp	.+154    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case '9':
		  str1[j++]='3';
     6f8:	83 e3       	ldi	r24, 0x33	; 51
     6fa:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='3';
     6fc:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='3';
     6fe:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j++]='3';
     700:	8c 83       	std	Y+4, r24	; 0x04
		  str1[j]='1';
     702:	81 e3       	ldi	r24, 0x31	; 49
     704:	8d 83       	std	Y+5, r24	; 0x05
 
		case '9':
		  str1[j++]='3';
		  str1[j++]='3';
		  str1[j++]='3';
		  str1[j++]='3';
     706:	84 e0       	ldi	r24, 0x04	; 4
     708:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='1';
		    break;
     70a:	43 c0       	rjmp	.+134    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case '.':
		  str1[j++]='1';
     70c:	91 e3       	ldi	r25, 0x31	; 49
     70e:	99 83       	std	Y+1, r25	; 0x01
		  str1[j++]='3';
     710:	83 e3       	ldi	r24, 0x33	; 51
     712:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='1';
     714:	9b 83       	std	Y+3, r25	; 0x03
		  str1[j++]='3';
     716:	8c 83       	std	Y+4, r24	; 0x04
		  str1[j++]='1';
     718:	9d 83       	std	Y+5, r25	; 0x05
		  str1[j]='3';
     71a:	8e 83       	std	Y+6, r24	; 0x06
		case '.':
		  str1[j++]='1';
		  str1[j++]='3';
		  str1[j++]='1';
		  str1[j++]='3';
		  str1[j++]='1';
     71c:	85 e0       	ldi	r24, 0x05	; 5
     71e:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='3';
		    break;
     720:	38 c0       	rjmp	.+112    	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case ',':
		  str1[j++]='3';
     722:	83 e3       	ldi	r24, 0x33	; 51
     724:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='3';
     726:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='1';
     728:	91 e3       	ldi	r25, 0x31	; 49
     72a:	9b 83       	std	Y+3, r25	; 0x03
		  str1[j++]='1';
     72c:	9c 83       	std	Y+4, r25	; 0x04
		  str1[j++]='3';
     72e:	8d 83       	std	Y+5, r24	; 0x05
		  str1[j]='3';
     730:	8e 83       	std	Y+6, r24	; 0x06
		case ',':
		  str1[j++]='3';
		  str1[j++]='3';
		  str1[j++]='1';
		  str1[j++]='1';
		  str1[j++]='3';
     732:	85 e0       	ldi	r24, 0x05	; 5
     734:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='3';
		    break;
     736:	2d c0       	rjmp	.+90     	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case ':':
		  str1[j++]='3';
     738:	83 e3       	ldi	r24, 0x33	; 51
     73a:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='3';
     73c:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='3';
     73e:	8b 83       	std	Y+3, r24	; 0x03
		  str1[j++]='1';
     740:	81 e3       	ldi	r24, 0x31	; 49
     742:	8c 83       	std	Y+4, r24	; 0x04
		  str1[j++]='1';
     744:	8d 83       	std	Y+5, r24	; 0x05
		  str1[j]='1';
     746:	8e 83       	std	Y+6, r24	; 0x06
		case ':':
		  str1[j++]='3';
		  str1[j++]='3';
		  str1[j++]='3';
		  str1[j++]='1';
		  str1[j++]='1';
     748:	85 e0       	ldi	r24, 0x05	; 5
     74a:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='1';
		    break;
     74c:	22 c0       	rjmp	.+68     	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
 
		case '?':
		  str1[j++]='1';
     74e:	81 e3       	ldi	r24, 0x31	; 49
     750:	89 83       	std	Y+1, r24	; 0x01
		  str1[j++]='1';
     752:	8a 83       	std	Y+2, r24	; 0x02
		  str1[j++]='3';
     754:	93 e3       	ldi	r25, 0x33	; 51
     756:	9b 83       	std	Y+3, r25	; 0x03
		  str1[j++]='3';
     758:	9c 83       	std	Y+4, r25	; 0x04
		  str1[j++]='1';
     75a:	8d 83       	std	Y+5, r24	; 0x05
		  str1[j]='1';
     75c:	8e 83       	std	Y+6, r24	; 0x06
		case '?':
		  str1[j++]='1';
		  str1[j++]='1';
		  str1[j++]='3';
		  str1[j++]='3';
		  str1[j++]='1';
     75e:	85 e0       	ldi	r24, 0x05	; 5
     760:	90 e0       	ldi	r25, 0x00	; 0
		  str1[j]='1';
		    break;
     762:	17 c0       	rjmp	.+46     	; 0x792 <_ZN11morsebuzzer13morseTransmitEc+0x322>
		
		}
	    j++;
	
	str1[j-1]='\0';
     764:	19 82       	std	Y+1, r1	; 0x01
		  str1[j++]='1';
		  str1[j]='1';
		    break;
		
		}
	    j++;
     766:	cc 24       	eor	r12, r12
     768:	c3 94       	inc	r12
     76a:	d1 2c       	mov	r13, r1
     76c:	1a c0       	rjmp	.+52     	; 0x7a2 <_ZN11morsebuzzer13morseTransmitEc+0x332>
	
	str1[j-1]='\0';
	for(int i=0;i<j;i++)
	{
		if(str1[i]=='1')
     76e:	f7 01       	movw	r30, r14
     770:	81 91       	ld	r24, Z+
     772:	7f 01       	movw	r14, r30
     774:	81 33       	cpi	r24, 0x31	; 49
     776:	19 f4       	brne	.+6      	; 0x77e <_ZN11morsebuzzer13morseTransmitEc+0x30e>
		{
		transmitDit();	
     778:	c5 01       	movw	r24, r10
     77a:	21 de       	rcall	.-958    	; 0x3be <_ZN11morsebuzzer11transmitDitEv>
     77c:	04 c0       	rjmp	.+8      	; 0x786 <_ZN11morsebuzzer13morseTransmitEc+0x316>
		}
		else if(str1[i]=='3')
     77e:	83 33       	cpi	r24, 0x33	; 51
     780:	11 f4       	brne	.+4      	; 0x786 <_ZN11morsebuzzer13morseTransmitEc+0x316>
		{
		transmitDah();
     782:	c5 01       	movw	r24, r10
     784:	46 de       	rcall	.-884    	; 0x412 <_ZN11morsebuzzer11transmitDahEv>
		
		}
	    j++;
	
	str1[j-1]='\0';
	for(int i=0;i<j;i++)
     786:	0f 5f       	subi	r16, 0xFF	; 255
     788:	1f 4f       	sbci	r17, 0xFF	; 255
     78a:	0c 15       	cp	r16, r12
     78c:	1d 05       	cpc	r17, r13
     78e:	7c f3       	brlt	.-34     	; 0x76e <_ZN11morsebuzzer13morseTransmitEc+0x2fe>
     790:	0e c0       	rjmp	.+28     	; 0x7ae <_ZN11morsebuzzer13morseTransmitEc+0x33e>
		  str1[j++]='1';
		  str1[j]='1';
		    break;
		
		}
	    j++;
     792:	6c 01       	movw	r12, r24
     794:	ff ef       	ldi	r31, 0xFF	; 255
     796:	cf 1a       	sub	r12, r31
     798:	df 0a       	sbc	r13, r31
	
	str1[j-1]='\0';
     79a:	fe 01       	movw	r30, r28
     79c:	e8 0f       	add	r30, r24
     79e:	f9 1f       	adc	r31, r25
     7a0:	11 82       	std	Z+1, r1	; 0x01
     7a2:	ce 01       	movw	r24, r28
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	7c 01       	movw	r14, r24
	PORTC&=~0x08;
}


void morsebuzzer::morseTransmit(char data)
{
     7a8:	00 e0       	ldi	r16, 0x00	; 0
     7aa:	10 e0       	ldi	r17, 0x00	; 0
     7ac:	e0 cf       	rjmp	.-64     	; 0x76e <_ZN11morsebuzzer13morseTransmitEc+0x2fe>
	transmitDah();
	transmitDah();
	delay(2*timeofdit);
	
	*/
}
     7ae:	27 96       	adiw	r28, 0x07	; 7
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	f8 94       	cli
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	cd bf       	out	0x3d, r28	; 61
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	ff 90       	pop	r15
     7c4:	ef 90       	pop	r14
     7c6:	df 90       	pop	r13
     7c8:	cf 90       	pop	r12
     7ca:	bf 90       	pop	r11
     7cc:	af 90       	pop	r10
     7ce:	08 95       	ret

000007d0 <_ZN9Processor12motionConfigEv>:
	PORTA = 0x06;
}

void Processor::backward()
{
	PORTA = 0x09;
     7d0:	81 b1       	in	r24, 0x01	; 1
     7d2:	8f 60       	ori	r24, 0x0F	; 15
     7d4:	81 b9       	out	0x01, r24	; 1
     7d6:	82 b1       	in	r24, 0x02	; 2
     7d8:	12 b8       	out	0x02, r1	; 2
     7da:	ea e0       	ldi	r30, 0x0A	; 10
     7dc:	f1 e0       	ldi	r31, 0x01	; 1
     7de:	80 81       	ld	r24, Z
     7e0:	88 61       	ori	r24, 0x18	; 24
     7e2:	80 83       	st	Z, r24
     7e4:	eb e0       	ldi	r30, 0x0B	; 11
     7e6:	f1 e0       	ldi	r31, 0x01	; 1
     7e8:	80 81       	ld	r24, Z
     7ea:	88 61       	ori	r24, 0x18	; 24
     7ec:	80 83       	st	Z, r24
     7ee:	08 95       	ret

000007f0 <_ZN9Processor16moveMotorForwardEv>:
	PORTA = 0x00;
}

void Processor::forward()
{
	PORTA = 0x06;
     7f0:	86 e0       	ldi	r24, 0x06	; 6
     7f2:	82 b9       	out	0x02, r24	; 2
     7f4:	2f ef       	ldi	r18, 0xFF	; 255
     7f6:	8f ef       	ldi	r24, 0xFF	; 255
     7f8:	99 e5       	ldi	r25, 0x59	; 89
     7fa:	21 50       	subi	r18, 0x01	; 1
     7fc:	80 40       	sbci	r24, 0x00	; 0
     7fe:	90 40       	sbci	r25, 0x00	; 0
     800:	e1 f7       	brne	.-8      	; 0x7fa <_ZN9Processor16moveMotorForwardEv+0xa>
     802:	00 c0       	rjmp	.+0      	; 0x804 <_ZN9Processor16moveMotorForwardEv+0x14>
     804:	00 00       	nop
	PORTL |= 0x18;
}

void Processor::motorStop()
{
	PORTA = 0x00;
     806:	12 b8       	out	0x02, r1	; 2
     808:	08 95       	ret

0000080a <_ZN9Processor17moveMotorBackwardEv>:
	PORTA = 0x06;
}

void Processor::backward()
{
	PORTA = 0x09;
     80a:	89 e0       	ldi	r24, 0x09	; 9
     80c:	82 b9       	out	0x02, r24	; 2
     80e:	2f ef       	ldi	r18, 0xFF	; 255
     810:	8f ef       	ldi	r24, 0xFF	; 255
     812:	99 e5       	ldi	r25, 0x59	; 89
     814:	21 50       	subi	r18, 0x01	; 1
     816:	80 40       	sbci	r24, 0x00	; 0
     818:	90 40       	sbci	r25, 0x00	; 0
     81a:	e1 f7       	brne	.-8      	; 0x814 <_ZN9Processor17moveMotorBackwardEv+0xa>
     81c:	00 c0       	rjmp	.+0      	; 0x81e <_ZN9Processor17moveMotorBackwardEv+0x14>
     81e:	00 00       	nop
	PORTL |= 0x18;
}

void Processor::motorStop()
{
	PORTA = 0x00;
     820:	12 b8       	out	0x02, r1	; 2
     822:	08 95       	ret

00000824 <_ZN9Processor7processEc>:
#include "Processor.h"

int Processor::process(char decoded)
{
	
	if(decoded=='f')
     824:	66 36       	cpi	r22, 0x66	; 102
     826:	21 f4       	brne	.+8      	; 0x830 <_ZN9Processor7processEc+0xc>
	{
		moveMotorForward();
     828:	e3 df       	rcall	.-58     	; 0x7f0 <_ZN9Processor16moveMotorForwardEv>
		return 0;
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	08 95       	ret
	}			
	if(decoded=='b')
     830:	62 36       	cpi	r22, 0x62	; 98
     832:	21 f4       	brne	.+8      	; 0x83c <_ZN9Processor7processEc+0x18>
	{
		moveMotorBackward();
     834:	ea df       	rcall	.-44     	; 0x80a <_ZN9Processor17moveMotorBackwardEv>
		return 0;
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	08 95       	ret
	}			
	else
		return -1;		
     83c:	8f ef       	ldi	r24, 0xFF	; 255
     83e:	9f ef       	ldi	r25, 0xFF	; 255
}
     840:	08 95       	ret

00000842 <_ZN9ProcessorC1Ev>:
	motorStop();
	//_delay_ms(2000);
}
Processor::Processor()
{
	motionConfig();		//initialise the pins 
     842:	c6 cf       	rjmp	.-116    	; 0x7d0 <_ZN9Processor12motionConfigEv>
     844:	08 95       	ret

00000846 <_ZN5pulseC1Ev>:
 *  Author: Ajinkya
 */ 
#include "pulse.h"
pulse::pulse()
{
	pulseData.ifData=0;		//set validity of data to invalid
     846:	fc 01       	movw	r30, r24
     848:	14 86       	std	Z+12, r1	; 0x0c
	timeout=2;				//timeout in ms for getting pulse
     84a:	ed 59       	subi	r30, 0x9D	; 157
     84c:	ff 4f       	sbci	r31, 0xFF	; 255
     84e:	22 e0       	ldi	r18, 0x02	; 2
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	31 83       	std	Z+1, r19	; 0x01
     854:	20 83       	st	Z, r18
	wordsPerMinute=15;		//WPM of morse code
     856:	3a 96       	adiw	r30, 0x0a	; 10
     858:	2f e0       	ldi	r18, 0x0F	; 15
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	31 83       	std	Z+1, r19	; 0x01
     85e:	20 83       	st	Z, r18
	tDit=1200/wordsPerMinute;	//calculates time of dits given WPM		
     860:	34 97       	sbiw	r30, 0x04	; 4
     862:	20 e5       	ldi	r18, 0x50	; 80
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	31 83       	std	Z+1, r19	; 0x01
     868:	20 83       	st	Z, r18
	tDah=3*tDit;				//calculates time of dahs from tDit
     86a:	32 96       	adiw	r30, 0x02	; 2
     86c:	20 ef       	ldi	r18, 0xF0	; 240
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	31 83       	std	Z+1, r19	; 0x01
     872:	20 83       	st	Z, r18
	thresholdTime=tDit/2;		//used for removal of pulses of length less than it (in ms)	must be +ve assume tdit >20
     874:	36 97       	sbiw	r30, 0x06	; 6
     876:	28 e2       	ldi	r18, 0x28	; 40
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	31 83       	std	Z+1, r19	; 0x01
     87c:	20 83       	st	Z, r18
	maxThresholdTime=(tDah*3)/2;	//used for removal of pulses of length more than it (in ms)	[threshold times doesn't account in errorCheck , removed in capture sequence]
     87e:	32 96       	adiw	r30, 0x02	; 2
     880:	28 e6       	ldi	r18, 0x68	; 104
     882:	31 e0       	ldi	r19, 0x01	; 1
     884:	31 83       	std	Z+1, r19	; 0x01
     886:	20 83       	st	Z, r18
	errorCheck=true;			//for calculating error checks on received pulse data
     888:	3a 96       	adiw	r30, 0x0a	; 10
     88a:	21 e0       	ldi	r18, 0x01	; 1
     88c:	20 83       	st	Z, r18
	tolerance=50;				
     88e:	32 97       	sbiw	r30, 0x02	; 2
     890:	22 e3       	ldi	r18, 0x32	; 50
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	31 83       	std	Z+1, r19	; 0x01
     896:	20 83       	st	Z, r18
     898:	08 95       	ret

0000089a <_ZN5pulse4initEv>:
//pulse::init initialses the registers for counting the clock pulses on 
//T1 pin of mcu, 
void pulse::init(void)
{
	
	TCCR1A=0;		//not using any other mode
     89a:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=(1<<CS12)|(1<<CS11); //set clock source as falling edge on T1 pin
     89e:	86 e0       	ldi	r24, 0x06	; 6
     8a0:	80 93 81 00 	sts	0x0081, r24
	TCNT1=0;					//set initial value of counter to zero
     8a4:	10 92 85 00 	sts	0x0085, r1
     8a8:	10 92 84 00 	sts	0x0084, r1
	OCR1A=0;					//not using other timer modules
     8ac:	10 92 89 00 	sts	0x0089, r1
     8b0:	10 92 88 00 	sts	0x0088, r1
	OCR1B=0;
     8b4:	10 92 8b 00 	sts	0x008B, r1
     8b8:	10 92 8a 00 	sts	0x008A, r1
	ICR1=0;
     8bc:	10 92 87 00 	sts	0x0087, r1
     8c0:	10 92 86 00 	sts	0x0086, r1
	TIMSK1=0;					//not using interrupts for timer 1
     8c4:	10 92 6f 00 	sts	0x006F, r1
	TIFR1=0;
     8c8:	16 ba       	out	0x16, r1	; 22
	DDRD&=~(1<<PD6);							//make T1 pin as input PD6
     8ca:	56 98       	cbi	0x0a, 6	; 10
     8cc:	08 95       	ret

000008ce <_ZN5pulse5delayEj>:
	}
	return 1;
}
void pulse::delay(unsigned int time_ms)
{
	while(time_ms--)_delay_ms(1);
     8ce:	61 15       	cp	r22, r1
     8d0:	71 05       	cpc	r23, r1
     8d2:	51 f0       	breq	.+20     	; 0x8e8 <_ZN5pulse5delayEj+0x1a>
     8d4:	86 e6       	ldi	r24, 0x66	; 102
     8d6:	9e e0       	ldi	r25, 0x0E	; 14
     8d8:	01 97       	sbiw	r24, 0x01	; 1
     8da:	f1 f7       	brne	.-4      	; 0x8d8 <_ZN5pulse5delayEj+0xa>
     8dc:	00 00       	nop
     8de:	61 50       	subi	r22, 0x01	; 1
     8e0:	71 09       	sbc	r23, r1
     8e2:	61 15       	cp	r22, r1
     8e4:	71 05       	cpc	r23, r1
     8e6:	b1 f7       	brne	.-20     	; 0x8d4 <_ZN5pulse5delayEj+0x6>
     8e8:	08 95       	ret

000008ea <_ZN9pulseInfo17setPulseWidthTimeEv>:
}

void pulseInfo::setPulseWidthTime()
{
     8ea:	fc 01       	movw	r30, r24
	pulseWidthTime=stopTime-startTime;
     8ec:	84 81       	ldd	r24, Z+4	; 0x04
     8ee:	95 81       	ldd	r25, Z+5	; 0x05
     8f0:	20 81       	ld	r18, Z
     8f2:	31 81       	ldd	r19, Z+1	; 0x01
     8f4:	82 1b       	sub	r24, r18
     8f6:	93 0b       	sbc	r25, r19
     8f8:	93 87       	std	Z+11, r25	; 0x0b
     8fa:	82 87       	std	Z+10, r24	; 0x0a
     8fc:	08 95       	ret

000008fe <_ZN5pulse7captureEv>:
*check every 2 ms that counter is incremented or not
*if incremented continue to check
*else exit loop and save timer value as pulse count 
*********************************************************/
char pulse::capture()
{
     8fe:	4f 92       	push	r4
     900:	5f 92       	push	r5
     902:	6f 92       	push	r6
     904:	7f 92       	push	r7
     906:	af 92       	push	r10
     908:	bf 92       	push	r11
     90a:	cf 92       	push	r12
     90c:	df 92       	push	r13
     90e:	ef 92       	push	r14
     910:	ff 92       	push	r15
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	ec 01       	movw	r28, r24
	init();					//initialise registers for capture
     91c:	be df       	rcall	.-132    	; 0x89a <_ZN5pulse4initEv>
	pulseData.numberOfEdges	= 0;		
     91e:	19 86       	std	Y+9, r1	; 0x09
     920:	18 86       	std	Y+8, r1	; 0x08
	unsigned long temptime=systime::getSysTime();										//save time when it looks for a pulse 
     922:	c0 d2       	rcall	.+1408   	; 0xea4 <_ZN7systime10getSysTimeEv>
     924:	2b 01       	movw	r4, r22
     926:	3c 01       	movw	r6, r24
	while(TCNT1 == 0){
     928:	04 e8       	ldi	r16, 0x84	; 132
     92a:	10 e0       	ldi	r17, 0x00	; 0
		if( (systime::getSysTime()-temptime)>(unsigned long)(1.5*tDit))					//check if sufficient time has passed after
     92c:	5e 01       	movw	r10, r28
     92e:	89 e6       	ldi	r24, 0x69	; 105
     930:	a8 0e       	add	r10, r24
     932:	b1 1c       	adc	r11, r1
char pulse::capture()
{
	init();					//initialise registers for capture
	pulseData.numberOfEdges	= 0;		
	unsigned long temptime=systime::getSysTime();										//save time when it looks for a pulse 
	while(TCNT1 == 0){
     934:	21 c0       	rjmp	.+66     	; 0x978 <_ZN5pulse7captureEv+0x7a>
		if( (systime::getSysTime()-temptime)>(unsigned long)(1.5*tDit))					//check if sufficient time has passed after
     936:	b6 d2       	rcall	.+1388   	; 0xea4 <_ZN7systime10getSysTimeEv>
     938:	6b 01       	movw	r12, r22
     93a:	7c 01       	movw	r14, r24
     93c:	c4 18       	sub	r12, r4
     93e:	d5 08       	sbc	r13, r5
     940:	e6 08       	sbc	r14, r6
     942:	f7 08       	sbc	r15, r7
     944:	f5 01       	movw	r30, r10
     946:	60 81       	ld	r22, Z
     948:	71 81       	ldd	r23, Z+1	; 0x01
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	22 d3       	rcall	.+1604   	; 0xf94 <__floatunsisf>
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 ec       	ldi	r20, 0xC0	; 192
     956:	5f e3       	ldi	r21, 0x3F	; 63
     958:	83 d3       	rcall	.+1798   	; 0x1060 <__mulsf3>
     95a:	f0 d2       	rcall	.+1504   	; 0xf3c <__fixunssfsi>
     95c:	6c 15       	cp	r22, r12
     95e:	7d 05       	cpc	r23, r13
     960:	8e 05       	cpc	r24, r14
     962:	9f 05       	cpc	r25, r15
     964:	48 f4       	brcc	.+18     	; 0x978 <_ZN5pulse7captureEv+0x7a>
		{
			isDitTimeout=true;															//if yes setDitTimeout Bit
     966:	fe 01       	movw	r30, r28
     968:	ee 59       	subi	r30, 0x9E	; 158
     96a:	ff 4f       	sbci	r31, 0xFF	; 255
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	80 83       	st	Z, r24
			flag=1;
     970:	cf 59       	subi	r28, 0x9F	; 159
     972:	df 4f       	sbci	r29, 0xFF	; 255
     974:	88 83       	st	Y, r24
			return flag;
     976:	4a c0       	rjmp	.+148    	; 0xa0c <_ZN5pulse7captureEv+0x10e>
char pulse::capture()
{
	init();					//initialise registers for capture
	pulseData.numberOfEdges	= 0;		
	unsigned long temptime=systime::getSysTime();										//save time when it looks for a pulse 
	while(TCNT1 == 0){
     978:	f8 01       	movw	r30, r16
     97a:	80 81       	ld	r24, Z
     97c:	91 81       	ldd	r25, Z+1	; 0x01
     97e:	89 2b       	or	r24, r25
     980:	d1 f2       	breq	.-76     	; 0x936 <_ZN5pulse7captureEv+0x38>
			flag=1;
			return flag;
		}
	};		//wait for first falling edge		//ie within timeout edge is detected
	
	pulseData.startTime=systime::getSysTime();	//save START TIME
     982:	90 d2       	rcall	.+1312   	; 0xea4 <_ZN7systime10getSysTimeEv>
     984:	68 83       	st	Y, r22
     986:	79 83       	std	Y+1, r23	; 0x01
     988:	8a 83       	std	Y+2, r24	; 0x02
     98a:	9b 83       	std	Y+3, r25	; 0x03
	isDitTimeout=false;
     98c:	fe 01       	movw	r30, r28
     98e:	ee 59       	subi	r30, 0x9E	; 158
     990:	ff 4f       	sbci	r31, 0xFF	; 255
     992:	10 82       	st	Z, r1
	while(true)									
	{
		pulseData.numberOfEdges=TCNT1;
     994:	04 e8       	ldi	r16, 0x84	; 132
     996:	10 e0       	ldi	r17, 0x00	; 0
		delay(timeout);								///timeout value pulse edge timeoutSS
     998:	7e 01       	movw	r14, r28
     99a:	f3 e6       	ldi	r31, 0x63	; 99
     99c:	ef 0e       	add	r14, r31
     99e:	f1 1c       	adc	r15, r1
	
	pulseData.startTime=systime::getSysTime();	//save START TIME
	isDitTimeout=false;
	while(true)									
	{
		pulseData.numberOfEdges=TCNT1;
     9a0:	f8 01       	movw	r30, r16
     9a2:	80 81       	ld	r24, Z
     9a4:	91 81       	ldd	r25, Z+1	; 0x01
     9a6:	99 87       	std	Y+9, r25	; 0x09
     9a8:	88 87       	std	Y+8, r24	; 0x08
		delay(timeout);								///timeout value pulse edge timeoutSS
     9aa:	f7 01       	movw	r30, r14
     9ac:	60 81       	ld	r22, Z
     9ae:	71 81       	ldd	r23, Z+1	; 0x01
     9b0:	ce 01       	movw	r24, r28
     9b2:	8d df       	rcall	.-230    	; 0x8ce <_ZN5pulse5delayEj>
		if(pulseData.numberOfEdges == TCNT1)break;	//break only if counter value
     9b4:	f8 01       	movw	r30, r16
     9b6:	80 81       	ld	r24, Z
     9b8:	91 81       	ldd	r25, Z+1	; 0x01
     9ba:	28 85       	ldd	r18, Y+8	; 0x08
     9bc:	39 85       	ldd	r19, Y+9	; 0x09
     9be:	28 17       	cp	r18, r24
     9c0:	39 07       	cpc	r19, r25
     9c2:	71 f7       	brne	.-36     	; 0x9a0 <_ZN5pulse7captureEv+0xa2>
													//does not changes within timeout
	}
	pulseData.stopTime=systime::getSysTime();		//save pulse STOP TIME
     9c4:	6f d2       	rcall	.+1246   	; 0xea4 <_ZN7systime10getSysTimeEv>
     9c6:	6c 83       	std	Y+4, r22	; 0x04
     9c8:	7d 83       	std	Y+5, r23	; 0x05
     9ca:	8e 83       	std	Y+6, r24	; 0x06
     9cc:	9f 83       	std	Y+7, r25	; 0x07
	pulseData.setPulseWidthTime();					
     9ce:	ce 01       	movw	r24, r28
     9d0:	8c df       	rcall	.-232    	; 0x8ea <_ZN9pulseInfo17setPulseWidthTimeEv>
	
	if((pulseData.pulseWidthTime<thresholdTime)	&&	(pulseData.pulseWidthTime>maxThresholdTime)	)//flag for error
     9d2:	8a 85       	ldd	r24, Y+10	; 0x0a
     9d4:	9b 85       	ldd	r25, Y+11	; 0x0b
     9d6:	fe 01       	movw	r30, r28
     9d8:	eb 59       	subi	r30, 0x9B	; 155
     9da:	ff 4f       	sbci	r31, 0xFF	; 255
     9dc:	20 81       	ld	r18, Z
     9de:	31 81       	ldd	r19, Z+1	; 0x01
     9e0:	82 17       	cp	r24, r18
     9e2:	93 07       	cpc	r25, r19
     9e4:	48 f4       	brcc	.+18     	; 0x9f8 <_ZN5pulse7captureEv+0xfa>
     9e6:	32 96       	adiw	r30, 0x02	; 2
     9e8:	20 81       	ld	r18, Z
     9ea:	31 81       	ldd	r19, Z+1	; 0x01
     9ec:	28 17       	cp	r18, r24
     9ee:	39 07       	cpc	r19, r25
     9f0:	18 f4       	brcc	.+6      	; 0x9f8 <_ZN5pulse7captureEv+0xfa>
	{
		flag=0;			//invalid flag : unsuccessful
     9f2:	36 97       	sbiw	r30, 0x06	; 6
     9f4:	10 82       	st	Z, r1
     9f6:	05 c0       	rjmp	.+10     	; 0xa02 <_ZN5pulse7captureEv+0x104>
	}else{
		flag=1;			//valid flag   : successful
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	fe 01       	movw	r30, r28
     9fc:	ef 59       	subi	r30, 0x9F	; 159
     9fe:	ff 4f       	sbci	r31, 0xFF	; 255
     a00:	80 83       	st	Z, r24
	}
	pulseData.ifData=flag;			//says validity of pulse data
     a02:	fe 01       	movw	r30, r28
     a04:	ef 59       	subi	r30, 0x9F	; 159
     a06:	ff 4f       	sbci	r31, 0xFF	; 255
     a08:	80 81       	ld	r24, Z
     a0a:	8c 87       	std	Y+12, r24	; 0x0c
	return flag;
}
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	1f 91       	pop	r17
     a12:	0f 91       	pop	r16
     a14:	ff 90       	pop	r15
     a16:	ef 90       	pop	r14
     a18:	df 90       	pop	r13
     a1a:	cf 90       	pop	r12
     a1c:	bf 90       	pop	r11
     a1e:	af 90       	pop	r10
     a20:	7f 90       	pop	r7
     a22:	6f 90       	pop	r6
     a24:	5f 90       	pop	r5
     a26:	4f 90       	pop	r4
     a28:	08 95       	ret

00000a2a <_ZN5pulse11receiveCodeEv>:
/***************************************
*char pulse::receiveCode()
*returns 1 if successful 
****************************************/
char pulse::receiveCode()	
{
     a2a:	cf 92       	push	r12
     a2c:	df 92       	push	r13
     a2e:	ef 92       	push	r14
     a30:	ff 92       	push	r15
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	ec 01       	movw	r28, r24
	char timeoutNo=0;
	bool isFirstTimeout=true;
	for(int i=0; i<6; )
     a3c:	00 e0       	ldi	r16, 0x00	; 0
     a3e:	10 e0       	ldi	r17, 0x00	; 0
	{
		char isValid = capture();		//receive data for pulse
		if(isValid==1)				
		{
			if(isDitTimeout==false)		//c
     a40:	7c 01       	movw	r14, r24
     a42:	82 e6       	ldi	r24, 0x62	; 98
     a44:	e8 0e       	add	r14, r24
     a46:	f1 1c       	adc	r15, r1
			{
				morsePulses[i]=pulseData;		//if not ditTimeout then save the data and increment index 'i'
     a48:	0f 2e       	mov	r0, r31
     a4a:	fd e0       	ldi	r31, 0x0D	; 13
     a4c:	df 2e       	mov	r13, r31
     a4e:	f0 2d       	mov	r31, r0
				morsePulses[i].ifData=1;
     a50:	cc 24       	eor	r12, r12
     a52:	c3 94       	inc	r12
{
	char timeoutNo=0;
	bool isFirstTimeout=true;
	for(int i=0; i<6; )
	{
		char isValid = capture();		//receive data for pulse
     a54:	ce 01       	movw	r24, r28
     a56:	53 df       	rcall	.-346    	; 0x8fe <_ZN5pulse7captureEv>
		if(isValid==1)				
     a58:	81 30       	cpi	r24, 0x01	; 1
     a5a:	c1 f5       	brne	.+112    	; 0xacc <_ZN5pulse11receiveCodeEv+0xa2>
		{
			if(isDitTimeout==false)		//c
     a5c:	f7 01       	movw	r30, r14
     a5e:	80 81       	ld	r24, Z
     a60:	88 23       	and	r24, r24
     a62:	21 f0       	breq	.+8      	; 0xa6c <_ZN5pulse11receiveCodeEv+0x42>
			}else{								//else it was a ditTimeout
				
				if(isFirstTimeout==true)	//for first timout repeat and for other return it
				{
					isFirstTimeout = false;	//next time this  will not execute
					for(int j=5;j>i;j--)
     a64:	05 30       	cpi	r16, 0x05	; 5
     a66:	11 05       	cpc	r17, r1
     a68:	ec f0       	brlt	.+58     	; 0xaa4 <_ZN5pulse11receiveCodeEv+0x7a>
     a6a:	34 c0       	rjmp	.+104    	; 0xad4 <_ZN5pulse11receiveCodeEv+0xaa>
		char isValid = capture();		//receive data for pulse
		if(isValid==1)				
		{
			if(isDitTimeout==false)		//c
			{
				morsePulses[i]=pulseData;		//if not ditTimeout then save the data and increment index 'i'
     a6c:	c8 01       	movw	r24, r16
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	d8 9e       	mul	r13, r24
     a72:	d0 01       	movw	r26, r0
     a74:	d9 9e       	mul	r13, r25
     a76:	b0 0d       	add	r27, r0
     a78:	11 24       	eor	r1, r1
     a7a:	ac 0f       	add	r26, r28
     a7c:	bd 1f       	adc	r27, r29
     a7e:	fe 01       	movw	r30, r28
     a80:	2d 2d       	mov	r18, r13
     a82:	01 90       	ld	r0, Z+
     a84:	0d 92       	st	X+, r0
     a86:	2a 95       	dec	r18
     a88:	e1 f7       	brne	.-8      	; 0xa82 <_ZN5pulse11receiveCodeEv+0x58>
				morsePulses[i].ifData=1;
     a8a:	d0 9e       	mul	r13, r16
     a8c:	f0 01       	movw	r30, r0
     a8e:	d1 9e       	mul	r13, r17
     a90:	f0 0d       	add	r31, r0
     a92:	11 24       	eor	r1, r1
     a94:	ec 0f       	add	r30, r28
     a96:	fd 1f       	adc	r31, r29
     a98:	c1 8e       	std	Z+25, r12	; 0x19
				i++;
     a9a:	8c 01       	movw	r16, r24
****************************************/
char pulse::receiveCode()	
{
	char timeoutNo=0;
	bool isFirstTimeout=true;
	for(int i=0; i<6; )
     a9c:	86 30       	cpi	r24, 0x06	; 6
     a9e:	91 05       	cpc	r25, r1
     aa0:	cc f4       	brge	.+50     	; 0xad4 <_ZN5pulse11receiveCodeEv+0xaa>
     aa2:	d8 cf       	rjmp	.-80     	; 0xa54 <_ZN5pulse11receiveCodeEv+0x2a>
     aa4:	ce 01       	movw	r24, r28
     aa6:	c1 54       	subi	r28, 0x41	; 65
     aa8:	d1 09       	sbc	r29, r1
     aaa:	4d e0       	ldi	r20, 0x0D	; 13
     aac:	40 9f       	mul	r20, r16
     aae:	90 01       	movw	r18, r0
     ab0:	41 9f       	mul	r20, r17
     ab2:	30 0d       	add	r19, r0
     ab4:	11 24       	eor	r1, r1
     ab6:	2c 0f       	add	r18, r28
     ab8:	3d 1f       	adc	r19, r29
     aba:	fc 01       	movw	r30, r24
     abc:	e6 5a       	subi	r30, 0xA6	; 166
     abe:	ff 4f       	sbci	r31, 0xFF	; 255
				if(isFirstTimeout==true)	//for first timout repeat and for other return it
				{
					isFirstTimeout = false;	//next time this  will not execute
					for(int j=5;j>i;j--)
					{
						morsePulses[j].ifData=0;				//make all other ifData zero
     ac0:	10 82       	st	Z, r1
     ac2:	0d 97       	sbiw	r24, 0x0d	; 13
			}else{								//else it was a ditTimeout
				
				if(isFirstTimeout==true)	//for first timout repeat and for other return it
				{
					isFirstTimeout = false;	//next time this  will not execute
					for(int j=5;j>i;j--)
     ac4:	82 17       	cp	r24, r18
     ac6:	93 07       	cpc	r25, r19
     ac8:	c1 f7       	brne	.-16     	; 0xaba <_ZN5pulse11receiveCodeEv+0x90>
     aca:	04 c0       	rjmp	.+8      	; 0xad4 <_ZN5pulse11receiveCodeEv+0xaa>
****************************************/
char pulse::receiveCode()	
{
	char timeoutNo=0;
	bool isFirstTimeout=true;
	for(int i=0; i<6; )
     acc:	06 30       	cpi	r16, 0x06	; 6
     ace:	11 05       	cpc	r17, r1
     ad0:	0c f4       	brge	.+2      	; 0xad4 <_ZN5pulse11receiveCodeEv+0xaa>
     ad2:	c0 cf       	rjmp	.-128    	; 0xa54 <_ZN5pulse11receiveCodeEv+0x2a>
						}
				}
		}else ;					//do nothing if it was not a valid data
	}
	return 1;
}
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	ff 90       	pop	r15
     ae0:	ef 90       	pop	r14
     ae2:	df 90       	pop	r13
     ae4:	cf 90       	pop	r12
     ae6:	08 95       	ret

00000ae8 <_ZN5pulse14decodeToDitDahEv>:
*extracts dit and dah from the morsePulses array and stores in  DitDah array
*returns true if successful (only if error checking) else false
*absense of errorChecking strictly calculates on based on (tDit+tDah)/2
**********************************************/
bool pulse::decodeToDitDah()
{
     ae8:	4f 92       	push	r4
     aea:	5f 92       	push	r5
     aec:	6f 92       	push	r6
     aee:	7f 92       	push	r7
     af0:	8f 92       	push	r8
     af2:	9f 92       	push	r9
     af4:	af 92       	push	r10
     af6:	bf 92       	push	r11
     af8:	cf 92       	push	r12
     afa:	df 92       	push	r13
     afc:	ef 92       	push	r14
     afe:	ff 92       	push	r15
     b00:	0f 93       	push	r16
     b02:	1f 93       	push	r17
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
	
	//find number of morse pulses
	int i=0;
	for(i=0; i<6; i++) DitDah[i] = 0;		//make  all previous data to zero
     b08:	fc 01       	movw	r30, r24
     b0a:	e5 5a       	subi	r30, 0xA5	; 165
     b0c:	ff 4f       	sbci	r31, 0xFF	; 255
     b0e:	10 82       	st	Z, r1
     b10:	31 96       	adiw	r30, 0x01	; 1
     b12:	10 82       	st	Z, r1
     b14:	31 96       	adiw	r30, 0x01	; 1
     b16:	10 82       	st	Z, r1
     b18:	31 96       	adiw	r30, 0x01	; 1
     b1a:	10 82       	st	Z, r1
     b1c:	31 96       	adiw	r30, 0x01	; 1
     b1e:	10 82       	st	Z, r1
     b20:	31 96       	adiw	r30, 0x01	; 1
     b22:	10 82       	st	Z, r1
	for( i=0;morsePulses[i].ifData!=0;i++);
     b24:	ec 01       	movw	r28, r24
     b26:	29 8d       	ldd	r18, Y+25	; 0x19
     b28:	21 11       	cpse	r18, r1
     b2a:	15 c0       	rjmp	.+42     	; 0xb56 <_ZN5pulse14decodeToDitDahEv+0x6e>
     b2c:	fc 01       	movw	r30, r24
     b2e:	dc 01       	movw	r26, r24
     b30:	a5 5a       	subi	r26, 0xA5	; 165
     b32:	bf 4f       	sbci	r27, 0xFF	; 255
*extracts dit and dah from the morsePulses array and stores in  DitDah array
*returns true if successful (only if error checking) else false
*absense of errorChecking strictly calculates on based on (tDit+tDah)/2
**********************************************/
bool pulse::decodeToDitDah()
{
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
		{
			DitDah[j]=0;
			continue;
		}
		else{
				if(errorCheck)
     b38:	bc 01       	movw	r22, r24
     b3a:	6f 58       	subi	r22, 0x8F	; 143
     b3c:	7f 4f       	sbci	r23, 0xFF	; 255
					unsigned long timeWidth (morsePulses[j].startTime-morsePulses[j-1].stopTime) ;		//finding time distance betn next pulse falling and previous pulse rising
					if(!((timeWidth>tDit/2) && ( timeWidth <tDah/2) ))return false;
					}
				}
				//if( absolute(morsePulses[j].pulseWidthTime - tDah ) < tolerance )							//its a dah
				if(morsePulses[j].pulseWidthTime>=2*tDit)
     b3e:	ac 01       	movw	r20, r24
     b40:	47 59       	subi	r20, 0x97	; 151
     b42:	5f 4f       	sbci	r21, 0xFF	; 255
					DitDah[j]=3;
				}
			//	else if(absolute(morsePulses[j].pulseWidthTime-tDit)<tolerance)							//its a dit
				else if (morsePulses[j].pulseWidthTime<2*tDit)
				{
					DitDah[j]=1;
     b44:	aa 24       	eor	r10, r10
     b46:	a3 94       	inc	r10
					}
				}
				//if( absolute(morsePulses[j].pulseWidthTime - tDah ) < tolerance )							//its a dah
				if(morsePulses[j].pulseWidthTime>=2*tDit)
				{
					DitDah[j]=3;
     b48:	0f 2e       	mov	r0, r31
     b4a:	f3 e0       	ldi	r31, 0x03	; 3
     b4c:	bf 2e       	mov	r11, r31
     b4e:	f0 2d       	mov	r31, r0
				if(errorCheck)
				{
					if(j>0)			//if not the first pulse
					{
					unsigned long timeWidth (morsePulses[j].startTime-morsePulses[j-1].stopTime) ;		//finding time distance betn next pulse falling and previous pulse rising
					if(!((timeWidth>tDit/2) && ( timeWidth <tDah/2) ))return false;
     b50:	85 59       	subi	r24, 0x95	; 149
     b52:	9f 4f       	sbci	r25, 0xFF	; 255
     b54:	0b c0       	rjmp	.+22     	; 0xb6c <_ZN5pulse14decodeToDitDahEv+0x84>
     b56:	9c 01       	movw	r18, r24
     b58:	2a 5d       	subi	r18, 0xDA	; 218
     b5a:	3f 4f       	sbci	r19, 0xFF	; 255
     b5c:	23 5f       	subi	r18, 0xF3	; 243
     b5e:	3f 4f       	sbci	r19, 0xFF	; 255
     b60:	f9 01       	movw	r30, r18
     b62:	3d 97       	sbiw	r30, 0x0d	; 13
{
	
	//find number of morse pulses
	int i=0;
	for(i=0; i<6; i++) DitDah[i] = 0;		//make  all previous data to zero
	for( i=0;morsePulses[i].ifData!=0;i++);
     b64:	40 81       	ld	r20, Z
     b66:	41 11       	cpse	r20, r1
     b68:	f9 cf       	rjmp	.-14     	; 0xb5c <_ZN5pulse14decodeToDitDahEv+0x74>
     b6a:	e0 cf       	rjmp	.-64     	; 0xb2c <_ZN5pulse14decodeToDitDahEv+0x44>
     b6c:	4f 01       	movw	r8, r30
	int numberOfPulses=i;
	for(int j=0;j<6;j++)
	{
		if(morsePulses[j].ifData==0)		//just to be safe
     b6e:	11 8d       	ldd	r17, Z+25	; 0x19
     b70:	11 11       	cpse	r17, r1
     b72:	02 c0       	rjmp	.+4      	; 0xb78 <_ZN5pulse14decodeToDitDahEv+0x90>
		{
			DitDah[j]=0;
     b74:	1c 92       	st	X, r1
			continue;
     b76:	3c c0       	rjmp	.+120    	; 0xbf0 <_ZN5pulse14decodeToDitDahEv+0x108>
		}
		else{
				if(errorCheck)
     b78:	eb 01       	movw	r28, r22
     b7a:	18 81       	ld	r17, Y
     b7c:	11 23       	and	r17, r17
     b7e:	09 f4       	brne	.+2      	; 0xb82 <_ZN5pulse14decodeToDitDahEv+0x9a>
     b80:	46 c0       	rjmp	.+140    	; 0xc0e <_ZN5pulse14decodeToDitDahEv+0x126>
				{
					if(j>0)			//if not the first pulse
     b82:	12 16       	cp	r1, r18
     b84:	13 06       	cpc	r1, r19
     b86:	34 f5       	brge	.+76     	; 0xbd4 <_ZN5pulse14decodeToDitDahEv+0xec>
					{
					unsigned long timeWidth (morsePulses[j].startTime-morsePulses[j-1].stopTime) ;		//finding time distance betn next pulse falling and previous pulse rising
     b88:	c5 84       	ldd	r12, Z+13	; 0x0d
     b8a:	d6 84       	ldd	r13, Z+14	; 0x0e
     b8c:	e7 84       	ldd	r14, Z+15	; 0x0f
     b8e:	f0 88       	ldd	r15, Z+16	; 0x10
     b90:	44 80       	ldd	r4, Z+4	; 0x04
     b92:	55 80       	ldd	r5, Z+5	; 0x05
     b94:	66 80       	ldd	r6, Z+6	; 0x06
     b96:	77 80       	ldd	r7, Z+7	; 0x07
     b98:	c4 18       	sub	r12, r4
     b9a:	d5 08       	sbc	r13, r5
     b9c:	e6 08       	sbc	r14, r6
     b9e:	f7 08       	sbc	r15, r7
					if(!((timeWidth>tDit/2) && ( timeWidth <tDah/2) ))return false;
     ba0:	ea 01       	movw	r28, r20
     ba2:	08 81       	ld	r16, Y
     ba4:	19 81       	ldd	r17, Y+1	; 0x01
     ba6:	16 95       	lsr	r17
     ba8:	07 95       	ror	r16
     baa:	28 01       	movw	r4, r16
     bac:	61 2c       	mov	r6, r1
     bae:	71 2c       	mov	r7, r1
     bb0:	4c 14       	cp	r4, r12
     bb2:	5d 04       	cpc	r5, r13
     bb4:	6e 04       	cpc	r6, r14
     bb6:	7f 04       	cpc	r7, r15
     bb8:	20 f5       	brcc	.+72     	; 0xc02 <_ZN5pulse14decodeToDitDahEv+0x11a>
     bba:	ec 01       	movw	r28, r24
     bbc:	08 81       	ld	r16, Y
     bbe:	19 81       	ldd	r17, Y+1	; 0x01
     bc0:	16 95       	lsr	r17
     bc2:	07 95       	ror	r16
     bc4:	28 01       	movw	r4, r16
     bc6:	61 2c       	mov	r6, r1
     bc8:	71 2c       	mov	r7, r1
     bca:	c4 14       	cp	r12, r4
     bcc:	d5 04       	cpc	r13, r5
     bce:	e6 04       	cpc	r14, r6
     bd0:	f7 04       	cpc	r15, r7
     bd2:	c8 f4       	brcc	.+50     	; 0xc06 <_ZN5pulse14decodeToDitDahEv+0x11e>
					}
				}
				//if( absolute(morsePulses[j].pulseWidthTime - tDah ) < tolerance )							//its a dah
				if(morsePulses[j].pulseWidthTime>=2*tDit)
     bd4:	ea 01       	movw	r28, r20
     bd6:	08 81       	ld	r16, Y
     bd8:	19 81       	ldd	r17, Y+1	; 0x01
     bda:	00 0f       	add	r16, r16
     bdc:	11 1f       	adc	r17, r17
     bde:	e4 01       	movw	r28, r8
     be0:	ef 88       	ldd	r14, Y+23	; 0x17
     be2:	f8 8c       	ldd	r15, Y+24	; 0x18
     be4:	e0 16       	cp	r14, r16
     be6:	f1 06       	cpc	r15, r17
     be8:	10 f0       	brcs	.+4      	; 0xbee <_ZN5pulse14decodeToDitDahEv+0x106>
				{
					DitDah[j]=3;
     bea:	bc 92       	st	X, r11
     bec:	01 c0       	rjmp	.+2      	; 0xbf0 <_ZN5pulse14decodeToDitDahEv+0x108>
				}
			//	else if(absolute(morsePulses[j].pulseWidthTime-tDit)<tolerance)							//its a dit
				else if (morsePulses[j].pulseWidthTime<2*tDit)
				{
					DitDah[j]=1;
     bee:	ac 92       	st	X, r10
	//find number of morse pulses
	int i=0;
	for(i=0; i<6; i++) DitDah[i] = 0;		//make  all previous data to zero
	for( i=0;morsePulses[i].ifData!=0;i++);
	int numberOfPulses=i;
	for(int j=0;j<6;j++)
     bf0:	2f 5f       	subi	r18, 0xFF	; 255
     bf2:	3f 4f       	sbci	r19, 0xFF	; 255
     bf4:	3d 96       	adiw	r30, 0x0d	; 13
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	26 30       	cpi	r18, 0x06	; 6
     bfa:	31 05       	cpc	r19, r1
     bfc:	09 f0       	breq	.+2      	; 0xc00 <_ZN5pulse14decodeToDitDahEv+0x118>
     bfe:	b6 cf       	rjmp	.-148    	; 0xb6c <_ZN5pulse14decodeToDitDahEv+0x84>
     c00:	04 c0       	rjmp	.+8      	; 0xc0a <_ZN5pulse14decodeToDitDahEv+0x122>
				if(errorCheck)
				{
					if(j>0)			//if not the first pulse
					{
					unsigned long timeWidth (morsePulses[j].startTime-morsePulses[j-1].stopTime) ;		//finding time distance betn next pulse falling and previous pulse rising
					if(!((timeWidth>tDit/2) && ( timeWidth <tDah/2) ))return false;
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	0f c0       	rjmp	.+30     	; 0xc24 <_ZN5pulse14decodeToDitDahEv+0x13c>
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	0d c0       	rjmp	.+26     	; 0xc24 <_ZN5pulse14decodeToDitDahEv+0x13c>
				}else{
					return false;
				}
			}
	}
	return true;
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	0b c0       	rjmp	.+22     	; 0xc24 <_ZN5pulse14decodeToDitDahEv+0x13c>
					unsigned long timeWidth (morsePulses[j].startTime-morsePulses[j-1].stopTime) ;		//finding time distance betn next pulse falling and previous pulse rising
					if(!((timeWidth>tDit/2) && ( timeWidth <tDah/2) ))return false;
					}
				}
				//if( absolute(morsePulses[j].pulseWidthTime - tDah ) < tolerance )							//its a dah
				if(morsePulses[j].pulseWidthTime>=2*tDit)
     c0e:	ea 01       	movw	r28, r20
     c10:	08 81       	ld	r16, Y
     c12:	19 81       	ldd	r17, Y+1	; 0x01
     c14:	00 0f       	add	r16, r16
     c16:	11 1f       	adc	r17, r17
     c18:	e7 88       	ldd	r14, Z+23	; 0x17
     c1a:	f0 8c       	ldd	r15, Z+24	; 0x18
     c1c:	e0 16       	cp	r14, r16
     c1e:	f1 06       	cpc	r15, r17
     c20:	20 f7       	brcc	.-56     	; 0xbea <_ZN5pulse14decodeToDitDahEv+0x102>
     c22:	e5 cf       	rjmp	.-54     	; 0xbee <_ZN5pulse14decodeToDitDahEv+0x106>
					return false;
				}
			}
	}
	return true;
}
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	1f 91       	pop	r17
     c2a:	0f 91       	pop	r16
     c2c:	ff 90       	pop	r15
     c2e:	ef 90       	pop	r14
     c30:	df 90       	pop	r13
     c32:	cf 90       	pop	r12
     c34:	bf 90       	pop	r11
     c36:	af 90       	pop	r10
     c38:	9f 90       	pop	r9
     c3a:	8f 90       	pop	r8
     c3c:	7f 90       	pop	r7
     c3e:	6f 90       	pop	r6
     c40:	5f 90       	pop	r5
     c42:	4f 90       	pop	r4
     c44:	08 95       	ret

00000c46 <_ZN5pulse14getDecodedDataEPc>:
/************************************************************************/
/* void pulse::getDecodedData(char *buffer)
/* input : pointer to a  buffer for storing decoded output              */
/************************************************************************/
void pulse::getDecodedData(char *buffer)
{
     c46:	dc 01       	movw	r26, r24
     c48:	a5 5a       	subi	r26, 0xA5	; 165
     c4a:	bf 4f       	sbci	r27, 0xFF	; 255
     c4c:	e6 2f       	mov	r30, r22
     c4e:	f7 2f       	mov	r31, r23
	for(int i=0;i<6;i++)buffer[i]=DitDah[i]+0x30;
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	8d 91       	ld	r24, X+
     c56:	80 5d       	subi	r24, 0xD0	; 208
     c58:	81 93       	st	Z+, r24
     c5a:	2f 5f       	subi	r18, 0xFF	; 255
     c5c:	3f 4f       	sbci	r19, 0xFF	; 255
     c5e:	26 30       	cpi	r18, 0x06	; 6
     c60:	31 05       	cpc	r19, r1
     c62:	c1 f7       	brne	.-16     	; 0xc54 <_ZN5pulse14getDecodedDataEPc+0xe>
}
     c64:	08 95       	ret

00000c66 <main>:
#include "lcd.h"
#include "uart0.h"
#include "Processor.h"
#include "morsebuzzer.h"
int main(void)
{
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	cc 5a       	subi	r28, 0xAC	; 172
     c70:	d1 09       	sbc	r29, r1
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
	LCD lcd;
     c7c:	ce 01       	movw	r24, r28
     c7e:	8d 58       	subi	r24, 0x8D	; 141
     c80:	9f 4f       	sbci	r25, 0xFF	; 255
     c82:	29 db       	rcall	.-2478   	; 0x2d6 <_ZN3LCDC1Ev>
	pulse code;
     c84:	ce 01       	movw	r24, r28
     c86:	01 96       	adiw	r24, 0x01	; 1
     c88:	de dd       	rcall	.-1092   	; 0x846 <_ZN5pulseC1Ev>
	uart0 serial(57600);
     c8a:	40 e0       	ldi	r20, 0x00	; 0
     c8c:	51 ee       	ldi	r21, 0xE1	; 225
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	ce 01       	movw	r24, r28
     c94:	8a 55       	subi	r24, 0x5A	; 90
     c96:	9f 4f       	sbci	r25, 0xFF	; 255
     c98:	0e d1       	rcall	.+540    	; 0xeb6 <_ZN5uart0C1Em>
	Processor motor;
     c9a:	ce 01       	movw	r24, r28
     c9c:	84 55       	subi	r24, 0x54	; 84
     c9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ca0:	d0 dd       	rcall	.-1120   	; 0x842 <_ZN9ProcessorC1Ev>
	morsebuzzer buzz;
     ca2:	68 e2       	ldi	r22, 0x28	; 40
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	ce 01       	movw	r24, r28
     ca8:	86 55       	subi	r24, 0x56	; 86
     caa:	9f 4f       	sbci	r25, 0xFF	; 255
     cac:	7f db       	rcall	.-2306   	; 0x3ac <_ZN11morsebuzzerC1Ei>
	buzz.morseTransmit('f');
     cae:	66 e6       	ldi	r22, 0x66	; 102
     cb0:	ce 01       	movw	r24, r28
     cb2:	86 55       	subi	r24, 0x56	; 86
     cb4:	9f 4f       	sbci	r25, 0xFF	; 255
     cb6:	dc db       	rcall	.-2120   	; 0x470 <_ZN11morsebuzzer13morseTransmitEc>
	lcd.print(":)");
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	72 e0       	ldi	r23, 0x02	; 2
     cbc:	ce 01       	movw	r24, r28
     cbe:	8d 58       	subi	r24, 0x8D	; 141
     cc0:	9f 4f       	sbci	r25, 0xFF	; 255
     cc2:	3c db       	rcall	.-2440   	; 0x33c <_ZN3LCD5printEPc>
	serial.printStr("Initialised\r\n");
     cc4:	63 e0       	ldi	r22, 0x03	; 3
     cc6:	72 e0       	ldi	r23, 0x02	; 2
     cc8:	ce 01       	movw	r24, r28
     cca:	8a 55       	subi	r24, 0x5A	; 90
     ccc:	9f 4f       	sbci	r25, 0xFF	; 255
     cce:	22 d1       	rcall	.+580    	; 0xf14 <_ZN5uart08printStrEPKc>
	systime::sysTimeInit();
     cd0:	ba d0       	rcall	.+372    	; 0xe46 <_ZN7systime11sysTimeInitEv>
	char data[7]="";	
     cd2:	c1 56       	subi	r28, 0x61	; 97
     cd4:	df 4f       	sbci	r29, 0xFF	; 255
     cd6:	18 82       	st	Y, r1
     cd8:	19 82       	std	Y+1, r1	; 0x01
     cda:	1a 82       	std	Y+2, r1	; 0x02
     cdc:	1b 82       	std	Y+3, r1	; 0x03
     cde:	cf 59       	subi	r28, 0x9F	; 159
     ce0:	d0 40       	sbci	r29, 0x00	; 0
     ce2:	cd 55       	subi	r28, 0x5D	; 93
     ce4:	df 4f       	sbci	r29, 0xFF	; 255
     ce6:	18 82       	st	Y, r1
     ce8:	19 82       	std	Y+1, r1	; 0x01
     cea:	1a 82       	std	Y+2, r1	; 0x02
     cec:	c3 5a       	subi	r28, 0xA3	; 163
     cee:	d0 40       	sbci	r29, 0x00	; 0
	char buffer [20];
	motor.process('f');	//just to check
     cf0:	66 e6       	ldi	r22, 0x66	; 102
     cf2:	ce 01       	movw	r24, r28
     cf4:	84 55       	subi	r24, 0x54	; 84
     cf6:	9f 4f       	sbci	r25, 0xFF	; 255
     cf8:	95 dd       	rcall	.-1238   	; 0x824 <_ZN9Processor7processEc>
		 if(data[1]=='0')isValid=0;		//avoiding one units of transmit
		 if(isValid>0)
		 {
		 lcd.cursor(2,10);
		 lcd.print("Ok");
		 sprintf(buffer,"T:%lu",systime::getSysTime());
     cfa:	0f 2e       	mov	r0, r31
     cfc:	f4 e1       	ldi	r31, 0x14	; 20
     cfe:	ef 2e       	mov	r14, r31
     d00:	f2 e0       	ldi	r31, 0x02	; 2
     d02:	ff 2e       	mov	r15, r31
     d04:	f0 2d       	mov	r31, r0
     d06:	8e 01       	movw	r16, r28
     d08:	05 57       	subi	r16, 0x75	; 117
     d0a:	1f 4f       	sbci	r17, 0xFF	; 255
	char buffer [20];
	motor.process('f');	//just to check
    while(1)
    {
		char  isValid;
         if(code.receiveCode()>0)
     d0c:	ce 01       	movw	r24, r28
     d0e:	01 96       	adiw	r24, 0x01	; 1
     d10:	8c de       	rcall	.-744    	; 0xa2a <_ZN5pulse11receiveCodeEv>
		 else 
		 {
			 isValid=0;
		 }
		 
		  isValid=code.decodeToDitDah();
     d12:	ce 01       	movw	r24, r28
     d14:	01 96       	adiw	r24, 0x01	; 1
     d16:	e8 de       	rcall	.-560    	; 0xae8 <_ZN5pulse14decodeToDitDahEv>
     d18:	d8 2e       	mov	r13, r24
		 code.getDecodedData(data);
     d1a:	be 01       	movw	r22, r28
     d1c:	61 56       	subi	r22, 0x61	; 97
     d1e:	7f 4f       	sbci	r23, 0xFF	; 255
     d20:	ce 01       	movw	r24, r28
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	90 df       	rcall	.-224    	; 0xc46 <_ZN5pulse14getDecodedDataEPc>
		 if(data[1]=='0')isValid=0;		//avoiding one units of transmit
     d26:	c0 56       	subi	r28, 0x60	; 96
     d28:	df 4f       	sbci	r29, 0xFF	; 255
     d2a:	98 81       	ld	r25, Y
     d2c:	c0 5a       	subi	r28, 0xA0	; 160
     d2e:	d0 40       	sbci	r29, 0x00	; 0
     d30:	90 33       	cpi	r25, 0x30	; 48
     d32:	09 f4       	brne	.+2      	; 0xd36 <main+0xd0>
     d34:	56 c0       	rjmp	.+172    	; 0xde2 <main+0x17c>
		 if(isValid>0)
     d36:	dd 20       	and	r13, r13
     d38:	09 f4       	brne	.+2      	; 0xd3c <main+0xd6>
     d3a:	53 c0       	rjmp	.+166    	; 0xde2 <main+0x17c>
		 {
		 lcd.cursor(2,10);
     d3c:	4a e0       	ldi	r20, 0x0A	; 10
     d3e:	62 e0       	ldi	r22, 0x02	; 2
     d40:	ce 01       	movw	r24, r28
     d42:	8d 58       	subi	r24, 0x8D	; 141
     d44:	9f 4f       	sbci	r25, 0xFF	; 255
     d46:	0e db       	rcall	.-2532   	; 0x364 <_ZN3LCD6cursorEcc>
		 lcd.print("Ok");
     d48:	61 e1       	ldi	r22, 0x11	; 17
     d4a:	72 e0       	ldi	r23, 0x02	; 2
     d4c:	ce 01       	movw	r24, r28
     d4e:	8d 58       	subi	r24, 0x8D	; 141
     d50:	9f 4f       	sbci	r25, 0xFF	; 255
     d52:	f4 da       	rcall	.-2584   	; 0x33c <_ZN3LCD5printEPc>
		 sprintf(buffer,"T:%lu",systime::getSysTime());
     d54:	a7 d0       	rcall	.+334    	; 0xea4 <_ZN7systime10getSysTimeEv>
     d56:	9f 93       	push	r25
     d58:	8f 93       	push	r24
     d5a:	7f 93       	push	r23
     d5c:	6f 93       	push	r22
     d5e:	ff 92       	push	r15
     d60:	ef 92       	push	r14
     d62:	1f 93       	push	r17
     d64:	0f 93       	push	r16
     d66:	37 d2       	rcall	.+1134   	; 0x11d6 <sprintf>
		 data[6]=0;
     d68:	cb 55       	subi	r28, 0x5B	; 91
     d6a:	df 4f       	sbci	r29, 0xFF	; 255
     d6c:	18 82       	st	Y, r1
     d6e:	c5 5a       	subi	r28, 0xA5	; 165
     d70:	d0 40       	sbci	r29, 0x00	; 0
		 serial.printStr(data);
     d72:	be 01       	movw	r22, r28
     d74:	61 56       	subi	r22, 0x61	; 97
     d76:	7f 4f       	sbci	r23, 0xFF	; 255
     d78:	ce 01       	movw	r24, r28
     d7a:	8a 55       	subi	r24, 0x5A	; 90
     d7c:	9f 4f       	sbci	r25, 0xFF	; 255
     d7e:	ca d0       	rcall	.+404    	; 0xf14 <_ZN5uart08printStrEPKc>
		 serial.printStr("\t");
     d80:	6a e1       	ldi	r22, 0x1A	; 26
     d82:	72 e0       	ldi	r23, 0x02	; 2
     d84:	ce 01       	movw	r24, r28
     d86:	8a 55       	subi	r24, 0x5A	; 90
     d88:	9f 4f       	sbci	r25, 0xFF	; 255
     d8a:	c4 d0       	rcall	.+392    	; 0xf14 <_ZN5uart08printStrEPKc>
		 serial.printStr(buffer);
     d8c:	b8 01       	movw	r22, r16
     d8e:	ce 01       	movw	r24, r28
     d90:	8a 55       	subi	r24, 0x5A	; 90
     d92:	9f 4f       	sbci	r25, 0xFF	; 255
     d94:	bf d0       	rcall	.+382    	; 0xf14 <_ZN5uart08printStrEPKc>
		 serial.write(0x0d);
     d96:	6d e0       	ldi	r22, 0x0D	; 13
     d98:	ce 01       	movw	r24, r28
     d9a:	8a 55       	subi	r24, 0x5A	; 90
     d9c:	9f 4f       	sbci	r25, 0xFF	; 255
     d9e:	b2 d0       	rcall	.+356    	; 0xf04 <_ZN5uart05writeEh>
		 serial.write(0x0a);
     da0:	6a e0       	ldi	r22, 0x0A	; 10
     da2:	ce 01       	movw	r24, r28
     da4:	8a 55       	subi	r24, 0x5A	; 90
     da6:	9f 4f       	sbci	r25, 0xFF	; 255
     da8:	ad d0       	rcall	.+346    	; 0xf04 <_ZN5uart05writeEh>
		 lcd.home();
     daa:	ce 01       	movw	r24, r28
     dac:	8d 58       	subi	r24, 0x8D	; 141
     dae:	9f 4f       	sbci	r25, 0xFF	; 255
     db0:	c2 da       	rcall	.-2684   	; 0x336 <_ZN3LCD4homeEv>
		 lcd.print(data);
     db2:	be 01       	movw	r22, r28
     db4:	61 56       	subi	r22, 0x61	; 97
     db6:	7f 4f       	sbci	r23, 0xFF	; 255
     db8:	ce 01       	movw	r24, r28
     dba:	8d 58       	subi	r24, 0x8D	; 141
     dbc:	9f 4f       	sbci	r25, 0xFF	; 255
     dbe:	be da       	rcall	.-2692   	; 0x33c <_ZN3LCD5printEPc>
		 lcd.cursor(2,1);
     dc0:	41 e0       	ldi	r20, 0x01	; 1
     dc2:	62 e0       	ldi	r22, 0x02	; 2
     dc4:	ce 01       	movw	r24, r28
     dc6:	8d 58       	subi	r24, 0x8D	; 141
     dc8:	9f 4f       	sbci	r25, 0xFF	; 255
     dca:	cc da       	rcall	.-2664   	; 0x364 <_ZN3LCD6cursorEcc>
		 lcd.print(buffer);
     dcc:	b8 01       	movw	r22, r16
     dce:	ce 01       	movw	r24, r28
     dd0:	8d 58       	subi	r24, 0x8D	; 141
     dd2:	9f 4f       	sbci	r25, 0xFF	; 255
     dd4:	b3 da       	rcall	.-2714   	; 0x33c <_ZN3LCD5printEPc>
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	f8 94       	cli
     dda:	de bf       	out	0x3e, r29	; 62
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	cd bf       	out	0x3d, r28	; 61
     de0:	95 cf       	rjmp	.-214    	; 0xd0c <main+0xa6>
		 }else{
			  lcd.cursor(2,10);
     de2:	4a e0       	ldi	r20, 0x0A	; 10
     de4:	62 e0       	ldi	r22, 0x02	; 2
     de6:	ce 01       	movw	r24, r28
     de8:	8d 58       	subi	r24, 0x8D	; 141
     dea:	9f 4f       	sbci	r25, 0xFF	; 255
     dec:	bb da       	rcall	.-2698   	; 0x364 <_ZN3LCD6cursorEcc>
			  lcd.print("Er");
     dee:	6c e1       	ldi	r22, 0x1C	; 28
     df0:	72 e0       	ldi	r23, 0x02	; 2
     df2:	ce 01       	movw	r24, r28
     df4:	8d 58       	subi	r24, 0x8D	; 141
     df6:	9f 4f       	sbci	r25, 0xFF	; 255
     df8:	a1 da       	rcall	.-2750   	; 0x33c <_ZN3LCD5printEPc>
     dfa:	88 cf       	rjmp	.-240    	; 0xd0c <main+0xa6>

00000dfc <__vector_35>:
//OUTPUT	: number of timer3 overflows

unsigned long getOverflows()		
{
	return overflows;	
}
     dfc:	1f 92       	push	r1
     dfe:	0f 92       	push	r0
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	0f 92       	push	r0
     e04:	11 24       	eor	r1, r1
     e06:	8f 93       	push	r24
     e08:	9f 93       	push	r25
     e0a:	af 93       	push	r26
     e0c:	bf 93       	push	r27
     e0e:	80 91 20 02 	lds	r24, 0x0220
     e12:	90 91 21 02 	lds	r25, 0x0221
     e16:	a0 91 22 02 	lds	r26, 0x0222
     e1a:	b0 91 23 02 	lds	r27, 0x0223
     e1e:	01 96       	adiw	r24, 0x01	; 1
     e20:	a1 1d       	adc	r26, r1
     e22:	b1 1d       	adc	r27, r1
     e24:	80 93 20 02 	sts	0x0220, r24
     e28:	90 93 21 02 	sts	0x0221, r25
     e2c:	a0 93 22 02 	sts	0x0222, r26
     e30:	b0 93 23 02 	sts	0x0223, r27
     e34:	bf 91       	pop	r27
     e36:	af 91       	pop	r26
     e38:	9f 91       	pop	r25
     e3a:	8f 91       	pop	r24
     e3c:	0f 90       	pop	r0
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	0f 90       	pop	r0
     e42:	1f 90       	pop	r1
     e44:	18 95       	reti

00000e46 <_ZN7systime11sysTimeInitEv>:
//OUTPUT	: NONE
//	Initialises the Timer3 with prescaler of 1024 sync to system clock
void sysTimeInit()
{
	
	cli();							//disable interrupts
     e46:	f8 94       	cli
	TCCR3A=0;
     e48:	10 92 90 00 	sts	0x0090, r1
	TCCR3B=(1<<CS32)|(1<<CS30);		//use prescaler of 1024
     e4c:	85 e0       	ldi	r24, 0x05	; 5
     e4e:	80 93 91 00 	sts	0x0091, r24
									//counting clock is now F_OSC/1024
									//corresponding to 69.44 uS on 14.7456 MHz
	TCCR3C=0;
     e52:	10 92 92 00 	sts	0x0092, r1
	TIMSK3=1<<TOIE3;				// Enable timer overflow interrupt
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	80 93 71 00 	sts	0x0071, r24
	overflows=0;
     e5c:	10 92 20 02 	sts	0x0220, r1
     e60:	10 92 21 02 	sts	0x0221, r1
     e64:	10 92 22 02 	sts	0x0222, r1
     e68:	10 92 23 02 	sts	0x0223, r1
	TCNT3=0;						//clear timer3 counter value
     e6c:	10 92 95 00 	sts	0x0095, r1
     e70:	10 92 94 00 	sts	0x0094, r1
	sei();							//Enable interrupts	
     e74:	78 94       	sei
     e76:	08 95       	ret

00000e78 <_ZN7systime13getSysTimeRawEv>:
//FUNCTION  : getSysTimeRaw()
//INPUT		: NONE
//OUTPUT	: returns time ticks (raw counter values with overflows) after initialisation of sysTime
unsigned long  getSysTimeRaw()			//returns the raw countervalue
{
	unsigned long temptime=TCNT3;					//get counter value at this state
     e78:	20 91 94 00 	lds	r18, 0x0094
     e7c:	30 91 95 00 	lds	r19, 0x0095
	return overflows*65536+temptime;				
     e80:	80 91 20 02 	lds	r24, 0x0220
     e84:	90 91 21 02 	lds	r25, 0x0221
     e88:	a0 91 22 02 	lds	r26, 0x0222
     e8c:	b0 91 23 02 	lds	r27, 0x0223
     e90:	dc 01       	movw	r26, r24
     e92:	99 27       	eor	r25, r25
     e94:	88 27       	eor	r24, r24
     e96:	bc 01       	movw	r22, r24
     e98:	cd 01       	movw	r24, r26
     e9a:	62 0f       	add	r22, r18
     e9c:	73 1f       	adc	r23, r19
     e9e:	81 1d       	adc	r24, r1
     ea0:	91 1d       	adc	r25, r1
}
     ea2:	08 95       	ret

00000ea4 <_ZN7systime10getSysTimeEv>:
//FUNCTION  : getSysTime()
//INPUT		: NONE
//OUTPUT	: returns time in milli Seconds after initialisatin of sysTime
unsigned long getSysTime()		
{
	return (unsigned long)(getSysTimeRaw()*0.06944);
     ea4:	e9 df       	rcall	.-46     	; 0xe78 <_ZN7systime13getSysTimeRawEv>
     ea6:	76 d0       	rcall	.+236    	; 0xf94 <__floatunsisf>
     ea8:	2f e8       	ldi	r18, 0x8F	; 143
     eaa:	36 e3       	ldi	r19, 0x36	; 54
     eac:	4e e8       	ldi	r20, 0x8E	; 142
     eae:	5d e3       	ldi	r21, 0x3D	; 61
     eb0:	d7 d0       	rcall	.+430    	; 0x1060 <__mulsf3>
     eb2:	44 c0       	rjmp	.+136    	; 0xf3c <__fixunssfsi>
}
     eb4:	08 95       	ret

00000eb6 <_ZN5uart0C1Em>:

unsigned char uart0::read(void)
{
	while(!(UCSR0A & (1<<RXC0)));		//wait for data to be received
	return UDR0;
}
     eb6:	cf 92       	push	r12
     eb8:	df 92       	push	r13
     eba:	ef 92       	push	r14
     ebc:	ff 92       	push	r15
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	ec 01       	movw	r28, r24
     ec4:	6a 01       	movw	r12, r20
     ec6:	7b 01       	movw	r14, r22
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	70 e1       	ldi	r23, 0x10	; 16
     ecc:	8e e0       	ldi	r24, 0x0E	; 14
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	a7 01       	movw	r20, r14
     ed2:	96 01       	movw	r18, r12
     ed4:	50 d1       	rcall	.+672    	; 0x1176 <__udivmodsi4>
     ed6:	21 50       	subi	r18, 0x01	; 1
     ed8:	31 09       	sbc	r19, r1
     eda:	30 93 c5 00 	sts	0x00C5, r19
     ede:	20 93 c4 00 	sts	0x00C4, r18
     ee2:	88 e1       	ldi	r24, 0x18	; 24
     ee4:	80 93 c1 00 	sts	0x00C1, r24
     ee8:	86 e0       	ldi	r24, 0x06	; 6
     eea:	80 93 c2 00 	sts	0x00C2, r24
     eee:	c8 82       	st	Y, r12
     ef0:	d9 82       	std	Y+1, r13	; 0x01
     ef2:	ea 82       	std	Y+2, r14	; 0x02
     ef4:	fb 82       	std	Y+3, r15	; 0x03
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	ff 90       	pop	r15
     efc:	ef 90       	pop	r14
     efe:	df 90       	pop	r13
     f00:	cf 90       	pop	r12
     f02:	08 95       	ret

00000f04 <_ZN5uart05writeEh>:
     f04:	e0 ec       	ldi	r30, 0xC0	; 192
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	85 ff       	sbrs	r24, 5
     f0c:	fd cf       	rjmp	.-6      	; 0xf08 <_ZN5uart05writeEh+0x4>
     f0e:	60 93 c6 00 	sts	0x00C6, r22
     f12:	08 95       	ret

00000f14 <_ZN5uart08printStrEPKc>:

void uart0::printStr(const char * str)
{
     f14:	0f 93       	push	r16
     f16:	1f 93       	push	r17
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	8c 01       	movw	r16, r24
     f1e:	eb 01       	movw	r28, r22
	while(*str)
     f20:	68 81       	ld	r22, Y
     f22:	66 23       	and	r22, r22
     f24:	31 f0       	breq	.+12     	; 0xf32 <_ZN5uart08printStrEPKc+0x1e>
     f26:	21 96       	adiw	r28, 0x01	; 1
	{
		write(*str++);
     f28:	c8 01       	movw	r24, r16
     f2a:	ec df       	rcall	.-40     	; 0xf04 <_ZN5uart05writeEh>
	return UDR0;
}

void uart0::printStr(const char * str)
{
	while(*str)
     f2c:	69 91       	ld	r22, Y+
     f2e:	61 11       	cpse	r22, r1
     f30:	fb cf       	rjmp	.-10     	; 0xf28 <_ZN5uart08printStrEPKc+0x14>
	{
		write(*str++);
	}
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	08 95       	ret

00000f3c <__fixunssfsi>:
     f3c:	70 d0       	rcall	.+224    	; 0x101e <__fp_splitA>
     f3e:	88 f0       	brcs	.+34     	; 0xf62 <__fixunssfsi+0x26>
     f40:	9f 57       	subi	r25, 0x7F	; 127
     f42:	90 f0       	brcs	.+36     	; 0xf68 <__fixunssfsi+0x2c>
     f44:	b9 2f       	mov	r27, r25
     f46:	99 27       	eor	r25, r25
     f48:	b7 51       	subi	r27, 0x17	; 23
     f4a:	a0 f0       	brcs	.+40     	; 0xf74 <__fixunssfsi+0x38>
     f4c:	d1 f0       	breq	.+52     	; 0xf82 <__fixunssfsi+0x46>
     f4e:	66 0f       	add	r22, r22
     f50:	77 1f       	adc	r23, r23
     f52:	88 1f       	adc	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	1a f0       	brmi	.+6      	; 0xf5e <__fixunssfsi+0x22>
     f58:	ba 95       	dec	r27
     f5a:	c9 f7       	brne	.-14     	; 0xf4e <__fixunssfsi+0x12>
     f5c:	12 c0       	rjmp	.+36     	; 0xf82 <__fixunssfsi+0x46>
     f5e:	b1 30       	cpi	r27, 0x01	; 1
     f60:	81 f0       	breq	.+32     	; 0xf82 <__fixunssfsi+0x46>
     f62:	77 d0       	rcall	.+238    	; 0x1052 <__fp_zero>
     f64:	b1 e0       	ldi	r27, 0x01	; 1
     f66:	08 95       	ret
     f68:	74 c0       	rjmp	.+232    	; 0x1052 <__fp_zero>
     f6a:	67 2f       	mov	r22, r23
     f6c:	78 2f       	mov	r23, r24
     f6e:	88 27       	eor	r24, r24
     f70:	b8 5f       	subi	r27, 0xF8	; 248
     f72:	39 f0       	breq	.+14     	; 0xf82 <__fixunssfsi+0x46>
     f74:	b9 3f       	cpi	r27, 0xF9	; 249
     f76:	cc f3       	brlt	.-14     	; 0xf6a <__fixunssfsi+0x2e>
     f78:	86 95       	lsr	r24
     f7a:	77 95       	ror	r23
     f7c:	67 95       	ror	r22
     f7e:	b3 95       	inc	r27
     f80:	d9 f7       	brne	.-10     	; 0xf78 <__fixunssfsi+0x3c>
     f82:	3e f4       	brtc	.+14     	; 0xf92 <__fixunssfsi+0x56>
     f84:	90 95       	com	r25
     f86:	80 95       	com	r24
     f88:	70 95       	com	r23
     f8a:	61 95       	neg	r22
     f8c:	7f 4f       	sbci	r23, 0xFF	; 255
     f8e:	8f 4f       	sbci	r24, 0xFF	; 255
     f90:	9f 4f       	sbci	r25, 0xFF	; 255
     f92:	08 95       	ret

00000f94 <__floatunsisf>:
     f94:	e8 94       	clt
     f96:	09 c0       	rjmp	.+18     	; 0xfaa <__floatsisf+0x12>

00000f98 <__floatsisf>:
     f98:	97 fb       	bst	r25, 7
     f9a:	3e f4       	brtc	.+14     	; 0xfaa <__floatsisf+0x12>
     f9c:	90 95       	com	r25
     f9e:	80 95       	com	r24
     fa0:	70 95       	com	r23
     fa2:	61 95       	neg	r22
     fa4:	7f 4f       	sbci	r23, 0xFF	; 255
     fa6:	8f 4f       	sbci	r24, 0xFF	; 255
     fa8:	9f 4f       	sbci	r25, 0xFF	; 255
     faa:	99 23       	and	r25, r25
     fac:	a9 f0       	breq	.+42     	; 0xfd8 <__floatsisf+0x40>
     fae:	f9 2f       	mov	r31, r25
     fb0:	96 e9       	ldi	r25, 0x96	; 150
     fb2:	bb 27       	eor	r27, r27
     fb4:	93 95       	inc	r25
     fb6:	f6 95       	lsr	r31
     fb8:	87 95       	ror	r24
     fba:	77 95       	ror	r23
     fbc:	67 95       	ror	r22
     fbe:	b7 95       	ror	r27
     fc0:	f1 11       	cpse	r31, r1
     fc2:	f8 cf       	rjmp	.-16     	; 0xfb4 <__floatsisf+0x1c>
     fc4:	fa f4       	brpl	.+62     	; 0x1004 <__floatsisf+0x6c>
     fc6:	bb 0f       	add	r27, r27
     fc8:	11 f4       	brne	.+4      	; 0xfce <__floatsisf+0x36>
     fca:	60 ff       	sbrs	r22, 0
     fcc:	1b c0       	rjmp	.+54     	; 0x1004 <__floatsisf+0x6c>
     fce:	6f 5f       	subi	r22, 0xFF	; 255
     fd0:	7f 4f       	sbci	r23, 0xFF	; 255
     fd2:	8f 4f       	sbci	r24, 0xFF	; 255
     fd4:	9f 4f       	sbci	r25, 0xFF	; 255
     fd6:	16 c0       	rjmp	.+44     	; 0x1004 <__floatsisf+0x6c>
     fd8:	88 23       	and	r24, r24
     fda:	11 f0       	breq	.+4      	; 0xfe0 <__floatsisf+0x48>
     fdc:	96 e9       	ldi	r25, 0x96	; 150
     fde:	11 c0       	rjmp	.+34     	; 0x1002 <__floatsisf+0x6a>
     fe0:	77 23       	and	r23, r23
     fe2:	21 f0       	breq	.+8      	; 0xfec <__floatsisf+0x54>
     fe4:	9e e8       	ldi	r25, 0x8E	; 142
     fe6:	87 2f       	mov	r24, r23
     fe8:	76 2f       	mov	r23, r22
     fea:	05 c0       	rjmp	.+10     	; 0xff6 <__floatsisf+0x5e>
     fec:	66 23       	and	r22, r22
     fee:	71 f0       	breq	.+28     	; 0x100c <__floatsisf+0x74>
     ff0:	96 e8       	ldi	r25, 0x86	; 134
     ff2:	86 2f       	mov	r24, r22
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	2a f0       	brmi	.+10     	; 0x1004 <__floatsisf+0x6c>
     ffa:	9a 95       	dec	r25
     ffc:	66 0f       	add	r22, r22
     ffe:	77 1f       	adc	r23, r23
    1000:	88 1f       	adc	r24, r24
    1002:	da f7       	brpl	.-10     	; 0xffa <__floatsisf+0x62>
    1004:	88 0f       	add	r24, r24
    1006:	96 95       	lsr	r25
    1008:	87 95       	ror	r24
    100a:	97 f9       	bld	r25, 7
    100c:	08 95       	ret

0000100e <__fp_split3>:
    100e:	57 fd       	sbrc	r21, 7
    1010:	90 58       	subi	r25, 0x80	; 128
    1012:	44 0f       	add	r20, r20
    1014:	55 1f       	adc	r21, r21
    1016:	59 f0       	breq	.+22     	; 0x102e <__fp_splitA+0x10>
    1018:	5f 3f       	cpi	r21, 0xFF	; 255
    101a:	71 f0       	breq	.+28     	; 0x1038 <__fp_splitA+0x1a>
    101c:	47 95       	ror	r20

0000101e <__fp_splitA>:
    101e:	88 0f       	add	r24, r24
    1020:	97 fb       	bst	r25, 7
    1022:	99 1f       	adc	r25, r25
    1024:	61 f0       	breq	.+24     	; 0x103e <__fp_splitA+0x20>
    1026:	9f 3f       	cpi	r25, 0xFF	; 255
    1028:	79 f0       	breq	.+30     	; 0x1048 <__fp_splitA+0x2a>
    102a:	87 95       	ror	r24
    102c:	08 95       	ret
    102e:	12 16       	cp	r1, r18
    1030:	13 06       	cpc	r1, r19
    1032:	14 06       	cpc	r1, r20
    1034:	55 1f       	adc	r21, r21
    1036:	f2 cf       	rjmp	.-28     	; 0x101c <__fp_split3+0xe>
    1038:	46 95       	lsr	r20
    103a:	f1 df       	rcall	.-30     	; 0x101e <__fp_splitA>
    103c:	08 c0       	rjmp	.+16     	; 0x104e <__fp_splitA+0x30>
    103e:	16 16       	cp	r1, r22
    1040:	17 06       	cpc	r1, r23
    1042:	18 06       	cpc	r1, r24
    1044:	99 1f       	adc	r25, r25
    1046:	f1 cf       	rjmp	.-30     	; 0x102a <__fp_splitA+0xc>
    1048:	86 95       	lsr	r24
    104a:	71 05       	cpc	r23, r1
    104c:	61 05       	cpc	r22, r1
    104e:	08 94       	sec
    1050:	08 95       	ret

00001052 <__fp_zero>:
    1052:	e8 94       	clt

00001054 <__fp_szero>:
    1054:	bb 27       	eor	r27, r27
    1056:	66 27       	eor	r22, r22
    1058:	77 27       	eor	r23, r23
    105a:	cb 01       	movw	r24, r22
    105c:	97 f9       	bld	r25, 7
    105e:	08 95       	ret

00001060 <__mulsf3>:
    1060:	0b d0       	rcall	.+22     	; 0x1078 <__mulsf3x>
    1062:	78 c0       	rjmp	.+240    	; 0x1154 <__fp_round>
    1064:	69 d0       	rcall	.+210    	; 0x1138 <__fp_pscA>
    1066:	28 f0       	brcs	.+10     	; 0x1072 <__mulsf3+0x12>
    1068:	6e d0       	rcall	.+220    	; 0x1146 <__fp_pscB>
    106a:	18 f0       	brcs	.+6      	; 0x1072 <__mulsf3+0x12>
    106c:	95 23       	and	r25, r21
    106e:	09 f0       	breq	.+2      	; 0x1072 <__mulsf3+0x12>
    1070:	5a c0       	rjmp	.+180    	; 0x1126 <__fp_inf>
    1072:	5f c0       	rjmp	.+190    	; 0x1132 <__fp_nan>
    1074:	11 24       	eor	r1, r1
    1076:	ee cf       	rjmp	.-36     	; 0x1054 <__fp_szero>

00001078 <__mulsf3x>:
    1078:	ca df       	rcall	.-108    	; 0x100e <__fp_split3>
    107a:	a0 f3       	brcs	.-24     	; 0x1064 <__mulsf3+0x4>

0000107c <__mulsf3_pse>:
    107c:	95 9f       	mul	r25, r21
    107e:	d1 f3       	breq	.-12     	; 0x1074 <__mulsf3+0x14>
    1080:	95 0f       	add	r25, r21
    1082:	50 e0       	ldi	r21, 0x00	; 0
    1084:	55 1f       	adc	r21, r21
    1086:	62 9f       	mul	r22, r18
    1088:	f0 01       	movw	r30, r0
    108a:	72 9f       	mul	r23, r18
    108c:	bb 27       	eor	r27, r27
    108e:	f0 0d       	add	r31, r0
    1090:	b1 1d       	adc	r27, r1
    1092:	63 9f       	mul	r22, r19
    1094:	aa 27       	eor	r26, r26
    1096:	f0 0d       	add	r31, r0
    1098:	b1 1d       	adc	r27, r1
    109a:	aa 1f       	adc	r26, r26
    109c:	64 9f       	mul	r22, r20
    109e:	66 27       	eor	r22, r22
    10a0:	b0 0d       	add	r27, r0
    10a2:	a1 1d       	adc	r26, r1
    10a4:	66 1f       	adc	r22, r22
    10a6:	82 9f       	mul	r24, r18
    10a8:	22 27       	eor	r18, r18
    10aa:	b0 0d       	add	r27, r0
    10ac:	a1 1d       	adc	r26, r1
    10ae:	62 1f       	adc	r22, r18
    10b0:	73 9f       	mul	r23, r19
    10b2:	b0 0d       	add	r27, r0
    10b4:	a1 1d       	adc	r26, r1
    10b6:	62 1f       	adc	r22, r18
    10b8:	83 9f       	mul	r24, r19
    10ba:	a0 0d       	add	r26, r0
    10bc:	61 1d       	adc	r22, r1
    10be:	22 1f       	adc	r18, r18
    10c0:	74 9f       	mul	r23, r20
    10c2:	33 27       	eor	r19, r19
    10c4:	a0 0d       	add	r26, r0
    10c6:	61 1d       	adc	r22, r1
    10c8:	23 1f       	adc	r18, r19
    10ca:	84 9f       	mul	r24, r20
    10cc:	60 0d       	add	r22, r0
    10ce:	21 1d       	adc	r18, r1
    10d0:	82 2f       	mov	r24, r18
    10d2:	76 2f       	mov	r23, r22
    10d4:	6a 2f       	mov	r22, r26
    10d6:	11 24       	eor	r1, r1
    10d8:	9f 57       	subi	r25, 0x7F	; 127
    10da:	50 40       	sbci	r21, 0x00	; 0
    10dc:	8a f0       	brmi	.+34     	; 0x1100 <__mulsf3_pse+0x84>
    10de:	e1 f0       	breq	.+56     	; 0x1118 <__mulsf3_pse+0x9c>
    10e0:	88 23       	and	r24, r24
    10e2:	4a f0       	brmi	.+18     	; 0x10f6 <__mulsf3_pse+0x7a>
    10e4:	ee 0f       	add	r30, r30
    10e6:	ff 1f       	adc	r31, r31
    10e8:	bb 1f       	adc	r27, r27
    10ea:	66 1f       	adc	r22, r22
    10ec:	77 1f       	adc	r23, r23
    10ee:	88 1f       	adc	r24, r24
    10f0:	91 50       	subi	r25, 0x01	; 1
    10f2:	50 40       	sbci	r21, 0x00	; 0
    10f4:	a9 f7       	brne	.-22     	; 0x10e0 <__mulsf3_pse+0x64>
    10f6:	9e 3f       	cpi	r25, 0xFE	; 254
    10f8:	51 05       	cpc	r21, r1
    10fa:	70 f0       	brcs	.+28     	; 0x1118 <__mulsf3_pse+0x9c>
    10fc:	14 c0       	rjmp	.+40     	; 0x1126 <__fp_inf>
    10fe:	aa cf       	rjmp	.-172    	; 0x1054 <__fp_szero>
    1100:	5f 3f       	cpi	r21, 0xFF	; 255
    1102:	ec f3       	brlt	.-6      	; 0x10fe <__mulsf3_pse+0x82>
    1104:	98 3e       	cpi	r25, 0xE8	; 232
    1106:	dc f3       	brlt	.-10     	; 0x10fe <__mulsf3_pse+0x82>
    1108:	86 95       	lsr	r24
    110a:	77 95       	ror	r23
    110c:	67 95       	ror	r22
    110e:	b7 95       	ror	r27
    1110:	f7 95       	ror	r31
    1112:	e7 95       	ror	r30
    1114:	9f 5f       	subi	r25, 0xFF	; 255
    1116:	c1 f7       	brne	.-16     	; 0x1108 <__mulsf3_pse+0x8c>
    1118:	fe 2b       	or	r31, r30
    111a:	88 0f       	add	r24, r24
    111c:	91 1d       	adc	r25, r1
    111e:	96 95       	lsr	r25
    1120:	87 95       	ror	r24
    1122:	97 f9       	bld	r25, 7
    1124:	08 95       	ret

00001126 <__fp_inf>:
    1126:	97 f9       	bld	r25, 7
    1128:	9f 67       	ori	r25, 0x7F	; 127
    112a:	80 e8       	ldi	r24, 0x80	; 128
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	08 95       	ret

00001132 <__fp_nan>:
    1132:	9f ef       	ldi	r25, 0xFF	; 255
    1134:	80 ec       	ldi	r24, 0xC0	; 192
    1136:	08 95       	ret

00001138 <__fp_pscA>:
    1138:	00 24       	eor	r0, r0
    113a:	0a 94       	dec	r0
    113c:	16 16       	cp	r1, r22
    113e:	17 06       	cpc	r1, r23
    1140:	18 06       	cpc	r1, r24
    1142:	09 06       	cpc	r0, r25
    1144:	08 95       	ret

00001146 <__fp_pscB>:
    1146:	00 24       	eor	r0, r0
    1148:	0a 94       	dec	r0
    114a:	12 16       	cp	r1, r18
    114c:	13 06       	cpc	r1, r19
    114e:	14 06       	cpc	r1, r20
    1150:	05 06       	cpc	r0, r21
    1152:	08 95       	ret

00001154 <__fp_round>:
    1154:	09 2e       	mov	r0, r25
    1156:	03 94       	inc	r0
    1158:	00 0c       	add	r0, r0
    115a:	11 f4       	brne	.+4      	; 0x1160 <__fp_round+0xc>
    115c:	88 23       	and	r24, r24
    115e:	52 f0       	brmi	.+20     	; 0x1174 <__fp_round+0x20>
    1160:	bb 0f       	add	r27, r27
    1162:	40 f4       	brcc	.+16     	; 0x1174 <__fp_round+0x20>
    1164:	bf 2b       	or	r27, r31
    1166:	11 f4       	brne	.+4      	; 0x116c <__fp_round+0x18>
    1168:	60 ff       	sbrs	r22, 0
    116a:	04 c0       	rjmp	.+8      	; 0x1174 <__fp_round+0x20>
    116c:	6f 5f       	subi	r22, 0xFF	; 255
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	8f 4f       	sbci	r24, 0xFF	; 255
    1172:	9f 4f       	sbci	r25, 0xFF	; 255
    1174:	08 95       	ret

00001176 <__udivmodsi4>:
    1176:	a1 e2       	ldi	r26, 0x21	; 33
    1178:	1a 2e       	mov	r1, r26
    117a:	aa 1b       	sub	r26, r26
    117c:	bb 1b       	sub	r27, r27
    117e:	fd 01       	movw	r30, r26
    1180:	0d c0       	rjmp	.+26     	; 0x119c <__udivmodsi4_ep>

00001182 <__udivmodsi4_loop>:
    1182:	aa 1f       	adc	r26, r26
    1184:	bb 1f       	adc	r27, r27
    1186:	ee 1f       	adc	r30, r30
    1188:	ff 1f       	adc	r31, r31
    118a:	a2 17       	cp	r26, r18
    118c:	b3 07       	cpc	r27, r19
    118e:	e4 07       	cpc	r30, r20
    1190:	f5 07       	cpc	r31, r21
    1192:	20 f0       	brcs	.+8      	; 0x119c <__udivmodsi4_ep>
    1194:	a2 1b       	sub	r26, r18
    1196:	b3 0b       	sbc	r27, r19
    1198:	e4 0b       	sbc	r30, r20
    119a:	f5 0b       	sbc	r31, r21

0000119c <__udivmodsi4_ep>:
    119c:	66 1f       	adc	r22, r22
    119e:	77 1f       	adc	r23, r23
    11a0:	88 1f       	adc	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	1a 94       	dec	r1
    11a6:	69 f7       	brne	.-38     	; 0x1182 <__udivmodsi4_loop>
    11a8:	60 95       	com	r22
    11aa:	70 95       	com	r23
    11ac:	80 95       	com	r24
    11ae:	90 95       	com	r25
    11b0:	9b 01       	movw	r18, r22
    11b2:	ac 01       	movw	r20, r24
    11b4:	bd 01       	movw	r22, r26
    11b6:	cf 01       	movw	r24, r30
    11b8:	08 95       	ret

000011ba <__tablejump2__>:
    11ba:	ee 0f       	add	r30, r30
    11bc:	ff 1f       	adc	r31, r31

000011be <__tablejump__>:
    11be:	05 90       	lpm	r0, Z+
    11c0:	f4 91       	lpm	r31, Z
    11c2:	e0 2d       	mov	r30, r0
    11c4:	19 94       	eijmp

000011c6 <toupper>:
    11c6:	91 11       	cpse	r25, r1
    11c8:	08 95       	ret
    11ca:	81 56       	subi	r24, 0x61	; 97
    11cc:	8a 51       	subi	r24, 0x1A	; 26
    11ce:	08 f4       	brcc	.+2      	; 0x11d2 <toupper+0xc>
    11d0:	80 52       	subi	r24, 0x20	; 32
    11d2:	85 58       	subi	r24, 0x85	; 133
    11d4:	08 95       	ret

000011d6 <sprintf>:
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	2e 97       	sbiw	r28, 0x0e	; 14
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	0e 89       	ldd	r16, Y+22	; 0x16
    11f0:	1f 89       	ldd	r17, Y+23	; 0x17
    11f2:	86 e0       	ldi	r24, 0x06	; 6
    11f4:	8c 83       	std	Y+4, r24	; 0x04
    11f6:	1a 83       	std	Y+2, r17	; 0x02
    11f8:	09 83       	std	Y+1, r16	; 0x01
    11fa:	8f ef       	ldi	r24, 0xFF	; 255
    11fc:	9f e7       	ldi	r25, 0x7F	; 127
    11fe:	9e 83       	std	Y+6, r25	; 0x06
    1200:	8d 83       	std	Y+5, r24	; 0x05
    1202:	ae 01       	movw	r20, r28
    1204:	46 5e       	subi	r20, 0xE6	; 230
    1206:	5f 4f       	sbci	r21, 0xFF	; 255
    1208:	68 8d       	ldd	r22, Y+24	; 0x18
    120a:	79 8d       	ldd	r23, Y+25	; 0x19
    120c:	ce 01       	movw	r24, r28
    120e:	01 96       	adiw	r24, 0x01	; 1
    1210:	10 d0       	rcall	.+32     	; 0x1232 <vfprintf>
    1212:	ef 81       	ldd	r30, Y+7	; 0x07
    1214:	f8 85       	ldd	r31, Y+8	; 0x08
    1216:	e0 0f       	add	r30, r16
    1218:	f1 1f       	adc	r31, r17
    121a:	10 82       	st	Z, r1
    121c:	2e 96       	adiw	r28, 0x0e	; 14
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	08 95       	ret

00001232 <vfprintf>:
    1232:	2f 92       	push	r2
    1234:	3f 92       	push	r3
    1236:	4f 92       	push	r4
    1238:	5f 92       	push	r5
    123a:	6f 92       	push	r6
    123c:	7f 92       	push	r7
    123e:	8f 92       	push	r8
    1240:	9f 92       	push	r9
    1242:	af 92       	push	r10
    1244:	bf 92       	push	r11
    1246:	cf 92       	push	r12
    1248:	df 92       	push	r13
    124a:	ef 92       	push	r14
    124c:	ff 92       	push	r15
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	2c 97       	sbiw	r28, 0x0c	; 12
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
    1266:	7c 01       	movw	r14, r24
    1268:	6b 01       	movw	r12, r22
    126a:	8a 01       	movw	r16, r20
    126c:	fc 01       	movw	r30, r24
    126e:	17 82       	std	Z+7, r1	; 0x07
    1270:	16 82       	std	Z+6, r1	; 0x06
    1272:	83 81       	ldd	r24, Z+3	; 0x03
    1274:	81 ff       	sbrs	r24, 1
    1276:	b0 c1       	rjmp	.+864    	; 0x15d8 <vfprintf+0x3a6>
    1278:	ce 01       	movw	r24, r28
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	4c 01       	movw	r8, r24
    127e:	f7 01       	movw	r30, r14
    1280:	93 81       	ldd	r25, Z+3	; 0x03
    1282:	f6 01       	movw	r30, r12
    1284:	93 fd       	sbrc	r25, 3
    1286:	85 91       	lpm	r24, Z+
    1288:	93 ff       	sbrs	r25, 3
    128a:	81 91       	ld	r24, Z+
    128c:	6f 01       	movw	r12, r30
    128e:	88 23       	and	r24, r24
    1290:	09 f4       	brne	.+2      	; 0x1294 <vfprintf+0x62>
    1292:	9e c1       	rjmp	.+828    	; 0x15d0 <vfprintf+0x39e>
    1294:	85 32       	cpi	r24, 0x25	; 37
    1296:	39 f4       	brne	.+14     	; 0x12a6 <vfprintf+0x74>
    1298:	93 fd       	sbrc	r25, 3
    129a:	85 91       	lpm	r24, Z+
    129c:	93 ff       	sbrs	r25, 3
    129e:	81 91       	ld	r24, Z+
    12a0:	6f 01       	movw	r12, r30
    12a2:	85 32       	cpi	r24, 0x25	; 37
    12a4:	21 f4       	brne	.+8      	; 0x12ae <vfprintf+0x7c>
    12a6:	b7 01       	movw	r22, r14
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	c7 d1       	rcall	.+910    	; 0x163a <fputc>
    12ac:	e8 cf       	rjmp	.-48     	; 0x127e <vfprintf+0x4c>
    12ae:	51 2c       	mov	r5, r1
    12b0:	31 2c       	mov	r3, r1
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	20 32       	cpi	r18, 0x20	; 32
    12b6:	a0 f4       	brcc	.+40     	; 0x12e0 <vfprintf+0xae>
    12b8:	8b 32       	cpi	r24, 0x2B	; 43
    12ba:	69 f0       	breq	.+26     	; 0x12d6 <vfprintf+0xa4>
    12bc:	30 f4       	brcc	.+12     	; 0x12ca <vfprintf+0x98>
    12be:	80 32       	cpi	r24, 0x20	; 32
    12c0:	59 f0       	breq	.+22     	; 0x12d8 <vfprintf+0xa6>
    12c2:	83 32       	cpi	r24, 0x23	; 35
    12c4:	69 f4       	brne	.+26     	; 0x12e0 <vfprintf+0xae>
    12c6:	20 61       	ori	r18, 0x10	; 16
    12c8:	2c c0       	rjmp	.+88     	; 0x1322 <vfprintf+0xf0>
    12ca:	8d 32       	cpi	r24, 0x2D	; 45
    12cc:	39 f0       	breq	.+14     	; 0x12dc <vfprintf+0xaa>
    12ce:	80 33       	cpi	r24, 0x30	; 48
    12d0:	39 f4       	brne	.+14     	; 0x12e0 <vfprintf+0xae>
    12d2:	21 60       	ori	r18, 0x01	; 1
    12d4:	26 c0       	rjmp	.+76     	; 0x1322 <vfprintf+0xf0>
    12d6:	22 60       	ori	r18, 0x02	; 2
    12d8:	24 60       	ori	r18, 0x04	; 4
    12da:	23 c0       	rjmp	.+70     	; 0x1322 <vfprintf+0xf0>
    12dc:	28 60       	ori	r18, 0x08	; 8
    12de:	21 c0       	rjmp	.+66     	; 0x1322 <vfprintf+0xf0>
    12e0:	27 fd       	sbrc	r18, 7
    12e2:	27 c0       	rjmp	.+78     	; 0x1332 <vfprintf+0x100>
    12e4:	30 ed       	ldi	r19, 0xD0	; 208
    12e6:	38 0f       	add	r19, r24
    12e8:	3a 30       	cpi	r19, 0x0A	; 10
    12ea:	78 f4       	brcc	.+30     	; 0x130a <vfprintf+0xd8>
    12ec:	26 ff       	sbrs	r18, 6
    12ee:	06 c0       	rjmp	.+12     	; 0x12fc <vfprintf+0xca>
    12f0:	fa e0       	ldi	r31, 0x0A	; 10
    12f2:	5f 9e       	mul	r5, r31
    12f4:	30 0d       	add	r19, r0
    12f6:	11 24       	eor	r1, r1
    12f8:	53 2e       	mov	r5, r19
    12fa:	13 c0       	rjmp	.+38     	; 0x1322 <vfprintf+0xf0>
    12fc:	8a e0       	ldi	r24, 0x0A	; 10
    12fe:	38 9e       	mul	r3, r24
    1300:	30 0d       	add	r19, r0
    1302:	11 24       	eor	r1, r1
    1304:	33 2e       	mov	r3, r19
    1306:	20 62       	ori	r18, 0x20	; 32
    1308:	0c c0       	rjmp	.+24     	; 0x1322 <vfprintf+0xf0>
    130a:	8e 32       	cpi	r24, 0x2E	; 46
    130c:	21 f4       	brne	.+8      	; 0x1316 <vfprintf+0xe4>
    130e:	26 fd       	sbrc	r18, 6
    1310:	5f c1       	rjmp	.+702    	; 0x15d0 <vfprintf+0x39e>
    1312:	20 64       	ori	r18, 0x40	; 64
    1314:	06 c0       	rjmp	.+12     	; 0x1322 <vfprintf+0xf0>
    1316:	8c 36       	cpi	r24, 0x6C	; 108
    1318:	11 f4       	brne	.+4      	; 0x131e <vfprintf+0xec>
    131a:	20 68       	ori	r18, 0x80	; 128
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <vfprintf+0xf0>
    131e:	88 36       	cpi	r24, 0x68	; 104
    1320:	41 f4       	brne	.+16     	; 0x1332 <vfprintf+0x100>
    1322:	f6 01       	movw	r30, r12
    1324:	93 fd       	sbrc	r25, 3
    1326:	85 91       	lpm	r24, Z+
    1328:	93 ff       	sbrs	r25, 3
    132a:	81 91       	ld	r24, Z+
    132c:	6f 01       	movw	r12, r30
    132e:	81 11       	cpse	r24, r1
    1330:	c1 cf       	rjmp	.-126    	; 0x12b4 <vfprintf+0x82>
    1332:	98 2f       	mov	r25, r24
    1334:	9f 7d       	andi	r25, 0xDF	; 223
    1336:	95 54       	subi	r25, 0x45	; 69
    1338:	93 30       	cpi	r25, 0x03	; 3
    133a:	28 f4       	brcc	.+10     	; 0x1346 <vfprintf+0x114>
    133c:	0c 5f       	subi	r16, 0xFC	; 252
    133e:	1f 4f       	sbci	r17, 0xFF	; 255
    1340:	ff e3       	ldi	r31, 0x3F	; 63
    1342:	f9 83       	std	Y+1, r31	; 0x01
    1344:	0d c0       	rjmp	.+26     	; 0x1360 <vfprintf+0x12e>
    1346:	83 36       	cpi	r24, 0x63	; 99
    1348:	31 f0       	breq	.+12     	; 0x1356 <vfprintf+0x124>
    134a:	83 37       	cpi	r24, 0x73	; 115
    134c:	71 f0       	breq	.+28     	; 0x136a <vfprintf+0x138>
    134e:	83 35       	cpi	r24, 0x53	; 83
    1350:	09 f0       	breq	.+2      	; 0x1354 <vfprintf+0x122>
    1352:	57 c0       	rjmp	.+174    	; 0x1402 <vfprintf+0x1d0>
    1354:	21 c0       	rjmp	.+66     	; 0x1398 <vfprintf+0x166>
    1356:	f8 01       	movw	r30, r16
    1358:	80 81       	ld	r24, Z
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	0e 5f       	subi	r16, 0xFE	; 254
    135e:	1f 4f       	sbci	r17, 0xFF	; 255
    1360:	44 24       	eor	r4, r4
    1362:	43 94       	inc	r4
    1364:	51 2c       	mov	r5, r1
    1366:	54 01       	movw	r10, r8
    1368:	14 c0       	rjmp	.+40     	; 0x1392 <vfprintf+0x160>
    136a:	38 01       	movw	r6, r16
    136c:	f2 e0       	ldi	r31, 0x02	; 2
    136e:	6f 0e       	add	r6, r31
    1370:	71 1c       	adc	r7, r1
    1372:	f8 01       	movw	r30, r16
    1374:	a0 80       	ld	r10, Z
    1376:	b1 80       	ldd	r11, Z+1	; 0x01
    1378:	26 ff       	sbrs	r18, 6
    137a:	03 c0       	rjmp	.+6      	; 0x1382 <vfprintf+0x150>
    137c:	65 2d       	mov	r22, r5
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <vfprintf+0x154>
    1382:	6f ef       	ldi	r22, 0xFF	; 255
    1384:	7f ef       	ldi	r23, 0xFF	; 255
    1386:	c5 01       	movw	r24, r10
    1388:	2c 87       	std	Y+12, r18	; 0x0c
    138a:	4c d1       	rcall	.+664    	; 0x1624 <strnlen>
    138c:	2c 01       	movw	r4, r24
    138e:	83 01       	movw	r16, r6
    1390:	2c 85       	ldd	r18, Y+12	; 0x0c
    1392:	2f 77       	andi	r18, 0x7F	; 127
    1394:	22 2e       	mov	r2, r18
    1396:	16 c0       	rjmp	.+44     	; 0x13c4 <vfprintf+0x192>
    1398:	38 01       	movw	r6, r16
    139a:	f2 e0       	ldi	r31, 0x02	; 2
    139c:	6f 0e       	add	r6, r31
    139e:	71 1c       	adc	r7, r1
    13a0:	f8 01       	movw	r30, r16
    13a2:	a0 80       	ld	r10, Z
    13a4:	b1 80       	ldd	r11, Z+1	; 0x01
    13a6:	26 ff       	sbrs	r18, 6
    13a8:	03 c0       	rjmp	.+6      	; 0x13b0 <vfprintf+0x17e>
    13aa:	65 2d       	mov	r22, r5
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <vfprintf+0x182>
    13b0:	6f ef       	ldi	r22, 0xFF	; 255
    13b2:	7f ef       	ldi	r23, 0xFF	; 255
    13b4:	c5 01       	movw	r24, r10
    13b6:	2c 87       	std	Y+12, r18	; 0x0c
    13b8:	2a d1       	rcall	.+596    	; 0x160e <strnlen_P>
    13ba:	2c 01       	movw	r4, r24
    13bc:	2c 85       	ldd	r18, Y+12	; 0x0c
    13be:	20 68       	ori	r18, 0x80	; 128
    13c0:	22 2e       	mov	r2, r18
    13c2:	83 01       	movw	r16, r6
    13c4:	23 fc       	sbrc	r2, 3
    13c6:	19 c0       	rjmp	.+50     	; 0x13fa <vfprintf+0x1c8>
    13c8:	83 2d       	mov	r24, r3
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	48 16       	cp	r4, r24
    13ce:	59 06       	cpc	r5, r25
    13d0:	a0 f4       	brcc	.+40     	; 0x13fa <vfprintf+0x1c8>
    13d2:	b7 01       	movw	r22, r14
    13d4:	80 e2       	ldi	r24, 0x20	; 32
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	30 d1       	rcall	.+608    	; 0x163a <fputc>
    13da:	3a 94       	dec	r3
    13dc:	f5 cf       	rjmp	.-22     	; 0x13c8 <vfprintf+0x196>
    13de:	f5 01       	movw	r30, r10
    13e0:	27 fc       	sbrc	r2, 7
    13e2:	85 91       	lpm	r24, Z+
    13e4:	27 fe       	sbrs	r2, 7
    13e6:	81 91       	ld	r24, Z+
    13e8:	5f 01       	movw	r10, r30
    13ea:	b7 01       	movw	r22, r14
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	25 d1       	rcall	.+586    	; 0x163a <fputc>
    13f0:	31 10       	cpse	r3, r1
    13f2:	3a 94       	dec	r3
    13f4:	f1 e0       	ldi	r31, 0x01	; 1
    13f6:	4f 1a       	sub	r4, r31
    13f8:	51 08       	sbc	r5, r1
    13fa:	41 14       	cp	r4, r1
    13fc:	51 04       	cpc	r5, r1
    13fe:	79 f7       	brne	.-34     	; 0x13de <vfprintf+0x1ac>
    1400:	de c0       	rjmp	.+444    	; 0x15be <vfprintf+0x38c>
    1402:	84 36       	cpi	r24, 0x64	; 100
    1404:	11 f0       	breq	.+4      	; 0x140a <vfprintf+0x1d8>
    1406:	89 36       	cpi	r24, 0x69	; 105
    1408:	31 f5       	brne	.+76     	; 0x1456 <vfprintf+0x224>
    140a:	f8 01       	movw	r30, r16
    140c:	27 ff       	sbrs	r18, 7
    140e:	07 c0       	rjmp	.+14     	; 0x141e <vfprintf+0x1ec>
    1410:	60 81       	ld	r22, Z
    1412:	71 81       	ldd	r23, Z+1	; 0x01
    1414:	82 81       	ldd	r24, Z+2	; 0x02
    1416:	93 81       	ldd	r25, Z+3	; 0x03
    1418:	0c 5f       	subi	r16, 0xFC	; 252
    141a:	1f 4f       	sbci	r17, 0xFF	; 255
    141c:	08 c0       	rjmp	.+16     	; 0x142e <vfprintf+0x1fc>
    141e:	60 81       	ld	r22, Z
    1420:	71 81       	ldd	r23, Z+1	; 0x01
    1422:	88 27       	eor	r24, r24
    1424:	77 fd       	sbrc	r23, 7
    1426:	80 95       	com	r24
    1428:	98 2f       	mov	r25, r24
    142a:	0e 5f       	subi	r16, 0xFE	; 254
    142c:	1f 4f       	sbci	r17, 0xFF	; 255
    142e:	2f 76       	andi	r18, 0x6F	; 111
    1430:	b2 2e       	mov	r11, r18
    1432:	97 ff       	sbrs	r25, 7
    1434:	09 c0       	rjmp	.+18     	; 0x1448 <vfprintf+0x216>
    1436:	90 95       	com	r25
    1438:	80 95       	com	r24
    143a:	70 95       	com	r23
    143c:	61 95       	neg	r22
    143e:	7f 4f       	sbci	r23, 0xFF	; 255
    1440:	8f 4f       	sbci	r24, 0xFF	; 255
    1442:	9f 4f       	sbci	r25, 0xFF	; 255
    1444:	20 68       	ori	r18, 0x80	; 128
    1446:	b2 2e       	mov	r11, r18
    1448:	2a e0       	ldi	r18, 0x0A	; 10
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	a4 01       	movw	r20, r8
    144e:	27 d1       	rcall	.+590    	; 0x169e <__ultoa_invert>
    1450:	a8 2e       	mov	r10, r24
    1452:	a8 18       	sub	r10, r8
    1454:	43 c0       	rjmp	.+134    	; 0x14dc <vfprintf+0x2aa>
    1456:	85 37       	cpi	r24, 0x75	; 117
    1458:	29 f4       	brne	.+10     	; 0x1464 <vfprintf+0x232>
    145a:	2f 7e       	andi	r18, 0xEF	; 239
    145c:	b2 2e       	mov	r11, r18
    145e:	2a e0       	ldi	r18, 0x0A	; 10
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	25 c0       	rjmp	.+74     	; 0x14ae <vfprintf+0x27c>
    1464:	f2 2f       	mov	r31, r18
    1466:	f9 7f       	andi	r31, 0xF9	; 249
    1468:	bf 2e       	mov	r11, r31
    146a:	8f 36       	cpi	r24, 0x6F	; 111
    146c:	c1 f0       	breq	.+48     	; 0x149e <vfprintf+0x26c>
    146e:	18 f4       	brcc	.+6      	; 0x1476 <vfprintf+0x244>
    1470:	88 35       	cpi	r24, 0x58	; 88
    1472:	79 f0       	breq	.+30     	; 0x1492 <vfprintf+0x260>
    1474:	ad c0       	rjmp	.+346    	; 0x15d0 <vfprintf+0x39e>
    1476:	80 37       	cpi	r24, 0x70	; 112
    1478:	19 f0       	breq	.+6      	; 0x1480 <vfprintf+0x24e>
    147a:	88 37       	cpi	r24, 0x78	; 120
    147c:	21 f0       	breq	.+8      	; 0x1486 <vfprintf+0x254>
    147e:	a8 c0       	rjmp	.+336    	; 0x15d0 <vfprintf+0x39e>
    1480:	2f 2f       	mov	r18, r31
    1482:	20 61       	ori	r18, 0x10	; 16
    1484:	b2 2e       	mov	r11, r18
    1486:	b4 fe       	sbrs	r11, 4
    1488:	0d c0       	rjmp	.+26     	; 0x14a4 <vfprintf+0x272>
    148a:	8b 2d       	mov	r24, r11
    148c:	84 60       	ori	r24, 0x04	; 4
    148e:	b8 2e       	mov	r11, r24
    1490:	09 c0       	rjmp	.+18     	; 0x14a4 <vfprintf+0x272>
    1492:	24 ff       	sbrs	r18, 4
    1494:	0a c0       	rjmp	.+20     	; 0x14aa <vfprintf+0x278>
    1496:	9f 2f       	mov	r25, r31
    1498:	96 60       	ori	r25, 0x06	; 6
    149a:	b9 2e       	mov	r11, r25
    149c:	06 c0       	rjmp	.+12     	; 0x14aa <vfprintf+0x278>
    149e:	28 e0       	ldi	r18, 0x08	; 8
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	05 c0       	rjmp	.+10     	; 0x14ae <vfprintf+0x27c>
    14a4:	20 e1       	ldi	r18, 0x10	; 16
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <vfprintf+0x27c>
    14aa:	20 e1       	ldi	r18, 0x10	; 16
    14ac:	32 e0       	ldi	r19, 0x02	; 2
    14ae:	f8 01       	movw	r30, r16
    14b0:	b7 fe       	sbrs	r11, 7
    14b2:	07 c0       	rjmp	.+14     	; 0x14c2 <vfprintf+0x290>
    14b4:	60 81       	ld	r22, Z
    14b6:	71 81       	ldd	r23, Z+1	; 0x01
    14b8:	82 81       	ldd	r24, Z+2	; 0x02
    14ba:	93 81       	ldd	r25, Z+3	; 0x03
    14bc:	0c 5f       	subi	r16, 0xFC	; 252
    14be:	1f 4f       	sbci	r17, 0xFF	; 255
    14c0:	06 c0       	rjmp	.+12     	; 0x14ce <vfprintf+0x29c>
    14c2:	60 81       	ld	r22, Z
    14c4:	71 81       	ldd	r23, Z+1	; 0x01
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	0e 5f       	subi	r16, 0xFE	; 254
    14cc:	1f 4f       	sbci	r17, 0xFF	; 255
    14ce:	a4 01       	movw	r20, r8
    14d0:	e6 d0       	rcall	.+460    	; 0x169e <__ultoa_invert>
    14d2:	a8 2e       	mov	r10, r24
    14d4:	a8 18       	sub	r10, r8
    14d6:	fb 2d       	mov	r31, r11
    14d8:	ff 77       	andi	r31, 0x7F	; 127
    14da:	bf 2e       	mov	r11, r31
    14dc:	b6 fe       	sbrs	r11, 6
    14de:	0b c0       	rjmp	.+22     	; 0x14f6 <vfprintf+0x2c4>
    14e0:	2b 2d       	mov	r18, r11
    14e2:	2e 7f       	andi	r18, 0xFE	; 254
    14e4:	a5 14       	cp	r10, r5
    14e6:	50 f4       	brcc	.+20     	; 0x14fc <vfprintf+0x2ca>
    14e8:	b4 fe       	sbrs	r11, 4
    14ea:	0a c0       	rjmp	.+20     	; 0x1500 <vfprintf+0x2ce>
    14ec:	b2 fc       	sbrc	r11, 2
    14ee:	08 c0       	rjmp	.+16     	; 0x1500 <vfprintf+0x2ce>
    14f0:	2b 2d       	mov	r18, r11
    14f2:	2e 7e       	andi	r18, 0xEE	; 238
    14f4:	05 c0       	rjmp	.+10     	; 0x1500 <vfprintf+0x2ce>
    14f6:	7a 2c       	mov	r7, r10
    14f8:	2b 2d       	mov	r18, r11
    14fa:	03 c0       	rjmp	.+6      	; 0x1502 <vfprintf+0x2d0>
    14fc:	7a 2c       	mov	r7, r10
    14fe:	01 c0       	rjmp	.+2      	; 0x1502 <vfprintf+0x2d0>
    1500:	75 2c       	mov	r7, r5
    1502:	24 ff       	sbrs	r18, 4
    1504:	0d c0       	rjmp	.+26     	; 0x1520 <vfprintf+0x2ee>
    1506:	fe 01       	movw	r30, r28
    1508:	ea 0d       	add	r30, r10
    150a:	f1 1d       	adc	r31, r1
    150c:	80 81       	ld	r24, Z
    150e:	80 33       	cpi	r24, 0x30	; 48
    1510:	11 f4       	brne	.+4      	; 0x1516 <vfprintf+0x2e4>
    1512:	29 7e       	andi	r18, 0xE9	; 233
    1514:	09 c0       	rjmp	.+18     	; 0x1528 <vfprintf+0x2f6>
    1516:	22 ff       	sbrs	r18, 2
    1518:	06 c0       	rjmp	.+12     	; 0x1526 <vfprintf+0x2f4>
    151a:	73 94       	inc	r7
    151c:	73 94       	inc	r7
    151e:	04 c0       	rjmp	.+8      	; 0x1528 <vfprintf+0x2f6>
    1520:	82 2f       	mov	r24, r18
    1522:	86 78       	andi	r24, 0x86	; 134
    1524:	09 f0       	breq	.+2      	; 0x1528 <vfprintf+0x2f6>
    1526:	73 94       	inc	r7
    1528:	23 fd       	sbrc	r18, 3
    152a:	12 c0       	rjmp	.+36     	; 0x1550 <vfprintf+0x31e>
    152c:	20 ff       	sbrs	r18, 0
    152e:	06 c0       	rjmp	.+12     	; 0x153c <vfprintf+0x30a>
    1530:	5a 2c       	mov	r5, r10
    1532:	73 14       	cp	r7, r3
    1534:	18 f4       	brcc	.+6      	; 0x153c <vfprintf+0x30a>
    1536:	53 0c       	add	r5, r3
    1538:	57 18       	sub	r5, r7
    153a:	73 2c       	mov	r7, r3
    153c:	73 14       	cp	r7, r3
    153e:	60 f4       	brcc	.+24     	; 0x1558 <vfprintf+0x326>
    1540:	b7 01       	movw	r22, r14
    1542:	80 e2       	ldi	r24, 0x20	; 32
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	2c 87       	std	Y+12, r18	; 0x0c
    1548:	78 d0       	rcall	.+240    	; 0x163a <fputc>
    154a:	73 94       	inc	r7
    154c:	2c 85       	ldd	r18, Y+12	; 0x0c
    154e:	f6 cf       	rjmp	.-20     	; 0x153c <vfprintf+0x30a>
    1550:	73 14       	cp	r7, r3
    1552:	10 f4       	brcc	.+4      	; 0x1558 <vfprintf+0x326>
    1554:	37 18       	sub	r3, r7
    1556:	01 c0       	rjmp	.+2      	; 0x155a <vfprintf+0x328>
    1558:	31 2c       	mov	r3, r1
    155a:	24 ff       	sbrs	r18, 4
    155c:	11 c0       	rjmp	.+34     	; 0x1580 <vfprintf+0x34e>
    155e:	b7 01       	movw	r22, r14
    1560:	80 e3       	ldi	r24, 0x30	; 48
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	2c 87       	std	Y+12, r18	; 0x0c
    1566:	69 d0       	rcall	.+210    	; 0x163a <fputc>
    1568:	2c 85       	ldd	r18, Y+12	; 0x0c
    156a:	22 ff       	sbrs	r18, 2
    156c:	16 c0       	rjmp	.+44     	; 0x159a <vfprintf+0x368>
    156e:	21 ff       	sbrs	r18, 1
    1570:	03 c0       	rjmp	.+6      	; 0x1578 <vfprintf+0x346>
    1572:	88 e5       	ldi	r24, 0x58	; 88
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	02 c0       	rjmp	.+4      	; 0x157c <vfprintf+0x34a>
    1578:	88 e7       	ldi	r24, 0x78	; 120
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	b7 01       	movw	r22, r14
    157e:	0c c0       	rjmp	.+24     	; 0x1598 <vfprintf+0x366>
    1580:	82 2f       	mov	r24, r18
    1582:	86 78       	andi	r24, 0x86	; 134
    1584:	51 f0       	breq	.+20     	; 0x159a <vfprintf+0x368>
    1586:	21 fd       	sbrc	r18, 1
    1588:	02 c0       	rjmp	.+4      	; 0x158e <vfprintf+0x35c>
    158a:	80 e2       	ldi	r24, 0x20	; 32
    158c:	01 c0       	rjmp	.+2      	; 0x1590 <vfprintf+0x35e>
    158e:	8b e2       	ldi	r24, 0x2B	; 43
    1590:	27 fd       	sbrc	r18, 7
    1592:	8d e2       	ldi	r24, 0x2D	; 45
    1594:	b7 01       	movw	r22, r14
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	50 d0       	rcall	.+160    	; 0x163a <fputc>
    159a:	a5 14       	cp	r10, r5
    159c:	30 f4       	brcc	.+12     	; 0x15aa <vfprintf+0x378>
    159e:	b7 01       	movw	r22, r14
    15a0:	80 e3       	ldi	r24, 0x30	; 48
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	4a d0       	rcall	.+148    	; 0x163a <fputc>
    15a6:	5a 94       	dec	r5
    15a8:	f8 cf       	rjmp	.-16     	; 0x159a <vfprintf+0x368>
    15aa:	aa 94       	dec	r10
    15ac:	f4 01       	movw	r30, r8
    15ae:	ea 0d       	add	r30, r10
    15b0:	f1 1d       	adc	r31, r1
    15b2:	80 81       	ld	r24, Z
    15b4:	b7 01       	movw	r22, r14
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	40 d0       	rcall	.+128    	; 0x163a <fputc>
    15ba:	a1 10       	cpse	r10, r1
    15bc:	f6 cf       	rjmp	.-20     	; 0x15aa <vfprintf+0x378>
    15be:	33 20       	and	r3, r3
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <vfprintf+0x392>
    15c2:	5d ce       	rjmp	.-838    	; 0x127e <vfprintf+0x4c>
    15c4:	b7 01       	movw	r22, r14
    15c6:	80 e2       	ldi	r24, 0x20	; 32
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	37 d0       	rcall	.+110    	; 0x163a <fputc>
    15cc:	3a 94       	dec	r3
    15ce:	f7 cf       	rjmp	.-18     	; 0x15be <vfprintf+0x38c>
    15d0:	f7 01       	movw	r30, r14
    15d2:	86 81       	ldd	r24, Z+6	; 0x06
    15d4:	97 81       	ldd	r25, Z+7	; 0x07
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <vfprintf+0x3aa>
    15d8:	8f ef       	ldi	r24, 0xFF	; 255
    15da:	9f ef       	ldi	r25, 0xFF	; 255
    15dc:	2c 96       	adiw	r28, 0x0c	; 12
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	de bf       	out	0x3e, r29	; 62
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	cd bf       	out	0x3d, r28	; 61
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	1f 91       	pop	r17
    15ee:	0f 91       	pop	r16
    15f0:	ff 90       	pop	r15
    15f2:	ef 90       	pop	r14
    15f4:	df 90       	pop	r13
    15f6:	cf 90       	pop	r12
    15f8:	bf 90       	pop	r11
    15fa:	af 90       	pop	r10
    15fc:	9f 90       	pop	r9
    15fe:	8f 90       	pop	r8
    1600:	7f 90       	pop	r7
    1602:	6f 90       	pop	r6
    1604:	5f 90       	pop	r5
    1606:	4f 90       	pop	r4
    1608:	3f 90       	pop	r3
    160a:	2f 90       	pop	r2
    160c:	08 95       	ret

0000160e <strnlen_P>:
    160e:	fc 01       	movw	r30, r24
    1610:	05 90       	lpm	r0, Z+
    1612:	61 50       	subi	r22, 0x01	; 1
    1614:	70 40       	sbci	r23, 0x00	; 0
    1616:	01 10       	cpse	r0, r1
    1618:	d8 f7       	brcc	.-10     	; 0x1610 <strnlen_P+0x2>
    161a:	80 95       	com	r24
    161c:	90 95       	com	r25
    161e:	8e 0f       	add	r24, r30
    1620:	9f 1f       	adc	r25, r31
    1622:	08 95       	ret

00001624 <strnlen>:
    1624:	fc 01       	movw	r30, r24
    1626:	61 50       	subi	r22, 0x01	; 1
    1628:	70 40       	sbci	r23, 0x00	; 0
    162a:	01 90       	ld	r0, Z+
    162c:	01 10       	cpse	r0, r1
    162e:	d8 f7       	brcc	.-10     	; 0x1626 <strnlen+0x2>
    1630:	80 95       	com	r24
    1632:	90 95       	com	r25
    1634:	8e 0f       	add	r24, r30
    1636:	9f 1f       	adc	r25, r31
    1638:	08 95       	ret

0000163a <fputc>:
    163a:	0f 93       	push	r16
    163c:	1f 93       	push	r17
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	18 2f       	mov	r17, r24
    1644:	09 2f       	mov	r16, r25
    1646:	eb 01       	movw	r28, r22
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	81 fd       	sbrc	r24, 1
    164c:	03 c0       	rjmp	.+6      	; 0x1654 <fputc+0x1a>
    164e:	8f ef       	ldi	r24, 0xFF	; 255
    1650:	9f ef       	ldi	r25, 0xFF	; 255
    1652:	20 c0       	rjmp	.+64     	; 0x1694 <fputc+0x5a>
    1654:	82 ff       	sbrs	r24, 2
    1656:	10 c0       	rjmp	.+32     	; 0x1678 <fputc+0x3e>
    1658:	4e 81       	ldd	r20, Y+6	; 0x06
    165a:	5f 81       	ldd	r21, Y+7	; 0x07
    165c:	2c 81       	ldd	r18, Y+4	; 0x04
    165e:	3d 81       	ldd	r19, Y+5	; 0x05
    1660:	42 17       	cp	r20, r18
    1662:	53 07       	cpc	r21, r19
    1664:	7c f4       	brge	.+30     	; 0x1684 <fputc+0x4a>
    1666:	e8 81       	ld	r30, Y
    1668:	f9 81       	ldd	r31, Y+1	; 0x01
    166a:	9f 01       	movw	r18, r30
    166c:	2f 5f       	subi	r18, 0xFF	; 255
    166e:	3f 4f       	sbci	r19, 0xFF	; 255
    1670:	39 83       	std	Y+1, r19	; 0x01
    1672:	28 83       	st	Y, r18
    1674:	10 83       	st	Z, r17
    1676:	06 c0       	rjmp	.+12     	; 0x1684 <fputc+0x4a>
    1678:	e8 85       	ldd	r30, Y+8	; 0x08
    167a:	f9 85       	ldd	r31, Y+9	; 0x09
    167c:	81 2f       	mov	r24, r17
    167e:	19 95       	eicall
    1680:	89 2b       	or	r24, r25
    1682:	29 f7       	brne	.-54     	; 0x164e <fputc+0x14>
    1684:	2e 81       	ldd	r18, Y+6	; 0x06
    1686:	3f 81       	ldd	r19, Y+7	; 0x07
    1688:	2f 5f       	subi	r18, 0xFF	; 255
    168a:	3f 4f       	sbci	r19, 0xFF	; 255
    168c:	3f 83       	std	Y+7, r19	; 0x07
    168e:	2e 83       	std	Y+6, r18	; 0x06
    1690:	81 2f       	mov	r24, r17
    1692:	90 2f       	mov	r25, r16
    1694:	df 91       	pop	r29
    1696:	cf 91       	pop	r28
    1698:	1f 91       	pop	r17
    169a:	0f 91       	pop	r16
    169c:	08 95       	ret

0000169e <__ultoa_invert>:
    169e:	fa 01       	movw	r30, r20
    16a0:	aa 27       	eor	r26, r26
    16a2:	28 30       	cpi	r18, 0x08	; 8
    16a4:	51 f1       	breq	.+84     	; 0x16fa <__ultoa_invert+0x5c>
    16a6:	20 31       	cpi	r18, 0x10	; 16
    16a8:	81 f1       	breq	.+96     	; 0x170a <__ultoa_invert+0x6c>
    16aa:	e8 94       	clt
    16ac:	6f 93       	push	r22
    16ae:	6e 7f       	andi	r22, 0xFE	; 254
    16b0:	6e 5f       	subi	r22, 0xFE	; 254
    16b2:	7f 4f       	sbci	r23, 0xFF	; 255
    16b4:	8f 4f       	sbci	r24, 0xFF	; 255
    16b6:	9f 4f       	sbci	r25, 0xFF	; 255
    16b8:	af 4f       	sbci	r26, 0xFF	; 255
    16ba:	b1 e0       	ldi	r27, 0x01	; 1
    16bc:	3e d0       	rcall	.+124    	; 0x173a <__ultoa_invert+0x9c>
    16be:	b4 e0       	ldi	r27, 0x04	; 4
    16c0:	3c d0       	rcall	.+120    	; 0x173a <__ultoa_invert+0x9c>
    16c2:	67 0f       	add	r22, r23
    16c4:	78 1f       	adc	r23, r24
    16c6:	89 1f       	adc	r24, r25
    16c8:	9a 1f       	adc	r25, r26
    16ca:	a1 1d       	adc	r26, r1
    16cc:	68 0f       	add	r22, r24
    16ce:	79 1f       	adc	r23, r25
    16d0:	8a 1f       	adc	r24, r26
    16d2:	91 1d       	adc	r25, r1
    16d4:	a1 1d       	adc	r26, r1
    16d6:	6a 0f       	add	r22, r26
    16d8:	71 1d       	adc	r23, r1
    16da:	81 1d       	adc	r24, r1
    16dc:	91 1d       	adc	r25, r1
    16de:	a1 1d       	adc	r26, r1
    16e0:	20 d0       	rcall	.+64     	; 0x1722 <__ultoa_invert+0x84>
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <__ultoa_invert+0x48>
    16e4:	68 94       	set
    16e6:	3f 91       	pop	r19
    16e8:	2a e0       	ldi	r18, 0x0A	; 10
    16ea:	26 9f       	mul	r18, r22
    16ec:	11 24       	eor	r1, r1
    16ee:	30 19       	sub	r19, r0
    16f0:	30 5d       	subi	r19, 0xD0	; 208
    16f2:	31 93       	st	Z+, r19
    16f4:	de f6       	brtc	.-74     	; 0x16ac <__ultoa_invert+0xe>
    16f6:	cf 01       	movw	r24, r30
    16f8:	08 95       	ret
    16fa:	46 2f       	mov	r20, r22
    16fc:	47 70       	andi	r20, 0x07	; 7
    16fe:	40 5d       	subi	r20, 0xD0	; 208
    1700:	41 93       	st	Z+, r20
    1702:	b3 e0       	ldi	r27, 0x03	; 3
    1704:	0f d0       	rcall	.+30     	; 0x1724 <__ultoa_invert+0x86>
    1706:	c9 f7       	brne	.-14     	; 0x16fa <__ultoa_invert+0x5c>
    1708:	f6 cf       	rjmp	.-20     	; 0x16f6 <__ultoa_invert+0x58>
    170a:	46 2f       	mov	r20, r22
    170c:	4f 70       	andi	r20, 0x0F	; 15
    170e:	40 5d       	subi	r20, 0xD0	; 208
    1710:	4a 33       	cpi	r20, 0x3A	; 58
    1712:	18 f0       	brcs	.+6      	; 0x171a <__ultoa_invert+0x7c>
    1714:	49 5d       	subi	r20, 0xD9	; 217
    1716:	31 fd       	sbrc	r19, 1
    1718:	40 52       	subi	r20, 0x20	; 32
    171a:	41 93       	st	Z+, r20
    171c:	02 d0       	rcall	.+4      	; 0x1722 <__ultoa_invert+0x84>
    171e:	a9 f7       	brne	.-22     	; 0x170a <__ultoa_invert+0x6c>
    1720:	ea cf       	rjmp	.-44     	; 0x16f6 <__ultoa_invert+0x58>
    1722:	b4 e0       	ldi	r27, 0x04	; 4
    1724:	a6 95       	lsr	r26
    1726:	97 95       	ror	r25
    1728:	87 95       	ror	r24
    172a:	77 95       	ror	r23
    172c:	67 95       	ror	r22
    172e:	ba 95       	dec	r27
    1730:	c9 f7       	brne	.-14     	; 0x1724 <__ultoa_invert+0x86>
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	61 05       	cpc	r22, r1
    1736:	71 05       	cpc	r23, r1
    1738:	08 95       	ret
    173a:	9b 01       	movw	r18, r22
    173c:	ac 01       	movw	r20, r24
    173e:	0a 2e       	mov	r0, r26
    1740:	06 94       	lsr	r0
    1742:	57 95       	ror	r21
    1744:	47 95       	ror	r20
    1746:	37 95       	ror	r19
    1748:	27 95       	ror	r18
    174a:	ba 95       	dec	r27
    174c:	c9 f7       	brne	.-14     	; 0x1740 <__ultoa_invert+0xa2>
    174e:	62 0f       	add	r22, r18
    1750:	73 1f       	adc	r23, r19
    1752:	84 1f       	adc	r24, r20
    1754:	95 1f       	adc	r25, r21
    1756:	a0 1d       	adc	r26, r0
    1758:	08 95       	ret

0000175a <_exit>:
    175a:	f8 94       	cli

0000175c <__stop_program>:
    175c:	ff cf       	rjmp	.-2      	; 0x175c <__stop_program>
