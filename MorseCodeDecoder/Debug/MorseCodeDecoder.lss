
MorseCodeDecoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800200  00001760  000017f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001760  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800226  00800226  0000181a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000181a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002a0  00000000  00000000  00001876  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000030a8  00000000  00000000  00001b16  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011ad  00000000  00000000  00004bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000019be  00000000  00000000  00005d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000065c  00000000  00000000  0000772c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ac9  00000000  00000000  00007d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001d3d  00000000  00000000  00008851  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000288  00000000  00000000  0000a58e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	cb c0       	rjmp	.+406    	; 0x198 <__ctors_end>
       2:	00 00       	nop
       4:	e9 c0       	rjmp	.+466    	; 0x1d8 <__bad_interrupt>
       6:	00 00       	nop
       8:	e7 c0       	rjmp	.+462    	; 0x1d8 <__bad_interrupt>
       a:	00 00       	nop
       c:	e5 c0       	rjmp	.+458    	; 0x1d8 <__bad_interrupt>
       e:	00 00       	nop
      10:	e3 c0       	rjmp	.+454    	; 0x1d8 <__bad_interrupt>
      12:	00 00       	nop
      14:	e1 c0       	rjmp	.+450    	; 0x1d8 <__bad_interrupt>
      16:	00 00       	nop
      18:	df c0       	rjmp	.+446    	; 0x1d8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	dd c0       	rjmp	.+442    	; 0x1d8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	db c0       	rjmp	.+438    	; 0x1d8 <__bad_interrupt>
      22:	00 00       	nop
      24:	d9 c0       	rjmp	.+434    	; 0x1d8 <__bad_interrupt>
      26:	00 00       	nop
      28:	d7 c0       	rjmp	.+430    	; 0x1d8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d5 c0       	rjmp	.+426    	; 0x1d8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d3 c0       	rjmp	.+422    	; 0x1d8 <__bad_interrupt>
      32:	00 00       	nop
      34:	d1 c0       	rjmp	.+418    	; 0x1d8 <__bad_interrupt>
      36:	00 00       	nop
      38:	cf c0       	rjmp	.+414    	; 0x1d8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	cd c0       	rjmp	.+410    	; 0x1d8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	cb c0       	rjmp	.+406    	; 0x1d8 <__bad_interrupt>
      42:	00 00       	nop
      44:	c9 c0       	rjmp	.+402    	; 0x1d8 <__bad_interrupt>
      46:	00 00       	nop
      48:	c7 c0       	rjmp	.+398    	; 0x1d8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c5 c0       	rjmp	.+394    	; 0x1d8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c3 c0       	rjmp	.+390    	; 0x1d8 <__bad_interrupt>
      52:	00 00       	nop
      54:	c1 c0       	rjmp	.+386    	; 0x1d8 <__bad_interrupt>
      56:	00 00       	nop
      58:	bf c0       	rjmp	.+382    	; 0x1d8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	bd c0       	rjmp	.+378    	; 0x1d8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	bb c0       	rjmp	.+374    	; 0x1d8 <__bad_interrupt>
      62:	00 00       	nop
      64:	b9 c0       	rjmp	.+370    	; 0x1d8 <__bad_interrupt>
      66:	00 00       	nop
      68:	b7 c0       	rjmp	.+366    	; 0x1d8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b5 c0       	rjmp	.+362    	; 0x1d8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b3 c0       	rjmp	.+358    	; 0x1d8 <__bad_interrupt>
      72:	00 00       	nop
      74:	b1 c0       	rjmp	.+354    	; 0x1d8 <__bad_interrupt>
      76:	00 00       	nop
      78:	af c0       	rjmp	.+350    	; 0x1d8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ad c0       	rjmp	.+346    	; 0x1d8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ab c0       	rjmp	.+342    	; 0x1d8 <__bad_interrupt>
      82:	00 00       	nop
      84:	a9 c0       	rjmp	.+338    	; 0x1d8 <__bad_interrupt>
      86:	00 00       	nop
      88:	a7 c0       	rjmp	.+334    	; 0x1d8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b8 c6       	rjmp	.+3440   	; 0xdfe <__vector_35>
      8e:	00 00       	nop
      90:	a3 c0       	rjmp	.+326    	; 0x1d8 <__bad_interrupt>
      92:	00 00       	nop
      94:	a1 c0       	rjmp	.+322    	; 0x1d8 <__bad_interrupt>
      96:	00 00       	nop
      98:	9f c0       	rjmp	.+318    	; 0x1d8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	9d c0       	rjmp	.+314    	; 0x1d8 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	9b c0       	rjmp	.+310    	; 0x1d8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	99 c0       	rjmp	.+306    	; 0x1d8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	97 c0       	rjmp	.+302    	; 0x1d8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	95 c0       	rjmp	.+298    	; 0x1d8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	93 c0       	rjmp	.+294    	; 0x1d8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	91 c0       	rjmp	.+290    	; 0x1d8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	8f c0       	rjmp	.+286    	; 0x1d8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	8d c0       	rjmp	.+282    	; 0x1d8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	8b c0       	rjmp	.+278    	; 0x1d8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	89 c0       	rjmp	.+274    	; 0x1d8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	87 c0       	rjmp	.+270    	; 0x1d8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	85 c0       	rjmp	.+266    	; 0x1d8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	83 c0       	rjmp	.+262    	; 0x1d8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	81 c0       	rjmp	.+258    	; 0x1d8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	7f c0       	rjmp	.+254    	; 0x1d8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	7d c0       	rjmp	.+250    	; 0x1d8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	7b c0       	rjmp	.+246    	; 0x1d8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	41 02       	muls	r20, r17
      e6:	ad 03       	fmulsu	r18, r21
      e8:	ad 03       	fmulsu	r18, r21
      ea:	ad 03       	fmulsu	r18, r21
      ec:	ad 03       	fmulsu	r18, r21
      ee:	ad 03       	fmulsu	r18, r21
      f0:	ad 03       	fmulsu	r18, r21
      f2:	ad 03       	fmulsu	r18, r21
      f4:	ad 03       	fmulsu	r18, r21
      f6:	ad 03       	fmulsu	r18, r21
      f8:	ad 03       	fmulsu	r18, r21
      fa:	ad 03       	fmulsu	r18, r21
      fc:	8c 03       	fmulsu	r16, r20
      fe:	ad 03       	fmulsu	r18, r21
     100:	81 03       	fmuls	r16, r17
     102:	ad 03       	fmulsu	r18, r21
     104:	1f 03       	fmul	r17, r23
     106:	28 03       	fmul	r18, r16
     108:	32 03       	mulsu	r19, r18
     10a:	3c 03       	fmul	r19, r20
     10c:	46 03       	mulsu	r20, r22
     10e:	50 03       	mulsu	r21, r16
     110:	59 03       	fmul	r21, r17
     112:	63 03       	mulsu	r22, r19
     114:	6d 03       	fmul	r22, r21
     116:	77 03       	mulsu	r23, r23
     118:	97 03       	fmuls	r17, r23
     11a:	ad 03       	fmulsu	r18, r21
     11c:	ad 03       	fmulsu	r18, r21
     11e:	ad 03       	fmulsu	r18, r21
     120:	ad 03       	fmulsu	r18, r21
     122:	a2 03       	fmuls	r18, r18
     124:	ad 03       	fmulsu	r18, r21
     126:	52 02       	muls	r21, r18
     128:	59 02       	muls	r21, r25
     12a:	62 02       	muls	r22, r18
     12c:	6b 02       	muls	r22, r27
     12e:	73 02       	muls	r23, r19
     130:	78 02       	muls	r23, r24
     132:	81 02       	muls	r24, r17
     134:	89 02       	muls	r24, r25
     136:	91 02       	muls	r25, r17
     138:	97 02       	muls	r25, r23
     13a:	a0 02       	muls	r26, r16
     13c:	a8 02       	muls	r26, r24
     13e:	b1 02       	muls	r27, r17
     140:	b7 02       	muls	r27, r23
     142:	be 02       	muls	r27, r30
     144:	c5 02       	muls	r28, r21
     146:	ce 02       	muls	r28, r30
     148:	d7 02       	muls	r29, r23
     14a:	df 02       	muls	r29, r31
     14c:	e6 02       	muls	r30, r22
     14e:	eb 02       	muls	r30, r27
     150:	f3 02       	muls	r31, r19
     152:	fc 02       	muls	r31, r28
     154:	04 03       	mulsu	r16, r20
     156:	ad 03       	fmulsu	r18, r21
     158:	16 03       	mulsu	r17, r22
     15a:	ad 03       	fmulsu	r18, r21
     15c:	ad 03       	fmulsu	r18, r21
     15e:	ad 03       	fmulsu	r18, r21
     160:	ad 03       	fmulsu	r18, r21
     162:	ad 03       	fmulsu	r18, r21
     164:	ad 03       	fmulsu	r18, r21
     166:	ad 03       	fmulsu	r18, r21
     168:	ad 03       	fmulsu	r18, r21
     16a:	ad 03       	fmulsu	r18, r21
     16c:	ad 03       	fmulsu	r18, r21
     16e:	ad 03       	fmulsu	r18, r21
     170:	ad 03       	fmulsu	r18, r21
     172:	ad 03       	fmulsu	r18, r21
     174:	ad 03       	fmulsu	r18, r21
     176:	ad 03       	fmulsu	r18, r21
     178:	ad 03       	fmulsu	r18, r21
     17a:	ad 03       	fmulsu	r18, r21
     17c:	ad 03       	fmulsu	r18, r21
     17e:	ad 03       	fmulsu	r18, r21
     180:	ad 03       	fmulsu	r18, r21
     182:	ad 03       	fmulsu	r18, r21
     184:	ad 03       	fmulsu	r18, r21
     186:	ad 03       	fmulsu	r18, r21
     188:	ad 03       	fmulsu	r18, r21
     18a:	ad 03       	fmulsu	r18, r21
     18c:	ad 03       	fmulsu	r18, r21
     18e:	ad 03       	fmulsu	r18, r21
     190:	ad 03       	fmulsu	r18, r21
     192:	ad 03       	fmulsu	r18, r21
     194:	ad 03       	fmulsu	r18, r21
     196:	0d 03       	fmul	r16, r21

00000198 <__ctors_end>:
     198:	11 24       	eor	r1, r1
     19a:	1f be       	out	0x3f, r1	; 63
     19c:	cf ef       	ldi	r28, 0xFF	; 255
     19e:	d1 e2       	ldi	r29, 0x21	; 33
     1a0:	de bf       	out	0x3e, r29	; 62
     1a2:	cd bf       	out	0x3d, r28	; 61
     1a4:	00 e0       	ldi	r16, 0x00	; 0
     1a6:	0c bf       	out	0x3c, r16	; 60

000001a8 <__do_copy_data>:
     1a8:	12 e0       	ldi	r17, 0x02	; 2
     1aa:	a0 e0       	ldi	r26, 0x00	; 0
     1ac:	b2 e0       	ldi	r27, 0x02	; 2
     1ae:	e0 e6       	ldi	r30, 0x60	; 96
     1b0:	f7 e1       	ldi	r31, 0x17	; 23
     1b2:	00 e0       	ldi	r16, 0x00	; 0
     1b4:	0b bf       	out	0x3b, r16	; 59
     1b6:	02 c0       	rjmp	.+4      	; 0x1bc <__do_copy_data+0x14>
     1b8:	07 90       	elpm	r0, Z+
     1ba:	0d 92       	st	X+, r0
     1bc:	a6 32       	cpi	r26, 0x26	; 38
     1be:	b1 07       	cpc	r27, r17
     1c0:	d9 f7       	brne	.-10     	; 0x1b8 <__do_copy_data+0x10>

000001c2 <__do_clear_bss>:
     1c2:	22 e0       	ldi	r18, 0x02	; 2
     1c4:	a6 e2       	ldi	r26, 0x26	; 38
     1c6:	b2 e0       	ldi	r27, 0x02	; 2
     1c8:	01 c0       	rjmp	.+2      	; 0x1cc <.do_clear_bss_start>

000001ca <.do_clear_bss_loop>:
     1ca:	1d 92       	st	X+, r1

000001cc <.do_clear_bss_start>:
     1cc:	aa 32       	cpi	r26, 0x2A	; 42
     1ce:	b2 07       	cpc	r27, r18
     1d0:	e1 f7       	brne	.-8      	; 0x1ca <.do_clear_bss_loop>
     1d2:	4e d5       	rcall	.+2716   	; 0xc70 <main>
     1d4:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <_exit>

000001d8 <__bad_interrupt>:
     1d8:	13 cf       	rjmp	.-474    	; 0x0 <__vectors>

000001da <_ZN3LCD10portConfigEv>:
}

//Function to Initialize PORTS
void LCD::portInit()
{
	portConfig();
     1da:	87 b1       	in	r24, 0x07	; 7
     1dc:	87 6f       	ori	r24, 0xF7	; 247
     1de:	87 b9       	out	0x07, r24	; 7
     1e0:	88 b1       	in	r24, 0x08	; 8
     1e2:	80 78       	andi	r24, 0x80	; 128
     1e4:	88 b9       	out	0x08, r24	; 8
     1e6:	08 95       	ret

000001e8 <_ZN3LCD7set4bitEv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e8:	86 e6       	ldi	r24, 0x66	; 102
     1ea:	9e e0       	ldi	r25, 0x0E	; 14
     1ec:	01 97       	sbiw	r24, 0x01	; 1
     1ee:	f1 f7       	brne	.-4      	; 0x1ec <_ZN3LCD7set4bitEv+0x4>
     1f0:	00 00       	nop
//Function to Reset LCD
void LCD::set4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1f2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1f4:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1f6:	80 e3       	ldi	r24, 0x30	; 48
     1f8:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1fa:	42 9a       	sbi	0x08, 2	; 8
     1fc:	8f ef       	ldi	r24, 0xFF	; 255
     1fe:	97 e4       	ldi	r25, 0x47	; 71
     200:	01 97       	sbiw	r24, 0x01	; 1
     202:	f1 f7       	brne	.-4      	; 0x200 <_ZN3LCD7set4bitEv+0x18>
     204:	00 c0       	rjmp	.+0      	; 0x206 <_ZN3LCD7set4bitEv+0x1e>
     206:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     208:	42 98       	cbi	0x08, 2	; 8
     20a:	86 e6       	ldi	r24, 0x66	; 102
     20c:	9e e0       	ldi	r25, 0x0E	; 14
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	f1 f7       	brne	.-4      	; 0x20e <_ZN3LCD7set4bitEv+0x26>
     212:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     214:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     216:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     218:	80 e3       	ldi	r24, 0x30	; 48
     21a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     21c:	42 9a       	sbi	0x08, 2	; 8
     21e:	8f ef       	ldi	r24, 0xFF	; 255
     220:	97 e4       	ldi	r25, 0x47	; 71
     222:	01 97       	sbiw	r24, 0x01	; 1
     224:	f1 f7       	brne	.-4      	; 0x222 <_ZN3LCD7set4bitEv+0x3a>
     226:	00 c0       	rjmp	.+0      	; 0x228 <_ZN3LCD7set4bitEv+0x40>
     228:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     22a:	42 98       	cbi	0x08, 2	; 8
     22c:	86 e6       	ldi	r24, 0x66	; 102
     22e:	9e e0       	ldi	r25, 0x0E	; 14
     230:	01 97       	sbiw	r24, 0x01	; 1
     232:	f1 f7       	brne	.-4      	; 0x230 <_ZN3LCD7set4bitEv+0x48>
     234:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     236:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     238:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     23a:	80 e3       	ldi	r24, 0x30	; 48
     23c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     23e:	42 9a       	sbi	0x08, 2	; 8
     240:	8f ef       	ldi	r24, 0xFF	; 255
     242:	97 e4       	ldi	r25, 0x47	; 71
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <_ZN3LCD7set4bitEv+0x5c>
     248:	00 c0       	rjmp	.+0      	; 0x24a <_ZN3LCD7set4bitEv+0x62>
     24a:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     24c:	42 98       	cbi	0x08, 2	; 8
     24e:	86 e6       	ldi	r24, 0x66	; 102
     250:	9e e0       	ldi	r25, 0x0E	; 14
     252:	01 97       	sbiw	r24, 0x01	; 1
     254:	f1 f7       	brne	.-4      	; 0x252 <_ZN3LCD7set4bitEv+0x6a>
     256:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     258:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     25a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     25c:	80 e2       	ldi	r24, 0x20	; 32
     25e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     260:	42 9a       	sbi	0x08, 2	; 8
     262:	86 e6       	ldi	r24, 0x66	; 102
     264:	9e e0       	ldi	r25, 0x0E	; 14
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <_ZN3LCD7set4bitEv+0x7e>
     26a:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     26c:	42 98       	cbi	0x08, 2	; 8
     26e:	08 95       	ret

00000270 <_ZN3LCD12writeCommandEh>:
void LCD::writeCommand(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     270:	88 b1       	in	r24, 0x08	; 8
     272:	8f 70       	andi	r24, 0x0F	; 15
     274:	88 b9       	out	0x08, r24	; 8
	lcd_port |= temp;
     276:	88 b1       	in	r24, 0x08	; 8
//Function to Write Command on LCD
void LCD::writeCommand(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     278:	96 2f       	mov	r25, r22
     27a:	90 7f       	andi	r25, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     27c:	89 2b       	or	r24, r25
     27e:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     280:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     282:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     284:	42 9a       	sbi	0x08, 2	; 8
     286:	8f ef       	ldi	r24, 0xFF	; 255
     288:	97 e4       	ldi	r25, 0x47	; 71
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	f1 f7       	brne	.-4      	; 0x28a <_ZN3LCD12writeCommandEh+0x1a>
     28e:	00 c0       	rjmp	.+0      	; 0x290 <_ZN3LCD12writeCommandEh+0x20>
     290:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     292:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     294:	88 b1       	in	r24, 0x08	; 8
     296:	8f 70       	andi	r24, 0x0F	; 15
     298:	88 b9       	out	0x08, r24	; 8
	lcd_port |= cmd;
     29a:	88 b1       	in	r24, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     29c:	62 95       	swap	r22
     29e:	60 7f       	andi	r22, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     2a0:	68 2b       	or	r22, r24
     2a2:	68 b9       	out	0x08, r22	; 8
	cbit(lcd_port,RS);
     2a4:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2a6:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2a8:	42 9a       	sbi	0x08, 2	; 8
     2aa:	8f ef       	ldi	r24, 0xFF	; 255
     2ac:	97 e4       	ldi	r25, 0x47	; 71
     2ae:	01 97       	sbiw	r24, 0x01	; 1
     2b0:	f1 f7       	brne	.-4      	; 0x2ae <_ZN3LCD12writeCommandEh+0x3e>
     2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <_ZN3LCD12writeCommandEh+0x44>
     2b4:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2b6:	42 98       	cbi	0x08, 2	; 8
     2b8:	08 95       	ret

000002ba <_ZN3LCD4initEv>:
	
}

//Function to Initialize LCD
void LCD::init()
{
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	ec 01       	movw	r28, r24
     2c0:	86 e6       	ldi	r24, 0x66	; 102
     2c2:	9e e0       	ldi	r25, 0x0E	; 14
     2c4:	01 97       	sbiw	r24, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <_ZN3LCD4initEv+0xa>
     2c8:	00 00       	nop
	_delay_ms(1);

	writeCommand(0x28);			//LCD 4-bit mode and 2 lines.
     2ca:	68 e2       	ldi	r22, 0x28	; 40
     2cc:	ce 01       	movw	r24, r28
     2ce:	d0 df       	rcall	.-96     	; 0x270 <_ZN3LCD12writeCommandEh>
	writeCommand(0x01);
     2d0:	61 e0       	ldi	r22, 0x01	; 1
     2d2:	ce 01       	movw	r24, r28
     2d4:	cd df       	rcall	.-102    	; 0x270 <_ZN3LCD12writeCommandEh>
	writeCommand(0x06);
     2d6:	66 e0       	ldi	r22, 0x06	; 6
     2d8:	ce 01       	movw	r24, r28
     2da:	ca df       	rcall	.-108    	; 0x270 <_ZN3LCD12writeCommandEh>
	writeCommand(0x0E);
     2dc:	6e e0       	ldi	r22, 0x0E	; 14
     2de:	ce 01       	movw	r24, r28
     2e0:	c7 df       	rcall	.-114    	; 0x270 <_ZN3LCD12writeCommandEh>
	writeCommand(0x80);
     2e2:	60 e8       	ldi	r22, 0x80	; 128
     2e4:	ce 01       	movw	r24, r28
     2e6:	c4 df       	rcall	.-120    	; 0x270 <_ZN3LCD12writeCommandEh>
	
}
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <_ZN3LCDC1Ev>:
 * Created: 07-03-2015 05:52:49 PM
 *  Author: Ajinkya
 */ 
#include "lcd.h"
#include "stdlib.h"
LCD::LCD()
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	ec 01       	movw	r28, r24
}

//Function to Initialize PORTS
void LCD::portInit()
{
	portConfig();
     2f4:	72 df       	rcall	.-284    	; 0x1da <_ZN3LCD10portConfigEv>
#include "lcd.h"
#include "stdlib.h"
LCD::LCD()
{
	portInit();
	set4bit();
     2f6:	ce 01       	movw	r24, r28
     2f8:	77 df       	rcall	.-274    	; 0x1e8 <_ZN3LCD7set4bitEv>
	init();
     2fa:	ce 01       	movw	r24, r28
     2fc:	de df       	rcall	.-68     	; 0x2ba <_ZN3LCD4initEv>
}
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <_ZN3LCD9writeCharEc>:
void LCD::writeChar(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     304:	88 b1       	in	r24, 0x08	; 8
     306:	8f 70       	andi	r24, 0x0F	; 15
     308:	88 b9       	out	0x08, r24	; 8
	lcd_port |= temp;
     30a:	88 b1       	in	r24, 0x08	; 8
//Function to Write Data on LCD
void LCD::writeChar(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     30c:	96 2f       	mov	r25, r22
     30e:	90 7f       	andi	r25, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     310:	89 2b       	or	r24, r25
     312:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     314:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     316:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     318:	42 9a       	sbi	0x08, 2	; 8
     31a:	8f ef       	ldi	r24, 0xFF	; 255
     31c:	97 e4       	ldi	r25, 0x47	; 71
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	f1 f7       	brne	.-4      	; 0x31e <_ZN3LCD9writeCharEc+0x1a>
     322:	00 c0       	rjmp	.+0      	; 0x324 <_ZN3LCD9writeCharEc+0x20>
     324:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     326:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     328:	88 b1       	in	r24, 0x08	; 8
     32a:	8f 70       	andi	r24, 0x0F	; 15
     32c:	88 b9       	out	0x08, r24	; 8
	lcd_port |= letter;
     32e:	88 b1       	in	r24, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     330:	62 95       	swap	r22
     332:	60 7f       	andi	r22, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     334:	68 2b       	or	r22, r24
     336:	68 b9       	out	0x08, r22	; 8
	sbit(lcd_port,RS);
     338:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     33a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     33c:	42 9a       	sbi	0x08, 2	; 8
     33e:	8f ef       	ldi	r24, 0xFF	; 255
     340:	97 e4       	ldi	r25, 0x47	; 71
     342:	01 97       	sbiw	r24, 0x01	; 1
     344:	f1 f7       	brne	.-4      	; 0x342 <_ZN3LCD9writeCharEc+0x3e>
     346:	00 c0       	rjmp	.+0      	; 0x348 <_ZN3LCD9writeCharEc+0x44>
     348:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     34a:	42 98       	cbi	0x08, 2	; 8
     34c:	08 95       	ret

0000034e <_ZN3LCD4homeEv>:


//Function to bring cursor at home position
void LCD::home()
{
	writeCommand(0x80);
     34e:	60 e8       	ldi	r22, 0x80	; 128
     350:	8f cf       	rjmp	.-226    	; 0x270 <_ZN3LCD12writeCommandEh>
     352:	08 95       	ret

00000354 <_ZN3LCD5printEPc>:
}


//Function to Print String on LCD
void LCD::print(char *str)
{
     354:	0f 93       	push	r16
     356:	1f 93       	push	r17
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	8c 01       	movw	r16, r24
     35e:	eb 01       	movw	r28, r22
	while(*str != '\0')
     360:	68 81       	ld	r22, Y
     362:	66 23       	and	r22, r22
     364:	31 f0       	breq	.+12     	; 0x372 <_ZN3LCD5printEPc+0x1e>
     366:	21 96       	adiw	r28, 0x01	; 1
	{
		writeChar(*str);
     368:	c8 01       	movw	r24, r16
     36a:	cc df       	rcall	.-104    	; 0x304 <_ZN3LCD9writeCharEc>


//Function to Print String on LCD
void LCD::print(char *str)
{
	while(*str != '\0')
     36c:	69 91       	ld	r22, Y+
     36e:	61 11       	cpse	r22, r1
     370:	fb cf       	rjmp	.-10     	; 0x368 <_ZN3LCD5printEPc+0x14>
	{
		writeChar(*str);
		str++;
	}
}
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	08 95       	ret

0000037c <_ZN3LCD5printEPKc>:
void LCD::print(const char * str)
{
	print((char*)str);
     37c:	eb cf       	rjmp	.-42     	; 0x354 <_ZN3LCD5printEPc>
     37e:	08 95       	ret

00000380 <_ZN3LCD6cursorEcc>:
//Position the LCD cursor at "row", "column".

void LCD::cursor (char row, char col)
{
	
	switch (row) {
     380:	62 30       	cpi	r22, 0x02	; 2
     382:	69 f0       	breq	.+26     	; 0x39e <_ZN3LCD6cursorEcc+0x1e>
     384:	18 f4       	brcc	.+6      	; 0x38c <_ZN3LCD6cursorEcc+0xc>
     386:	61 30       	cpi	r22, 0x01	; 1
     388:	31 f0       	breq	.+12     	; 0x396 <_ZN3LCD6cursorEcc+0x16>
     38a:	15 c0       	rjmp	.+42     	; 0x3b6 <_ZN3LCD6cursorEcc+0x36>
     38c:	63 30       	cpi	r22, 0x03	; 3
     38e:	59 f0       	breq	.+22     	; 0x3a6 <_ZN3LCD6cursorEcc+0x26>
     390:	64 30       	cpi	r22, 0x04	; 4
     392:	69 f0       	breq	.+26     	; 0x3ae <_ZN3LCD6cursorEcc+0x2e>
     394:	10 c0       	rjmp	.+32     	; 0x3b6 <_ZN3LCD6cursorEcc+0x36>
		case 1: writeCommand (0x80 + col - 1); break;
     396:	6f e7       	ldi	r22, 0x7F	; 127
     398:	64 0f       	add	r22, r20
     39a:	6a cf       	rjmp	.-300    	; 0x270 <_ZN3LCD12writeCommandEh>
     39c:	08 95       	ret
		case 2: writeCommand (0xc0 + col - 1); break;
     39e:	6f eb       	ldi	r22, 0xBF	; 191
     3a0:	64 0f       	add	r22, r20
     3a2:	66 cf       	rjmp	.-308    	; 0x270 <_ZN3LCD12writeCommandEh>
     3a4:	08 95       	ret
		case 3: writeCommand (0x94 + col - 1); break;
     3a6:	63 e9       	ldi	r22, 0x93	; 147
     3a8:	64 0f       	add	r22, r20
     3aa:	62 cf       	rjmp	.-316    	; 0x270 <_ZN3LCD12writeCommandEh>
     3ac:	08 95       	ret
		case 4: writeCommand (0xd4 + col - 1); break;
     3ae:	63 ed       	ldi	r22, 0xD3	; 211
     3b0:	64 0f       	add	r22, r20
     3b2:	5e cf       	rjmp	.-324    	; 0x270 <_ZN3LCD12writeCommandEh>
     3b4:	08 95       	ret
		default: break;
	}
	if(row==0&&col==0)home();
     3b6:	61 11       	cpse	r22, r1
     3b8:	03 c0       	rjmp	.+6      	; 0x3c0 <_ZN3LCD6cursorEcc+0x40>
     3ba:	41 11       	cpse	r20, r1
     3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <_ZN3LCD6cursorEcc+0x40>
     3be:	c7 cf       	rjmp	.-114    	; 0x34e <_ZN3LCD4homeEv>
     3c0:	08 95       	ret

000003c2 <_ZN11morsebuzzer15buzzerPinConfigEv>:
	timeofdit=t;
	buzzerPinConfig();
}
void morsebuzzer::buzzerPinConfig()
{
	DDRC|=0x08;
     3c2:	3b 9a       	sbi	0x07, 3	; 7
	PORTC&=~0x08;		//set it initially low
     3c4:	43 98       	cbi	0x08, 3	; 8
     3c6:	08 95       	ret

000003c8 <_ZN11morsebuzzerC1Ei>:
//between two consecutive letters : 3*dit time
//between two consecutive words	: 7*dit time

morsebuzzer::morsebuzzer (int t)
{
	timeofdit=t;
     3c8:	fc 01       	movw	r30, r24
     3ca:	71 83       	std	Z+1, r23	; 0x01
     3cc:	60 83       	st	Z, r22
	buzzerPinConfig();
     3ce:	f9 cf       	rjmp	.-14     	; 0x3c2 <_ZN11morsebuzzer15buzzerPinConfigEv>
     3d0:	08 95       	ret

000003d2 <_ZN11morsebuzzer8buzzerOnEv>:
		buzzerOff();
		delay(timeofdit);
}
void morsebuzzer::buzzerOn()
{
	PORTC|=0x08;		//set buzzer on 
     3d2:	43 9a       	sbi	0x08, 3	; 8
     3d4:	08 95       	ret

000003d6 <_ZN11morsebuzzer9buzzerOffEv>:
}
void morsebuzzer::buzzerOff()
{
	PORTC&=~0x08;	//set buzzer off
     3d6:	43 98       	cbi	0x08, 3	; 8
     3d8:	08 95       	ret

000003da <_ZN11morsebuzzer5delayEi>:
}
void morsebuzzer::delay(int time_ms)
{
	while(time_ms--)
     3da:	61 15       	cp	r22, r1
     3dc:	71 05       	cpc	r23, r1
     3de:	51 f0       	breq	.+20     	; 0x3f4 <_ZN11morsebuzzer5delayEi+0x1a>
     3e0:	86 e6       	ldi	r24, 0x66	; 102
     3e2:	9e e0       	ldi	r25, 0x0E	; 14
     3e4:	01 97       	sbiw	r24, 0x01	; 1
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <_ZN11morsebuzzer5delayEi+0xa>
     3e8:	00 00       	nop
     3ea:	61 50       	subi	r22, 0x01	; 1
     3ec:	71 09       	sbc	r23, r1
     3ee:	61 15       	cp	r22, r1
     3f0:	71 05       	cpc	r23, r1
     3f2:	b1 f7       	brne	.-20     	; 0x3e0 <_ZN11morsebuzzer5delayEi+0x6>
     3f4:	08 95       	ret

000003f6 <_ZN11morsebuzzer11transmitDitEv>:
void morsebuzzer::morseTransmit(const char * str)
{
	morseTransmit((char*)str);
}
void morsebuzzer::transmitDit()
{
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	ec 01       	movw	r28, r24
	buzzerOn();
     3fc:	ea df       	rcall	.-44     	; 0x3d2 <_ZN11morsebuzzer8buzzerOnEv>
	delay(timeofdit);
     3fe:	68 81       	ld	r22, Y
     400:	79 81       	ldd	r23, Y+1	; 0x01
     402:	ce 01       	movw	r24, r28
     404:	ea df       	rcall	.-44     	; 0x3da <_ZN11morsebuzzer5delayEi>
	buzzerOff();
     406:	ce 01       	movw	r24, r28
     408:	e6 df       	rcall	.-52     	; 0x3d6 <_ZN11morsebuzzer9buzzerOffEv>
	delay(timeofdit);
     40a:	68 81       	ld	r22, Y
     40c:	79 81       	ldd	r23, Y+1	; 0x01
     40e:	ce 01       	movw	r24, r28
     410:	e4 df       	rcall	.-56     	; 0x3da <_ZN11morsebuzzer5delayEi>
	
}
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	08 95       	ret

00000418 <_ZN11morsebuzzer11transmitDahEv>:
void morsebuzzer::transmitDah()
{
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	ec 01       	movw	r28, r24
		buzzerOn();
     41e:	d9 df       	rcall	.-78     	; 0x3d2 <_ZN11morsebuzzer8buzzerOnEv>
		delay(3*timeofdit);
     420:	88 81       	ld	r24, Y
     422:	99 81       	ldd	r25, Y+1	; 0x01
     424:	bc 01       	movw	r22, r24
     426:	66 0f       	add	r22, r22
     428:	77 1f       	adc	r23, r23
     42a:	68 0f       	add	r22, r24
     42c:	79 1f       	adc	r23, r25
     42e:	ce 01       	movw	r24, r28
     430:	d4 df       	rcall	.-88     	; 0x3da <_ZN11morsebuzzer5delayEi>
		buzzerOff();
     432:	ce 01       	movw	r24, r28
     434:	d0 df       	rcall	.-96     	; 0x3d6 <_ZN11morsebuzzer9buzzerOffEv>
		delay(timeofdit);
     436:	68 81       	ld	r22, Y
     438:	79 81       	ldd	r23, Y+1	; 0x01
     43a:	ce 01       	movw	r24, r28
     43c:	ce df       	rcall	.-100    	; 0x3da <_ZN11morsebuzzer5delayEi>
}
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	08 95       	ret

00000444 <_ZN11morsebuzzer13morseTransmitEc>:
	PORTC&=~0x08;		//set it initially low
}


void morsebuzzer::morseTransmit(char data)
{
     444:	af 92       	push	r10
     446:	bf 92       	push	r11
     448:	cf 92       	push	r12
     44a:	df 92       	push	r13
     44c:	ef 92       	push	r14
     44e:	ff 92       	push	r15
     450:	0f 93       	push	r16
     452:	1f 93       	push	r17
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
     45c:	27 97       	sbiw	r28, 0x07	; 7
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	de bf       	out	0x3e, r29	; 62
     464:	0f be       	out	0x3f, r0	; 63
     466:	cd bf       	out	0x3d, r28	; 61
     468:	5c 01       	movw	r10, r24
	char str1[7];
    int j=0;
	
		
		switch(toupper(data))
     46a:	86 2f       	mov	r24, r22
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	ac d6       	rcall	.+3416   	; 0x11c8 <toupper>
     470:	80 97       	sbiw	r24, 0x20	; 32
     472:	8a 35       	cpi	r24, 0x5A	; 90
     474:	91 05       	cpc	r25, r1
     476:	08 f0       	brcs	.+2      	; 0x47a <_ZN11morsebuzzer13morseTransmitEc+0x36>
     478:	70 c1       	rjmp	.+736    	; 0x75a <_ZN11morsebuzzer13morseTransmitEc+0x316>
     47a:	8e 58       	subi	r24, 0x8E	; 142
     47c:	9f 4f       	sbci	r25, 0xFF	; 255
     47e:	fc 01       	movw	r30, r24
     480:	9d c6       	rjmp	.+3386   	; 0x11bc <__tablejump2__>
		{
			  case ' ':					//if space ie , 7 dits buzzer=>low
			  buzzerOff();
     482:	c5 01       	movw	r24, r10
     484:	a8 df       	rcall	.-176    	; 0x3d6 <_ZN11morsebuzzer9buzzerOffEv>
			  delay(timeofdit*7);
     486:	f5 01       	movw	r30, r10
     488:	80 81       	ld	r24, Z
     48a:	91 81       	ldd	r25, Z+1	; 0x01
     48c:	bc 01       	movw	r22, r24
     48e:	66 0f       	add	r22, r22
     490:	77 1f       	adc	r23, r23
     492:	66 0f       	add	r22, r22
     494:	77 1f       	adc	r23, r23
     496:	66 0f       	add	r22, r22
     498:	77 1f       	adc	r23, r23
     49a:	68 1b       	sub	r22, r24
     49c:	79 0b       	sbc	r23, r25
     49e:	c5 01       	movw	r24, r10
     4a0:	9c df       	rcall	.-200    	; 0x3da <_ZN11morsebuzzer5delayEi>
     4a2:	87 c1       	rjmp	.+782    	; 0x7b2 <_ZN11morsebuzzer13morseTransmitEc+0x36e>
			  return;					//return for end of transmission
			  case 'A':
			  str1[j++]='1';
     4a4:	81 e3       	ldi	r24, 0x31	; 49
     4a6:	89 83       	std	Y+1, r24	; 0x01
			  str1[j]='3';
     4a8:	83 e3       	ldi	r24, 0x33	; 51
     4aa:	8a 83       	std	Y+2, r24	; 0x02
			  case ' ':					//if space ie , 7 dits buzzer=>low
			  buzzerOff();
			  delay(timeofdit*7);
			  return;					//return for end of transmission
			  case 'A':
			  str1[j++]='1';
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     4b0:	72 c1       	rjmp	.+740    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'B':
			  str1[j++]='3';
     4b2:	83 e3       	ldi	r24, 0x33	; 51
     4b4:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     4b6:	81 e3       	ldi	r24, 0x31	; 49
     4b8:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
     4ba:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='1';
     4bc:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case 'B':
			  str1[j++]='3';
			  str1[j++]='1';
			  str1[j++]='1';
     4be:	83 e0       	ldi	r24, 0x03	; 3
     4c0:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     4c2:	69 c1       	rjmp	.+722    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'C':
			  str1[j++]='3';
     4c4:	93 e3       	ldi	r25, 0x33	; 51
     4c6:	99 83       	std	Y+1, r25	; 0x01
			  str1[j++]='1';
     4c8:	81 e3       	ldi	r24, 0x31	; 49
     4ca:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='3';
     4cc:	9b 83       	std	Y+3, r25	; 0x03
			  str1[j]='1';
     4ce:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case 'C':
			  str1[j++]='3';
			  str1[j++]='1';
			  str1[j++]='3';
     4d0:	83 e0       	ldi	r24, 0x03	; 3
     4d2:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     4d4:	60 c1       	rjmp	.+704    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'D':
			  str1[j++]='3';
     4d6:	83 e3       	ldi	r24, 0x33	; 51
     4d8:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     4da:	81 e3       	ldi	r24, 0x31	; 49
     4dc:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j]='1';
     4de:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='1';
			  break;
			  
			  case 'D':
			  str1[j++]='3';
			  str1[j++]='1';
     4e0:	82 e0       	ldi	r24, 0x02	; 2
     4e2:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     4e4:	58 c1       	rjmp	.+688    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'E':
			  str1[j]='1';
     4e6:	81 e3       	ldi	r24, 0x31	; 49
     4e8:	89 83       	std	Y+1, r24	; 0x01


void morsebuzzer::morseTransmit(char data)
{
	char str1[7];
    int j=0;
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
			  
			  case 'E':
			  str1[j]='1';
			  break;
     4ee:	53 c1       	rjmp	.+678    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'F':
			  str1[j++]='1';
     4f0:	81 e3       	ldi	r24, 0x31	; 49
     4f2:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     4f4:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='3';
     4f6:	93 e3       	ldi	r25, 0x33	; 51
     4f8:	9b 83       	std	Y+3, r25	; 0x03
			  str1[j]='1';
     4fa:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case 'F':
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='3';
     4fc:	83 e0       	ldi	r24, 0x03	; 3
     4fe:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     500:	4a c1       	rjmp	.+660    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'G':
			  str1[j++]='3';
     502:	83 e3       	ldi	r24, 0x33	; 51
     504:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     506:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j]='1';
     508:	81 e3       	ldi	r24, 0x31	; 49
     50a:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='1';
			  break;
			  
			  case 'G':
			  str1[j++]='3';
			  str1[j++]='3';
     50c:	82 e0       	ldi	r24, 0x02	; 2
     50e:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     510:	42 c1       	rjmp	.+644    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'H':
			  str1[j++]='1';
     512:	81 e3       	ldi	r24, 0x31	; 49
     514:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     516:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
     518:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='1';
     51a:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case 'H':
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='1';
     51c:	83 e0       	ldi	r24, 0x03	; 3
     51e:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     520:	3a c1       	rjmp	.+628    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'I':
			  str1[j++]='1';
     522:	81 e3       	ldi	r24, 0x31	; 49
     524:	89 83       	std	Y+1, r24	; 0x01
			  str1[j]='1';
     526:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
			  str1[j]='1';
			  break;
			  
			  case 'I':
			  str1[j++]='1';
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     52c:	34 c1       	rjmp	.+616    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'J':
			  str1[j++]='1';
     52e:	81 e3       	ldi	r24, 0x31	; 49
     530:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     532:	83 e3       	ldi	r24, 0x33	; 51
     534:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='3';
     536:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='3';
     538:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case 'J':
			  str1[j++]='1';
			  str1[j++]='3';
			  str1[j++]='3';
     53a:	83 e0       	ldi	r24, 0x03	; 3
     53c:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     53e:	2b c1       	rjmp	.+598    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'K':
			  str1[j++]='3';
     540:	83 e3       	ldi	r24, 0x33	; 51
     542:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     544:	91 e3       	ldi	r25, 0x31	; 49
     546:	9a 83       	std	Y+2, r25	; 0x02
			  str1[j]='3';
     548:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='3';
			  break;
			  
			  case 'K':
			  str1[j++]='3';
			  str1[j++]='1';
     54a:	82 e0       	ldi	r24, 0x02	; 2
     54c:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     54e:	23 c1       	rjmp	.+582    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'L':
			  str1[j++]='1';
     550:	81 e3       	ldi	r24, 0x31	; 49
     552:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     554:	93 e3       	ldi	r25, 0x33	; 51
     556:	9a 83       	std	Y+2, r25	; 0x02
			  str1[j++]='1';
     558:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='1';
     55a:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case 'L':
			  str1[j++]='1';
			  str1[j++]='3';
			  str1[j++]='1';
     55c:	83 e0       	ldi	r24, 0x03	; 3
     55e:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     560:	1a c1       	rjmp	.+564    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'M':
			  str1[j++]='3';
     562:	83 e3       	ldi	r24, 0x33	; 51
     564:	89 83       	std	Y+1, r24	; 0x01
			  str1[j]='3';
     566:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
			  str1[j]='1';
			  break;
			  
			  case 'M':
			  str1[j++]='3';
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     56c:	14 c1       	rjmp	.+552    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'N':
			  str1[j++]='3';
     56e:	83 e3       	ldi	r24, 0x33	; 51
     570:	89 83       	std	Y+1, r24	; 0x01
			  str1[j]='1';
     572:	81 e3       	ldi	r24, 0x31	; 49
     574:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='3';
			  str1[j]='3';
			  break;
			  
			  case 'N':
			  str1[j++]='3';
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     57a:	0d c1       	rjmp	.+538    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'O':
			  str1[j++]='3';
     57c:	83 e3       	ldi	r24, 0x33	; 51
     57e:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     580:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j]='3';
     582:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='1';
			  break;
			  
			  case 'O':
			  str1[j++]='3';
			  str1[j++]='3';
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     588:	06 c1       	rjmp	.+524    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'P':
			  str1[j++]='1';
     58a:	81 e3       	ldi	r24, 0x31	; 49
     58c:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     58e:	93 e3       	ldi	r25, 0x33	; 51
     590:	9a 83       	std	Y+2, r25	; 0x02
			  str1[j++]='3';
     592:	9b 83       	std	Y+3, r25	; 0x03
			  str1[j]='1';
     594:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case 'P':
			  str1[j++]='1';
			  str1[j++]='3';
			  str1[j++]='3';
     596:	83 e0       	ldi	r24, 0x03	; 3
     598:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     59a:	fd c0       	rjmp	.+506    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'Q':
			  str1[j++]='3';
     59c:	83 e3       	ldi	r24, 0x33	; 51
     59e:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     5a0:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
     5a2:	91 e3       	ldi	r25, 0x31	; 49
     5a4:	9b 83       	std	Y+3, r25	; 0x03
			  str1[j]='3';
     5a6:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case 'Q':
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='1';
     5a8:	83 e0       	ldi	r24, 0x03	; 3
     5aa:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     5ac:	f4 c0       	rjmp	.+488    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'R':
			  str1[j++]='1';
     5ae:	81 e3       	ldi	r24, 0x31	; 49
     5b0:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     5b2:	93 e3       	ldi	r25, 0x33	; 51
     5b4:	9a 83       	std	Y+2, r25	; 0x02
			  str1[j]='1';
     5b6:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='3';
			  break;
			  
			  case 'R':
			  str1[j++]='1';
			  str1[j++]='3';
     5b8:	82 e0       	ldi	r24, 0x02	; 2
     5ba:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     5bc:	ec c0       	rjmp	.+472    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'S':
			  str1[j++]='1';
     5be:	81 e3       	ldi	r24, 0x31	; 49
     5c0:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     5c2:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j]='1';
     5c4:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='1';
			  break;
			  
			  case 'S':
			  str1[j++]='1';
			  str1[j++]='1';
     5c6:	82 e0       	ldi	r24, 0x02	; 2
     5c8:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     5ca:	e5 c0       	rjmp	.+458    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'T':
			  str1[j]='3';
     5cc:	83 e3       	ldi	r24, 0x33	; 51
     5ce:	89 83       	std	Y+1, r24	; 0x01


void morsebuzzer::morseTransmit(char data)
{
	char str1[7];
    int j=0;
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
			  
			  case 'T':
			  str1[j]='3';
			  break;
     5d4:	e0 c0       	rjmp	.+448    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'U':
			  str1[j++]='1';
     5d6:	81 e3       	ldi	r24, 0x31	; 49
     5d8:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     5da:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j]='3';
     5dc:	83 e3       	ldi	r24, 0x33	; 51
     5de:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='3';
			  break;
			  
			  case 'U':
			  str1[j++]='1';
			  str1[j++]='1';
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     5e4:	d8 c0       	rjmp	.+432    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'V':
			  str1[j++]='1';
     5e6:	81 e3       	ldi	r24, 0x31	; 49
     5e8:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     5ea:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
     5ec:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='3';
     5ee:	83 e3       	ldi	r24, 0x33	; 51
     5f0:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case 'V':
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='1';
     5f2:	83 e0       	ldi	r24, 0x03	; 3
     5f4:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     5f6:	cf c0       	rjmp	.+414    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'W':
			  str1[j++]='1';
     5f8:	81 e3       	ldi	r24, 0x31	; 49
     5fa:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     5fc:	83 e3       	ldi	r24, 0x33	; 51
     5fe:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j]='3';
     600:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='3';
			  break;
			  
			  case 'W':
			  str1[j++]='1';
			  str1[j++]='3';
     602:	82 e0       	ldi	r24, 0x02	; 2
     604:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     606:	c7 c0       	rjmp	.+398    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'X':
			  str1[j++]='3';
     608:	83 e3       	ldi	r24, 0x33	; 51
     60a:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     60c:	91 e3       	ldi	r25, 0x31	; 49
     60e:	9a 83       	std	Y+2, r25	; 0x02
			  str1[j++]='1';
     610:	9b 83       	std	Y+3, r25	; 0x03
			  str1[j]='3';
     612:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case 'X':
			  str1[j++]='3';
			  str1[j++]='1';
			  str1[j++]='1';
     614:	83 e0       	ldi	r24, 0x03	; 3
     616:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     618:	be c0       	rjmp	.+380    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'y':
			  str1[j++]='3';
     61a:	83 e3       	ldi	r24, 0x33	; 51
     61c:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     61e:	91 e3       	ldi	r25, 0x31	; 49
     620:	9a 83       	std	Y+2, r25	; 0x02
			  str1[j++]='3';
     622:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='3';
     624:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case 'y':
			  str1[j++]='3';
			  str1[j++]='1';
			  str1[j++]='3';
     626:	83 e0       	ldi	r24, 0x03	; 3
     628:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     62a:	b5 c0       	rjmp	.+362    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'Z':
			  str1[j++]='3';
     62c:	83 e3       	ldi	r24, 0x33	; 51
     62e:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     630:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
     632:	81 e3       	ldi	r24, 0x31	; 49
     634:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='1';
     636:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case 'Z':
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='1';
     638:	83 e0       	ldi	r24, 0x03	; 3
     63a:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     63c:	ac c0       	rjmp	.+344    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case '0':
			  str1[j++]='3';
     63e:	83 e3       	ldi	r24, 0x33	; 51
     640:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     642:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='3';
     644:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j++]='3';
     646:	8c 83       	std	Y+4, r24	; 0x04
			  str1[j]='3';
     648:	8d 83       	std	Y+5, r24	; 0x05
			  
			  case '0':
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='3';
     64a:	84 e0       	ldi	r24, 0x04	; 4
     64c:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     64e:	a3 c0       	rjmp	.+326    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case '1':
			  str1[j++]='1';
     650:	81 e3       	ldi	r24, 0x31	; 49
     652:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     654:	83 e3       	ldi	r24, 0x33	; 51
     656:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='3';
     658:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j++]='3';
     65a:	8c 83       	std	Y+4, r24	; 0x04
			  str1[j]='3';
     65c:	8d 83       	std	Y+5, r24	; 0x05
			  
			  case '1':
			  str1[j++]='1';
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='3';
     65e:	84 e0       	ldi	r24, 0x04	; 4
     660:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     662:	99 c0       	rjmp	.+306    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case '2':
			  str1[j++]='1';
     664:	81 e3       	ldi	r24, 0x31	; 49
     666:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     668:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='3';
     66a:	83 e3       	ldi	r24, 0x33	; 51
     66c:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j+1]='3';
     66e:	8d 83       	std	Y+5, r24	; 0x05
			  str1[j]='3';
     670:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case '2':
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='3';
     672:	83 e0       	ldi	r24, 0x03	; 3
     674:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j+1]='3';
			  str1[j]='3';
			  break;
     676:	8f c0       	rjmp	.+286    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case '3':
			  str1[j++]='1';
     678:	81 e3       	ldi	r24, 0x31	; 49
     67a:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     67c:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
     67e:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j++]='3';
     680:	83 e3       	ldi	r24, 0x33	; 51
     682:	8c 83       	std	Y+4, r24	; 0x04
			  str1[j]='3';
     684:	8d 83       	std	Y+5, r24	; 0x05
			  
			  case '3':
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='3';
     686:	84 e0       	ldi	r24, 0x04	; 4
     688:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     68a:	85 c0       	rjmp	.+266    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  
			  case '4':
			  str1[j++]='1';
     68c:	81 e3       	ldi	r24, 0x31	; 49
     68e:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     690:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
     692:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j++]='1';
     694:	8c 83       	std	Y+4, r24	; 0x04
			  str1[j]='3';
     696:	83 e3       	ldi	r24, 0x33	; 51
     698:	8d 83       	std	Y+5, r24	; 0x05
			  
			  case '4':
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='1';
     69a:	84 e0       	ldi	r24, 0x04	; 4
     69c:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     69e:	7b c0       	rjmp	.+246    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case '5':
			  str1[j++]='1';
     6a0:	81 e3       	ldi	r24, 0x31	; 49
     6a2:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     6a4:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
     6a6:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j++]='1';
     6a8:	8c 83       	std	Y+4, r24	; 0x04
			  str1[j]='1';
     6aa:	8d 83       	std	Y+5, r24	; 0x05
			  
			  case '5':
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='1';
     6ac:	84 e0       	ldi	r24, 0x04	; 4
     6ae:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     6b0:	72 c0       	rjmp	.+228    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case '6':
			  str1[j++]='3';
     6b2:	83 e3       	ldi	r24, 0x33	; 51
     6b4:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     6b6:	81 e3       	ldi	r24, 0x31	; 49
     6b8:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
     6ba:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j++]='1';
     6bc:	8c 83       	std	Y+4, r24	; 0x04
			  str1[j]='1';
     6be:	8d 83       	std	Y+5, r24	; 0x05
			  
			  case '6':
			  str1[j++]='3';
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='1';
     6c0:	84 e0       	ldi	r24, 0x04	; 4
     6c2:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     6c4:	68 c0       	rjmp	.+208    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case '7':
			  str1[j++]='3';
     6c6:	83 e3       	ldi	r24, 0x33	; 51
     6c8:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     6ca:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
     6cc:	81 e3       	ldi	r24, 0x31	; 49
     6ce:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j++]='1';
     6d0:	8c 83       	std	Y+4, r24	; 0x04
			  str1[j]='1';
     6d2:	8d 83       	std	Y+5, r24	; 0x05
			  
			  case '7':
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='1';
			  str1[j++]='1';
     6d4:	84 e0       	ldi	r24, 0x04	; 4
     6d6:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     6d8:	5e c0       	rjmp	.+188    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case '8':
			  str1[j++]='3';
     6da:	83 e3       	ldi	r24, 0x33	; 51
     6dc:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     6de:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='3';
     6e0:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j++]='1';
     6e2:	81 e3       	ldi	r24, 0x31	; 49
     6e4:	8c 83       	std	Y+4, r24	; 0x04
			  str1[j]='1';
     6e6:	8d 83       	std	Y+5, r24	; 0x05
			  
			  case '8':
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='1';
     6e8:	84 e0       	ldi	r24, 0x04	; 4
     6ea:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     6ec:	54 c0       	rjmp	.+168    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case '9':
			  str1[j++]='3';
     6ee:	83 e3       	ldi	r24, 0x33	; 51
     6f0:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     6f2:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='3';
     6f4:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j++]='3';
     6f6:	8c 83       	std	Y+4, r24	; 0x04
			  str1[j]='1';
     6f8:	81 e3       	ldi	r24, 0x31	; 49
     6fa:	8d 83       	std	Y+5, r24	; 0x05
			  
			  case '9':
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='3';
     6fc:	84 e0       	ldi	r24, 0x04	; 4
     6fe:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     700:	4a c0       	rjmp	.+148    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case '.':
			  str1[j++]='1';
     702:	91 e3       	ldi	r25, 0x31	; 49
     704:	99 83       	std	Y+1, r25	; 0x01
			  str1[j++]='3';
     706:	83 e3       	ldi	r24, 0x33	; 51
     708:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
     70a:	9b 83       	std	Y+3, r25	; 0x03
			  str1[j++]='3';
     70c:	8c 83       	std	Y+4, r24	; 0x04
			  str1[j++]='1';
     70e:	9d 83       	std	Y+5, r25	; 0x05
			  str1[j]='3';
     710:	8e 83       	std	Y+6, r24	; 0x06
			  case '.':
			  str1[j++]='1';
			  str1[j++]='3';
			  str1[j++]='1';
			  str1[j++]='3';
			  str1[j++]='1';
     712:	85 e0       	ldi	r24, 0x05	; 5
     714:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     716:	3f c0       	rjmp	.+126    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case ',':
			  str1[j++]='3';
     718:	83 e3       	ldi	r24, 0x33	; 51
     71a:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     71c:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
     71e:	91 e3       	ldi	r25, 0x31	; 49
     720:	9b 83       	std	Y+3, r25	; 0x03
			  str1[j++]='1';
     722:	9c 83       	std	Y+4, r25	; 0x04
			  str1[j++]='3';
     724:	8d 83       	std	Y+5, r24	; 0x05
			  str1[j]='3';
     726:	8e 83       	std	Y+6, r24	; 0x06
			  case ',':
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='3';
     728:	85 e0       	ldi	r24, 0x05	; 5
     72a:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     72c:	34 c0       	rjmp	.+104    	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case ':':
			  str1[j++]='3';
     72e:	83 e3       	ldi	r24, 0x33	; 51
     730:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     732:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='3';
     734:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j++]='1';
     736:	81 e3       	ldi	r24, 0x31	; 49
     738:	8c 83       	std	Y+4, r24	; 0x04
			  str1[j++]='1';
     73a:	8d 83       	std	Y+5, r24	; 0x05
			  str1[j]='1';
     73c:	8e 83       	std	Y+6, r24	; 0x06
			  case ':':
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='1';
			  str1[j++]='1';
     73e:	85 e0       	ldi	r24, 0x05	; 5
     740:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     742:	29 c0       	rjmp	.+82     	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case '?':
			  str1[j++]='1';
     744:	81 e3       	ldi	r24, 0x31	; 49
     746:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     748:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='3';
     74a:	93 e3       	ldi	r25, 0x33	; 51
     74c:	9b 83       	std	Y+3, r25	; 0x03
			  str1[j++]='3';
     74e:	9c 83       	std	Y+4, r25	; 0x04
			  str1[j++]='1';
     750:	8d 83       	std	Y+5, r24	; 0x05
			  str1[j]='1';
     752:	8e 83       	std	Y+6, r24	; 0x06
			  case '?':
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='1';
     754:	85 e0       	ldi	r24, 0x05	; 5
     756:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     758:	1e c0       	rjmp	.+60     	; 0x796 <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  default:
			  break;
		}
	    j++;
	
	str1[j]='\0';
     75a:	1a 82       	std	Y+2, r1	; 0x02
			  break;
			  
			  default:
			  break;
		}
	    j++;
     75c:	cc 24       	eor	r12, r12
     75e:	c3 94       	inc	r12
     760:	d1 2c       	mov	r13, r1
     762:	21 c0       	rjmp	.+66     	; 0x7a6 <_ZN11morsebuzzer13morseTransmitEc+0x362>
	
	str1[j]='\0';
	for(int i=0;i<j;i++)
	{
		if(str1[i]=='1')
     764:	f7 01       	movw	r30, r14
     766:	81 91       	ld	r24, Z+
     768:	7f 01       	movw	r14, r30
     76a:	81 33       	cpi	r24, 0x31	; 49
     76c:	19 f4       	brne	.+6      	; 0x774 <_ZN11morsebuzzer13morseTransmitEc+0x330>
		{
		transmitDit();	
     76e:	c5 01       	movw	r24, r10
     770:	42 de       	rcall	.-892    	; 0x3f6 <_ZN11morsebuzzer11transmitDitEv>
     772:	04 c0       	rjmp	.+8      	; 0x77c <_ZN11morsebuzzer13morseTransmitEc+0x338>
		}
		else if(str1[i]=='3')
     774:	83 33       	cpi	r24, 0x33	; 51
     776:	11 f4       	brne	.+4      	; 0x77c <_ZN11morsebuzzer13morseTransmitEc+0x338>
		{
		transmitDah();
     778:	c5 01       	movw	r24, r10
     77a:	4e de       	rcall	.-868    	; 0x418 <_ZN11morsebuzzer11transmitDahEv>
			  break;
		}
	    j++;
	
	str1[j]='\0';
	for(int i=0;i<j;i++)
     77c:	0f 5f       	subi	r16, 0xFF	; 255
     77e:	1f 4f       	sbci	r17, 0xFF	; 255
     780:	0c 15       	cp	r16, r12
     782:	1d 05       	cpc	r17, r13
     784:	7c f3       	brlt	.-34     	; 0x764 <_ZN11morsebuzzer13morseTransmitEc+0x320>
		{
		transmitDah();
		}
		else continue;
	}
	delay(2*timeofdit);			//end of transmission
     786:	f5 01       	movw	r30, r10
     788:	60 81       	ld	r22, Z
     78a:	71 81       	ldd	r23, Z+1	; 0x01
     78c:	66 0f       	add	r22, r22
     78e:	77 1f       	adc	r23, r23
     790:	c5 01       	movw	r24, r10
     792:	23 de       	rcall	.-954    	; 0x3da <_ZN11morsebuzzer5delayEi>
     794:	0e c0       	rjmp	.+28     	; 0x7b2 <_ZN11morsebuzzer13morseTransmitEc+0x36e>
			  break;
			  
			  default:
			  break;
		}
	    j++;
     796:	6c 01       	movw	r12, r24
     798:	ff ef       	ldi	r31, 0xFF	; 255
     79a:	cf 1a       	sub	r12, r31
     79c:	df 0a       	sbc	r13, r31
	
	str1[j]='\0';
     79e:	fe 01       	movw	r30, r28
     7a0:	ec 0d       	add	r30, r12
     7a2:	fd 1d       	adc	r31, r13
     7a4:	11 82       	std	Z+1, r1	; 0x01
     7a6:	ce 01       	movw	r24, r28
     7a8:	01 96       	adiw	r24, 0x01	; 1
     7aa:	7c 01       	movw	r14, r24
	PORTC&=~0x08;		//set it initially low
}


void morsebuzzer::morseTransmit(char data)
{
     7ac:	00 e0       	ldi	r16, 0x00	; 0
     7ae:	10 e0       	ldi	r17, 0x00	; 0
     7b0:	d9 cf       	rjmp	.-78     	; 0x764 <_ZN11morsebuzzer13morseTransmitEc+0x320>
	transmitDah();
	transmitDah();
	delay(2*timeofdit);			//2*tDit because one dit time delay occured in transmit sequence =>>total 3*tDit between letters
	
	*/
}
     7b2:	27 96       	adiw	r28, 0x07	; 7
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	f8 94       	cli
     7b8:	de bf       	out	0x3e, r29	; 62
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	cd bf       	out	0x3d, r28	; 61
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	1f 91       	pop	r17
     7c4:	0f 91       	pop	r16
     7c6:	ff 90       	pop	r15
     7c8:	ef 90       	pop	r14
     7ca:	df 90       	pop	r13
     7cc:	cf 90       	pop	r12
     7ce:	bf 90       	pop	r11
     7d0:	af 90       	pop	r10
     7d2:	08 95       	ret

000007d4 <_ZN11morsebuzzer13morseTransmitEPc>:
void morsebuzzer::morseTransmit( char* str)
{
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	8c 01       	movw	r16, r24
     7de:	eb 01       	movw	r28, r22
	while(*str)
     7e0:	68 81       	ld	r22, Y
     7e2:	66 23       	and	r22, r22
     7e4:	31 f0       	breq	.+12     	; 0x7f2 <_ZN11morsebuzzer13morseTransmitEPc+0x1e>
     7e6:	21 96       	adiw	r28, 0x01	; 1
	{
		morseTransmit((char)(*str));
     7e8:	c8 01       	movw	r24, r16
     7ea:	2c de       	rcall	.-936    	; 0x444 <_ZN11morsebuzzer13morseTransmitEc>
	
	*/
}
void morsebuzzer::morseTransmit( char* str)
{
	while(*str)
     7ec:	69 91       	ld	r22, Y+
     7ee:	61 11       	cpse	r22, r1
     7f0:	fb cf       	rjmp	.-10     	; 0x7e8 <_ZN11morsebuzzer13morseTransmitEPc+0x14>
	{
		morseTransmit((char)(*str));
		str++;
	}
}
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	08 95       	ret

000007fc <_ZN11morsebuzzer13morseTransmitEPKc>:

void morsebuzzer::morseTransmit(const char * str)
{
	morseTransmit((char*)str);
     7fc:	eb cf       	rjmp	.-42     	; 0x7d4 <_ZN11morsebuzzer13morseTransmitEPc>
     7fe:	08 95       	ret

00000800 <_ZN9Processor12motionConfigEv>:
		moveMotorBackward();
		return 0;
	}			
	else
		return -1;		
}
     800:	81 b1       	in	r24, 0x01	; 1
     802:	8f 60       	ori	r24, 0x0F	; 15
     804:	81 b9       	out	0x01, r24	; 1
     806:	82 b1       	in	r24, 0x02	; 2
     808:	12 b8       	out	0x02, r1	; 2
     80a:	ea e0       	ldi	r30, 0x0A	; 10
     80c:	f1 e0       	ldi	r31, 0x01	; 1
     80e:	80 81       	ld	r24, Z
     810:	88 61       	ori	r24, 0x18	; 24
     812:	80 83       	st	Z, r24
     814:	eb e0       	ldi	r30, 0x0B	; 11
     816:	f1 e0       	ldi	r31, 0x01	; 1
     818:	80 81       	ld	r24, Z
     81a:	88 61       	ori	r24, 0x18	; 24
     81c:	80 83       	st	Z, r24
     81e:	08 95       	ret

00000820 <_ZN9ProcessorC1Ev>:
	motorStop();
	//_delay_ms(2000);
}
Processor::Processor()
{
	motionConfig();		//initialise the pins 
     820:	ef cf       	rjmp	.-34     	; 0x800 <_ZN9Processor12motionConfigEv>
     822:	08 95       	ret

00000824 <_ZN5pulseC1Ev>:
*initialises related variables
* default WPM, timeout, threshold time(min), max threshold time, errorchecking and tolerance to given value
************************************************************************/
pulse::pulse()
{
	pulseData.ifData=0;		//set validity of data to invalid
     824:	fc 01       	movw	r30, r24
     826:	14 86       	std	Z+12, r1	; 0x0c
	timeout=2;				//timeout in ms for getting pulse
     828:	ed 59       	subi	r30, 0x9D	; 157
     82a:	ff 4f       	sbci	r31, 0xFF	; 255
     82c:	22 e0       	ldi	r18, 0x02	; 2
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	31 83       	std	Z+1, r19	; 0x01
     832:	20 83       	st	Z, r18
	wordsPerMinute=30;		//WPM of morse code
     834:	3a 96       	adiw	r30, 0x0a	; 10
     836:	2e e1       	ldi	r18, 0x1E	; 30
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	31 83       	std	Z+1, r19	; 0x01
     83c:	20 83       	st	Z, r18
	tDit=1200/wordsPerMinute;	//calculates time of dits given WPM		
     83e:	34 97       	sbiw	r30, 0x04	; 4
     840:	28 e2       	ldi	r18, 0x28	; 40
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	31 83       	std	Z+1, r19	; 0x01
     846:	20 83       	st	Z, r18
	tDah=3*tDit;				//calculates time of dahs from tDit
     848:	32 96       	adiw	r30, 0x02	; 2
     84a:	28 e7       	ldi	r18, 0x78	; 120
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	31 83       	std	Z+1, r19	; 0x01
     850:	20 83       	st	Z, r18
	thresholdTime=tDit/2;		//used for removal of pulses of length less than it (in ms)	must be +ve assume tdit >20
     852:	36 97       	sbiw	r30, 0x06	; 6
     854:	24 e1       	ldi	r18, 0x14	; 20
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	31 83       	std	Z+1, r19	; 0x01
     85a:	20 83       	st	Z, r18
	maxThresholdTime=(tDah*3)/2;	//used for removal of pulses of length more than it (in ms)	[threshold times doesn't account in errorCheck , removed in capture sequence]
     85c:	32 96       	adiw	r30, 0x02	; 2
     85e:	44 eb       	ldi	r20, 0xB4	; 180
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	51 83       	std	Z+1, r21	; 0x01
     864:	40 83       	st	Z, r20
	errorCheck=true;			//for calculating error checks on received pulse data
     866:	3a 96       	adiw	r30, 0x0a	; 10
     868:	41 e0       	ldi	r20, 0x01	; 1
     86a:	40 83       	st	Z, r20
	tolerance=20;				
     86c:	32 97       	sbiw	r30, 0x02	; 2
     86e:	31 83       	std	Z+1, r19	; 0x01
     870:	20 83       	st	Z, r18
     872:	08 95       	ret

00000874 <_ZN5pulse4initEv>:
//pulse::init initialses the registers for counting the clock pulses on 
//T1 pin of mcu, 
void pulse::init(void)
{
	
	TCCR1A=0;		//not using any other mode
     874:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=(1<<CS12)|(1<<CS11); //set clock source as falling edge on T1 pin
     878:	86 e0       	ldi	r24, 0x06	; 6
     87a:	80 93 81 00 	sts	0x0081, r24
	TCNT1=0;					//set initial value of counter to zero
     87e:	10 92 85 00 	sts	0x0085, r1
     882:	10 92 84 00 	sts	0x0084, r1
	OCR1A=0;					//not using other timer modules
     886:	10 92 89 00 	sts	0x0089, r1
     88a:	10 92 88 00 	sts	0x0088, r1
	OCR1B=0;
     88e:	10 92 8b 00 	sts	0x008B, r1
     892:	10 92 8a 00 	sts	0x008A, r1
	ICR1=0;
     896:	10 92 87 00 	sts	0x0087, r1
     89a:	10 92 86 00 	sts	0x0086, r1
	TIMSK1=0;					//not using interrupts for timer 1
     89e:	10 92 6f 00 	sts	0x006F, r1
	TIFR1=0;
     8a2:	16 ba       	out	0x16, r1	; 22
	DDRD&=~(1<<PD6);							//make T1 pin as input PD6
     8a4:	56 98       	cbi	0x0a, 6	; 10
     8a6:	08 95       	ret

000008a8 <_ZN5pulse5delayEj>:
	}
	return 1;
}
void pulse::delay(unsigned int time_ms)
{
	while(time_ms--)_delay_ms(1);
     8a8:	61 15       	cp	r22, r1
     8aa:	71 05       	cpc	r23, r1
     8ac:	51 f0       	breq	.+20     	; 0x8c2 <_ZN5pulse5delayEj+0x1a>
     8ae:	86 e6       	ldi	r24, 0x66	; 102
     8b0:	9e e0       	ldi	r25, 0x0E	; 14
     8b2:	01 97       	sbiw	r24, 0x01	; 1
     8b4:	f1 f7       	brne	.-4      	; 0x8b2 <_ZN5pulse5delayEj+0xa>
     8b6:	00 00       	nop
     8b8:	61 50       	subi	r22, 0x01	; 1
     8ba:	71 09       	sbc	r23, r1
     8bc:	61 15       	cp	r22, r1
     8be:	71 05       	cpc	r23, r1
     8c0:	b1 f7       	brne	.-20     	; 0x8ae <_ZN5pulse5delayEj+0x6>
     8c2:	08 95       	ret

000008c4 <_ZN9pulseInfo17setPulseWidthTimeEv>:
}

void pulseInfo::setPulseWidthTime()
{
     8c4:	fc 01       	movw	r30, r24
	pulseWidthTime=stopTime-startTime;
     8c6:	84 81       	ldd	r24, Z+4	; 0x04
     8c8:	95 81       	ldd	r25, Z+5	; 0x05
     8ca:	20 81       	ld	r18, Z
     8cc:	31 81       	ldd	r19, Z+1	; 0x01
     8ce:	82 1b       	sub	r24, r18
     8d0:	93 0b       	sbc	r25, r19
     8d2:	93 87       	std	Z+11, r25	; 0x0b
     8d4:	82 87       	std	Z+10, r24	; 0x0a
     8d6:	08 95       	ret

000008d8 <_ZN5pulse7captureEv>:
*check every 2 ms that counter is incremented or not
*if incremented continue to check
*else exit loop and save timer value as pulse count 
*********************************************************/
char pulse::capture()
{
     8d8:	4f 92       	push	r4
     8da:	5f 92       	push	r5
     8dc:	6f 92       	push	r6
     8de:	7f 92       	push	r7
     8e0:	af 92       	push	r10
     8e2:	bf 92       	push	r11
     8e4:	cf 92       	push	r12
     8e6:	df 92       	push	r13
     8e8:	ef 92       	push	r14
     8ea:	ff 92       	push	r15
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	ec 01       	movw	r28, r24
	init();					//initialise registers for capture
     8f6:	be df       	rcall	.-132    	; 0x874 <_ZN5pulse4initEv>
	pulseData.numberOfEdges	= 0;		
     8f8:	19 86       	std	Y+9, r1	; 0x09
     8fa:	18 86       	std	Y+8, r1	; 0x08
	unsigned long temptime=systime::getSysTime();										//save time when it looks for a pulse 
     8fc:	d4 d2       	rcall	.+1448   	; 0xea6 <_ZN7systime10getSysTimeEv>
     8fe:	2b 01       	movw	r4, r22
     900:	3c 01       	movw	r6, r24
	while(TCNT1 == 0){
     902:	04 e8       	ldi	r16, 0x84	; 132
     904:	10 e0       	ldi	r17, 0x00	; 0
		if( (systime::getSysTime()-temptime)>(unsigned long)(1.5*tDit))					//check if sufficient time has passed after
     906:	5e 01       	movw	r10, r28
     908:	89 e6       	ldi	r24, 0x69	; 105
     90a:	a8 0e       	add	r10, r24
     90c:	b1 1c       	adc	r11, r1
char pulse::capture()
{
	init();					//initialise registers for capture
	pulseData.numberOfEdges	= 0;		
	unsigned long temptime=systime::getSysTime();										//save time when it looks for a pulse 
	while(TCNT1 == 0){
     90e:	21 c0       	rjmp	.+66     	; 0x952 <_ZN5pulse7captureEv+0x7a>
		if( (systime::getSysTime()-temptime)>(unsigned long)(1.5*tDit))					//check if sufficient time has passed after
     910:	ca d2       	rcall	.+1428   	; 0xea6 <_ZN7systime10getSysTimeEv>
     912:	6b 01       	movw	r12, r22
     914:	7c 01       	movw	r14, r24
     916:	c4 18       	sub	r12, r4
     918:	d5 08       	sbc	r13, r5
     91a:	e6 08       	sbc	r14, r6
     91c:	f7 08       	sbc	r15, r7
     91e:	f5 01       	movw	r30, r10
     920:	60 81       	ld	r22, Z
     922:	71 81       	ldd	r23, Z+1	; 0x01
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	36 d3       	rcall	.+1644   	; 0xf96 <__floatunsisf>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 ec       	ldi	r20, 0xC0	; 192
     930:	5f e3       	ldi	r21, 0x3F	; 63
     932:	97 d3       	rcall	.+1838   	; 0x1062 <__mulsf3>
     934:	04 d3       	rcall	.+1544   	; 0xf3e <__fixunssfsi>
     936:	6c 15       	cp	r22, r12
     938:	7d 05       	cpc	r23, r13
     93a:	8e 05       	cpc	r24, r14
     93c:	9f 05       	cpc	r25, r15
     93e:	48 f4       	brcc	.+18     	; 0x952 <_ZN5pulse7captureEv+0x7a>
		{
			isDitTimeout=true;															//if yes setDitTimeout Bit
     940:	fe 01       	movw	r30, r28
     942:	ee 59       	subi	r30, 0x9E	; 158
     944:	ff 4f       	sbci	r31, 0xFF	; 255
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	80 83       	st	Z, r24
			flag=1;
     94a:	cf 59       	subi	r28, 0x9F	; 159
     94c:	df 4f       	sbci	r29, 0xFF	; 255
     94e:	88 83       	st	Y, r24
			return flag;
     950:	4a c0       	rjmp	.+148    	; 0x9e6 <_ZN5pulse7captureEv+0x10e>
char pulse::capture()
{
	init();					//initialise registers for capture
	pulseData.numberOfEdges	= 0;		
	unsigned long temptime=systime::getSysTime();										//save time when it looks for a pulse 
	while(TCNT1 == 0){
     952:	f8 01       	movw	r30, r16
     954:	80 81       	ld	r24, Z
     956:	91 81       	ldd	r25, Z+1	; 0x01
     958:	89 2b       	or	r24, r25
     95a:	d1 f2       	breq	.-76     	; 0x910 <_ZN5pulse7captureEv+0x38>
			flag=1;
			return flag;
		}
	};		//wait for first falling edge		//ie within timeout edge is detected
	
	pulseData.startTime=systime::getSysTime();	//save START TIME
     95c:	a4 d2       	rcall	.+1352   	; 0xea6 <_ZN7systime10getSysTimeEv>
     95e:	68 83       	st	Y, r22
     960:	79 83       	std	Y+1, r23	; 0x01
     962:	8a 83       	std	Y+2, r24	; 0x02
     964:	9b 83       	std	Y+3, r25	; 0x03
	isDitTimeout=false;
     966:	fe 01       	movw	r30, r28
     968:	ee 59       	subi	r30, 0x9E	; 158
     96a:	ff 4f       	sbci	r31, 0xFF	; 255
     96c:	10 82       	st	Z, r1
	while(true)									
	{
		pulseData.numberOfEdges=TCNT1;
     96e:	04 e8       	ldi	r16, 0x84	; 132
     970:	10 e0       	ldi	r17, 0x00	; 0
		delay(timeout);								///timeout value pulse edge timeoutSS
     972:	7e 01       	movw	r14, r28
     974:	f3 e6       	ldi	r31, 0x63	; 99
     976:	ef 0e       	add	r14, r31
     978:	f1 1c       	adc	r15, r1
	
	pulseData.startTime=systime::getSysTime();	//save START TIME
	isDitTimeout=false;
	while(true)									
	{
		pulseData.numberOfEdges=TCNT1;
     97a:	f8 01       	movw	r30, r16
     97c:	80 81       	ld	r24, Z
     97e:	91 81       	ldd	r25, Z+1	; 0x01
     980:	99 87       	std	Y+9, r25	; 0x09
     982:	88 87       	std	Y+8, r24	; 0x08
		delay(timeout);								///timeout value pulse edge timeoutSS
     984:	f7 01       	movw	r30, r14
     986:	60 81       	ld	r22, Z
     988:	71 81       	ldd	r23, Z+1	; 0x01
     98a:	ce 01       	movw	r24, r28
     98c:	8d df       	rcall	.-230    	; 0x8a8 <_ZN5pulse5delayEj>
		if(pulseData.numberOfEdges == TCNT1)break;	//break only if counter value
     98e:	f8 01       	movw	r30, r16
     990:	80 81       	ld	r24, Z
     992:	91 81       	ldd	r25, Z+1	; 0x01
     994:	28 85       	ldd	r18, Y+8	; 0x08
     996:	39 85       	ldd	r19, Y+9	; 0x09
     998:	28 17       	cp	r18, r24
     99a:	39 07       	cpc	r19, r25
     99c:	71 f7       	brne	.-36     	; 0x97a <_ZN5pulse7captureEv+0xa2>
													//does not changes within timeout
	}
	pulseData.stopTime=systime::getSysTime();		//save pulse STOP TIME
     99e:	83 d2       	rcall	.+1286   	; 0xea6 <_ZN7systime10getSysTimeEv>
     9a0:	6c 83       	std	Y+4, r22	; 0x04
     9a2:	7d 83       	std	Y+5, r23	; 0x05
     9a4:	8e 83       	std	Y+6, r24	; 0x06
     9a6:	9f 83       	std	Y+7, r25	; 0x07
	pulseData.setPulseWidthTime();					
     9a8:	ce 01       	movw	r24, r28
     9aa:	8c df       	rcall	.-232    	; 0x8c4 <_ZN9pulseInfo17setPulseWidthTimeEv>
	
	if((pulseData.pulseWidthTime<thresholdTime)	&&	(pulseData.pulseWidthTime>maxThresholdTime)	)//flag for error
     9ac:	8a 85       	ldd	r24, Y+10	; 0x0a
     9ae:	9b 85       	ldd	r25, Y+11	; 0x0b
     9b0:	fe 01       	movw	r30, r28
     9b2:	eb 59       	subi	r30, 0x9B	; 155
     9b4:	ff 4f       	sbci	r31, 0xFF	; 255
     9b6:	20 81       	ld	r18, Z
     9b8:	31 81       	ldd	r19, Z+1	; 0x01
     9ba:	82 17       	cp	r24, r18
     9bc:	93 07       	cpc	r25, r19
     9be:	48 f4       	brcc	.+18     	; 0x9d2 <_ZN5pulse7captureEv+0xfa>
     9c0:	32 96       	adiw	r30, 0x02	; 2
     9c2:	20 81       	ld	r18, Z
     9c4:	31 81       	ldd	r19, Z+1	; 0x01
     9c6:	28 17       	cp	r18, r24
     9c8:	39 07       	cpc	r19, r25
     9ca:	18 f4       	brcc	.+6      	; 0x9d2 <_ZN5pulse7captureEv+0xfa>
	{
		flag=0;			//invalid flag : unsuccessful
     9cc:	36 97       	sbiw	r30, 0x06	; 6
     9ce:	10 82       	st	Z, r1
     9d0:	05 c0       	rjmp	.+10     	; 0x9dc <_ZN5pulse7captureEv+0x104>
	}else{
		flag=1;			//valid flag   : successful
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	fe 01       	movw	r30, r28
     9d6:	ef 59       	subi	r30, 0x9F	; 159
     9d8:	ff 4f       	sbci	r31, 0xFF	; 255
     9da:	80 83       	st	Z, r24
	}
	pulseData.ifData=flag;			//says validity of pulse data
     9dc:	fe 01       	movw	r30, r28
     9de:	ef 59       	subi	r30, 0x9F	; 159
     9e0:	ff 4f       	sbci	r31, 0xFF	; 255
     9e2:	80 81       	ld	r24, Z
     9e4:	8c 87       	std	Y+12, r24	; 0x0c
	return flag;
}
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	1f 91       	pop	r17
     9ec:	0f 91       	pop	r16
     9ee:	ff 90       	pop	r15
     9f0:	ef 90       	pop	r14
     9f2:	df 90       	pop	r13
     9f4:	cf 90       	pop	r12
     9f6:	bf 90       	pop	r11
     9f8:	af 90       	pop	r10
     9fa:	7f 90       	pop	r7
     9fc:	6f 90       	pop	r6
     9fe:	5f 90       	pop	r5
     a00:	4f 90       	pop	r4
     a02:	08 95       	ret

00000a04 <_ZN5pulse11receiveCodeEv>:
/***************************************
*char pulse::receiveCode()
*returns 1 if successful 
****************************************/
char pulse::receiveCode()	
{
     a04:	cf 92       	push	r12
     a06:	df 92       	push	r13
     a08:	ef 92       	push	r14
     a0a:	ff 92       	push	r15
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	ec 01       	movw	r28, r24
	//char timeoutNo=0;
	bool isFirstTimeout=true;
	for(int i=0; i<6; )
     a16:	00 e0       	ldi	r16, 0x00	; 0
     a18:	10 e0       	ldi	r17, 0x00	; 0
	{
		char isValid = capture();		//receive data for pulse
		if(isValid==1)				
		{
			if(isDitTimeout==false)		//c
     a1a:	7c 01       	movw	r14, r24
     a1c:	82 e6       	ldi	r24, 0x62	; 98
     a1e:	e8 0e       	add	r14, r24
     a20:	f1 1c       	adc	r15, r1
			{
				morsePulses[i]=pulseData;		//if not ditTimeout then save the data and increment index 'i'
     a22:	0f 2e       	mov	r0, r31
     a24:	fd e0       	ldi	r31, 0x0D	; 13
     a26:	df 2e       	mov	r13, r31
     a28:	f0 2d       	mov	r31, r0
				morsePulses[i].ifData=1;
     a2a:	cc 24       	eor	r12, r12
     a2c:	c3 94       	inc	r12
{
	//char timeoutNo=0;
	bool isFirstTimeout=true;
	for(int i=0; i<6; )
	{
		char isValid = capture();		//receive data for pulse
     a2e:	ce 01       	movw	r24, r28
     a30:	53 df       	rcall	.-346    	; 0x8d8 <_ZN5pulse7captureEv>
		if(isValid==1)				
     a32:	81 30       	cpi	r24, 0x01	; 1
     a34:	c1 f5       	brne	.+112    	; 0xaa6 <_ZN5pulse11receiveCodeEv+0xa2>
		{
			if(isDitTimeout==false)		//c
     a36:	f7 01       	movw	r30, r14
     a38:	80 81       	ld	r24, Z
     a3a:	88 23       	and	r24, r24
     a3c:	21 f0       	breq	.+8      	; 0xa46 <_ZN5pulse11receiveCodeEv+0x42>
			}else{								//else it was a ditTimeout
				
				if(isFirstTimeout==true)	//for first timout repeat and for other return it
				{
					isFirstTimeout = false;	//next time this  will not execute
					for(int j=5;j>i;j--)
     a3e:	05 30       	cpi	r16, 0x05	; 5
     a40:	11 05       	cpc	r17, r1
     a42:	ec f0       	brlt	.+58     	; 0xa7e <_ZN5pulse11receiveCodeEv+0x7a>
     a44:	34 c0       	rjmp	.+104    	; 0xaae <_ZN5pulse11receiveCodeEv+0xaa>
		char isValid = capture();		//receive data for pulse
		if(isValid==1)				
		{
			if(isDitTimeout==false)		//c
			{
				morsePulses[i]=pulseData;		//if not ditTimeout then save the data and increment index 'i'
     a46:	c8 01       	movw	r24, r16
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	d8 9e       	mul	r13, r24
     a4c:	d0 01       	movw	r26, r0
     a4e:	d9 9e       	mul	r13, r25
     a50:	b0 0d       	add	r27, r0
     a52:	11 24       	eor	r1, r1
     a54:	ac 0f       	add	r26, r28
     a56:	bd 1f       	adc	r27, r29
     a58:	fe 01       	movw	r30, r28
     a5a:	2d 2d       	mov	r18, r13
     a5c:	01 90       	ld	r0, Z+
     a5e:	0d 92       	st	X+, r0
     a60:	2a 95       	dec	r18
     a62:	e1 f7       	brne	.-8      	; 0xa5c <_ZN5pulse11receiveCodeEv+0x58>
				morsePulses[i].ifData=1;
     a64:	d0 9e       	mul	r13, r16
     a66:	f0 01       	movw	r30, r0
     a68:	d1 9e       	mul	r13, r17
     a6a:	f0 0d       	add	r31, r0
     a6c:	11 24       	eor	r1, r1
     a6e:	ec 0f       	add	r30, r28
     a70:	fd 1f       	adc	r31, r29
     a72:	c1 8e       	std	Z+25, r12	; 0x19
				i++;
     a74:	8c 01       	movw	r16, r24
****************************************/
char pulse::receiveCode()	
{
	//char timeoutNo=0;
	bool isFirstTimeout=true;
	for(int i=0; i<6; )
     a76:	86 30       	cpi	r24, 0x06	; 6
     a78:	91 05       	cpc	r25, r1
     a7a:	cc f4       	brge	.+50     	; 0xaae <_ZN5pulse11receiveCodeEv+0xaa>
     a7c:	d8 cf       	rjmp	.-80     	; 0xa2e <_ZN5pulse11receiveCodeEv+0x2a>
     a7e:	ce 01       	movw	r24, r28
     a80:	c1 54       	subi	r28, 0x41	; 65
     a82:	d1 09       	sbc	r29, r1
     a84:	4d e0       	ldi	r20, 0x0D	; 13
     a86:	40 9f       	mul	r20, r16
     a88:	90 01       	movw	r18, r0
     a8a:	41 9f       	mul	r20, r17
     a8c:	30 0d       	add	r19, r0
     a8e:	11 24       	eor	r1, r1
     a90:	2c 0f       	add	r18, r28
     a92:	3d 1f       	adc	r19, r29
     a94:	fc 01       	movw	r30, r24
     a96:	e6 5a       	subi	r30, 0xA6	; 166
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
				if(isFirstTimeout==true)	//for first timout repeat and for other return it
				{
					isFirstTimeout = false;	//next time this  will not execute
					for(int j=5;j>i;j--)
					{
						morsePulses[j].ifData=0;				//make all other ifData zero
     a9a:	10 82       	st	Z, r1
     a9c:	0d 97       	sbiw	r24, 0x0d	; 13
			}else{								//else it was a ditTimeout
				
				if(isFirstTimeout==true)	//for first timout repeat and for other return it
				{
					isFirstTimeout = false;	//next time this  will not execute
					for(int j=5;j>i;j--)
     a9e:	82 17       	cp	r24, r18
     aa0:	93 07       	cpc	r25, r19
     aa2:	c1 f7       	brne	.-16     	; 0xa94 <_ZN5pulse11receiveCodeEv+0x90>
     aa4:	04 c0       	rjmp	.+8      	; 0xaae <_ZN5pulse11receiveCodeEv+0xaa>
****************************************/
char pulse::receiveCode()	
{
	//char timeoutNo=0;
	bool isFirstTimeout=true;
	for(int i=0; i<6; )
     aa6:	06 30       	cpi	r16, 0x06	; 6
     aa8:	11 05       	cpc	r17, r1
     aaa:	0c f4       	brge	.+2      	; 0xaae <_ZN5pulse11receiveCodeEv+0xaa>
     aac:	c0 cf       	rjmp	.-128    	; 0xa2e <_ZN5pulse11receiveCodeEv+0x2a>
						}
				}
		}else ;					//do nothing if it was not a valid data
	}
	return 1;
}
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	1f 91       	pop	r17
     ab6:	0f 91       	pop	r16
     ab8:	ff 90       	pop	r15
     aba:	ef 90       	pop	r14
     abc:	df 90       	pop	r13
     abe:	cf 90       	pop	r12
     ac0:	08 95       	ret

00000ac2 <_ZN5pulse14decodeToDitDahEv>:
*extracts dit and dah from the morsePulses array and stores in  DitDah array
*returns true if successful (only if error checking) else false
*absense of errorChecking strictly calculates on based on (tDit+tDah)/2
**********************************************/
bool pulse::decodeToDitDah()
{
     ac2:	2f 92       	push	r2
     ac4:	3f 92       	push	r3
     ac6:	4f 92       	push	r4
     ac8:	5f 92       	push	r5
     aca:	6f 92       	push	r6
     acc:	7f 92       	push	r7
     ace:	8f 92       	push	r8
     ad0:	9f 92       	push	r9
     ad2:	af 92       	push	r10
     ad4:	bf 92       	push	r11
     ad6:	cf 92       	push	r12
     ad8:	df 92       	push	r13
     ada:	ef 92       	push	r14
     adc:	ff 92       	push	r15
     ade:	0f 93       	push	r16
     ae0:	1f 93       	push	r17
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
	
	//find number of morse pulses
	int i=0;
	for(i=0; i<6; i++) DitDah[i] = 0;		//make  all previous data to zero
     ae6:	fc 01       	movw	r30, r24
     ae8:	e5 5a       	subi	r30, 0xA5	; 165
     aea:	ff 4f       	sbci	r31, 0xFF	; 255
     aec:	10 82       	st	Z, r1
     aee:	31 96       	adiw	r30, 0x01	; 1
     af0:	10 82       	st	Z, r1
     af2:	31 96       	adiw	r30, 0x01	; 1
     af4:	10 82       	st	Z, r1
     af6:	31 96       	adiw	r30, 0x01	; 1
     af8:	10 82       	st	Z, r1
     afa:	31 96       	adiw	r30, 0x01	; 1
     afc:	10 82       	st	Z, r1
     afe:	31 96       	adiw	r30, 0x01	; 1
     b00:	10 82       	st	Z, r1
	for( i=0;morsePulses[i].ifData!=0;i++);
     b02:	ec 01       	movw	r28, r24
     b04:	29 8d       	ldd	r18, Y+25	; 0x19
     b06:	21 11       	cpse	r18, r1
     b08:	1a c0       	rjmp	.+52     	; 0xb3e <_ZN5pulse14decodeToDitDahEv+0x7c>
     b0a:	fc 01       	movw	r30, r24
     b0c:	dc 01       	movw	r26, r24
     b0e:	a5 5a       	subi	r26, 0xA5	; 165
     b10:	bf 4f       	sbci	r27, 0xFF	; 255
*extracts dit and dah from the morsePulses array and stores in  DitDah array
*returns true if successful (only if error checking) else false
*absense of errorChecking strictly calculates on based on (tDit+tDah)/2
**********************************************/
bool pulse::decodeToDitDah()
{
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
		{
			DitDah[j]=0;
			continue;
		}
		else{
				if(errorCheck)
     b16:	bc 01       	movw	r22, r24
     b18:	6f 58       	subi	r22, 0x8F	; 143
     b1a:	7f 4f       	sbci	r23, 0xFF	; 255
					if(!((timeWidth>tDit/2) && ( timeWidth <tDah/2) ))return false;
					}
				}
				//if( absolute(morsePulses[j].pulseWidthTime - tDah ) < tolerance )							//its a dah
			//	if(morsePulses[j].pulseWidthTime>=2*tDit)
				if( absolute((int)(morsePulses[j].pulseWidthTime - tDah) ) < tolerance )		
     b1c:	8c 01       	movw	r16, r24
     b1e:	01 59       	subi	r16, 0x91	; 145
     b20:	1f 4f       	sbci	r17, 0xFF	; 255
     b22:	ac 01       	movw	r20, r24
     b24:	45 59       	subi	r20, 0x95	; 149
     b26:	5f 4f       	sbci	r21, 0xFF	; 255
				{
					DitDah[j]=3;
				}
				else if(absolute((int)(morsePulses[j].pulseWidthTime-tDit))<tolerance)							//its a dit
     b28:	5c 01       	movw	r10, r24
     b2a:	d9 e6       	ldi	r29, 0x69	; 105
     b2c:	ad 0e       	add	r10, r29
     b2e:	b1 1c       	adc	r11, r1
			//	else if (morsePulses[j].pulseWidthTime<2*tDit)
				{
					DitDah[j]=1;
     b30:	88 24       	eor	r8, r8
     b32:	83 94       	inc	r8
				}
				//if( absolute(morsePulses[j].pulseWidthTime - tDah ) < tolerance )							//its a dah
			//	if(morsePulses[j].pulseWidthTime>=2*tDit)
				if( absolute((int)(morsePulses[j].pulseWidthTime - tDah) ) < tolerance )		
				{
					DitDah[j]=3;
     b34:	0f 2e       	mov	r0, r31
     b36:	f3 e0       	ldi	r31, 0x03	; 3
     b38:	9f 2e       	mov	r9, r31
     b3a:	f0 2d       	mov	r31, r0
     b3c:	0b c0       	rjmp	.+22     	; 0xb54 <_ZN5pulse14decodeToDitDahEv+0x92>
     b3e:	9c 01       	movw	r18, r24
     b40:	2a 5d       	subi	r18, 0xDA	; 218
     b42:	3f 4f       	sbci	r19, 0xFF	; 255
     b44:	23 5f       	subi	r18, 0xF3	; 243
     b46:	3f 4f       	sbci	r19, 0xFF	; 255
     b48:	f9 01       	movw	r30, r18
     b4a:	3d 97       	sbiw	r30, 0x0d	; 13
{
	
	//find number of morse pulses
	int i=0;
	for(i=0; i<6; i++) DitDah[i] = 0;		//make  all previous data to zero
	for( i=0;morsePulses[i].ifData!=0;i++);
     b4c:	40 81       	ld	r20, Z
     b4e:	41 11       	cpse	r20, r1
     b50:	f9 cf       	rjmp	.-14     	; 0xb44 <_ZN5pulse14decodeToDitDahEv+0x82>
     b52:	db cf       	rjmp	.-74     	; 0xb0a <_ZN5pulse14decodeToDitDahEv+0x48>
     b54:	1f 01       	movw	r2, r30
	//int numberOfPulses=i;
	for(int j=0;j<6;j++)
	{
		if(morsePulses[j].ifData==0)		//just to be safe
     b56:	81 8d       	ldd	r24, Z+25	; 0x19
     b58:	81 11       	cpse	r24, r1
     b5a:	02 c0       	rjmp	.+4      	; 0xb60 <_ZN5pulse14decodeToDitDahEv+0x9e>
		{
			DitDah[j]=0;
     b5c:	1c 92       	st	X, r1
			continue;
     b5e:	55 c0       	rjmp	.+170    	; 0xc0a <_ZN5pulse14decodeToDitDahEv+0x148>
		}
		else{
				if(errorCheck)
     b60:	eb 01       	movw	r28, r22
     b62:	88 81       	ld	r24, Y
     b64:	88 23       	and	r24, r24
     b66:	49 f1       	breq	.+82     	; 0xbba <_ZN5pulse14decodeToDitDahEv+0xf8>
				{
					if(j>0)			//if not the first pulse
     b68:	12 16       	cp	r1, r18
     b6a:	13 06       	cpc	r1, r19
     b6c:	34 f5       	brge	.+76     	; 0xbba <_ZN5pulse14decodeToDitDahEv+0xf8>
					{
					unsigned long timeWidth (morsePulses[j].startTime-morsePulses[j-1].stopTime) ;		//finding time distance betn next pulse falling and previous pulse rising
     b6e:	c5 84       	ldd	r12, Z+13	; 0x0d
     b70:	d6 84       	ldd	r13, Z+14	; 0x0e
     b72:	e7 84       	ldd	r14, Z+15	; 0x0f
     b74:	f0 88       	ldd	r15, Z+16	; 0x10
     b76:	44 80       	ldd	r4, Z+4	; 0x04
     b78:	55 80       	ldd	r5, Z+5	; 0x05
     b7a:	66 80       	ldd	r6, Z+6	; 0x06
     b7c:	77 80       	ldd	r7, Z+7	; 0x07
     b7e:	c4 18       	sub	r12, r4
     b80:	d5 08       	sbc	r13, r5
     b82:	e6 08       	sbc	r14, r6
     b84:	f7 08       	sbc	r15, r7
					if(!((timeWidth>tDit/2) && ( timeWidth <tDah/2) ))return false;
     b86:	e5 01       	movw	r28, r10
     b88:	88 81       	ld	r24, Y
     b8a:	99 81       	ldd	r25, Y+1	; 0x01
     b8c:	96 95       	lsr	r25
     b8e:	87 95       	ror	r24
     b90:	2c 01       	movw	r4, r24
     b92:	61 2c       	mov	r6, r1
     b94:	71 2c       	mov	r7, r1
     b96:	4c 14       	cp	r4, r12
     b98:	5d 04       	cpc	r5, r13
     b9a:	6e 04       	cpc	r6, r14
     b9c:	7f 04       	cpc	r7, r15
     b9e:	f0 f5       	brcc	.+124    	; 0xc1c <_ZN5pulse14decodeToDitDahEv+0x15a>
     ba0:	ea 01       	movw	r28, r20
     ba2:	88 81       	ld	r24, Y
     ba4:	99 81       	ldd	r25, Y+1	; 0x01
     ba6:	96 95       	lsr	r25
     ba8:	87 95       	ror	r24
     baa:	2c 01       	movw	r4, r24
     bac:	61 2c       	mov	r6, r1
     bae:	71 2c       	mov	r7, r1
     bb0:	c4 14       	cp	r12, r4
     bb2:	d5 04       	cpc	r13, r5
     bb4:	e6 04       	cpc	r14, r6
     bb6:	f7 04       	cpc	r15, r7
     bb8:	98 f5       	brcc	.+102    	; 0xc20 <_ZN5pulse14decodeToDitDahEv+0x15e>
					}
				}
				//if( absolute(morsePulses[j].pulseWidthTime - tDah ) < tolerance )							//its a dah
			//	if(morsePulses[j].pulseWidthTime>=2*tDit)
				if( absolute((int)(morsePulses[j].pulseWidthTime - tDah) ) < tolerance )		
     bba:	e1 01       	movw	r28, r2
     bbc:	ef 88       	ldd	r14, Y+23	; 0x17
     bbe:	f8 8c       	ldd	r15, Y+24	; 0x18
     bc0:	e8 01       	movw	r28, r16
     bc2:	68 80       	ld	r6, Y
     bc4:	79 80       	ldd	r7, Y+1	; 0x01
     bc6:	ea 01       	movw	r28, r20
     bc8:	88 81       	ld	r24, Y
     bca:	99 81       	ldd	r25, Y+1	; 0x01
     bcc:	67 01       	movw	r12, r14
     bce:	c8 1a       	sub	r12, r24
     bd0:	d9 0a       	sbc	r13, r25
*unsigned int pulse::absolute(int x)
*return absolute value of an integer
*********************************/
unsigned int pulse::absolute(int x)
{
	return (  (x>=0)?x:(-1)*x   );
     bd2:	c6 01       	movw	r24, r12
     bd4:	99 23       	and	r25, r25
     bd6:	24 f4       	brge	.+8      	; 0xbe0 <_ZN5pulse14decodeToDitDahEv+0x11e>
     bd8:	88 27       	eor	r24, r24
     bda:	99 27       	eor	r25, r25
     bdc:	8c 19       	sub	r24, r12
     bde:	9d 09       	sbc	r25, r13
					if(!((timeWidth>tDit/2) && ( timeWidth <tDah/2) ))return false;
					}
				}
				//if( absolute(morsePulses[j].pulseWidthTime - tDah ) < tolerance )							//its a dah
			//	if(morsePulses[j].pulseWidthTime>=2*tDit)
				if( absolute((int)(morsePulses[j].pulseWidthTime - tDah) ) < tolerance )		
     be0:	86 15       	cp	r24, r6
     be2:	97 05       	cpc	r25, r7
     be4:	10 f4       	brcc	.+4      	; 0xbea <_ZN5pulse14decodeToDitDahEv+0x128>
				{
					DitDah[j]=3;
     be6:	9c 92       	st	X, r9
     be8:	10 c0       	rjmp	.+32     	; 0xc0a <_ZN5pulse14decodeToDitDahEv+0x148>
				}
				else if(absolute((int)(morsePulses[j].pulseWidthTime-tDit))<tolerance)							//its a dit
     bea:	e5 01       	movw	r28, r10
     bec:	88 81       	ld	r24, Y
     bee:	99 81       	ldd	r25, Y+1	; 0x01
     bf0:	e8 1a       	sub	r14, r24
     bf2:	f9 0a       	sbc	r15, r25
*unsigned int pulse::absolute(int x)
*return absolute value of an integer
*********************************/
unsigned int pulse::absolute(int x)
{
	return (  (x>=0)?x:(-1)*x   );
     bf4:	c7 01       	movw	r24, r14
     bf6:	99 23       	and	r25, r25
     bf8:	24 f4       	brge	.+8      	; 0xc02 <_ZN5pulse14decodeToDitDahEv+0x140>
     bfa:	88 27       	eor	r24, r24
     bfc:	99 27       	eor	r25, r25
     bfe:	8e 19       	sub	r24, r14
     c00:	9f 09       	sbc	r25, r15
			//	if(morsePulses[j].pulseWidthTime>=2*tDit)
				if( absolute((int)(morsePulses[j].pulseWidthTime - tDah) ) < tolerance )		
				{
					DitDah[j]=3;
				}
				else if(absolute((int)(morsePulses[j].pulseWidthTime-tDit))<tolerance)							//its a dit
     c02:	86 15       	cp	r24, r6
     c04:	97 05       	cpc	r25, r7
     c06:	70 f4       	brcc	.+28     	; 0xc24 <_ZN5pulse14decodeToDitDahEv+0x162>
			//	else if (morsePulses[j].pulseWidthTime<2*tDit)
				{
					DitDah[j]=1;
     c08:	8c 92       	st	X, r8
	//find number of morse pulses
	int i=0;
	for(i=0; i<6; i++) DitDah[i] = 0;		//make  all previous data to zero
	for( i=0;morsePulses[i].ifData!=0;i++);
	//int numberOfPulses=i;
	for(int j=0;j<6;j++)
     c0a:	2f 5f       	subi	r18, 0xFF	; 255
     c0c:	3f 4f       	sbci	r19, 0xFF	; 255
     c0e:	3d 96       	adiw	r30, 0x0d	; 13
     c10:	11 96       	adiw	r26, 0x01	; 1
     c12:	26 30       	cpi	r18, 0x06	; 6
     c14:	31 05       	cpc	r19, r1
     c16:	09 f0       	breq	.+2      	; 0xc1a <_ZN5pulse14decodeToDitDahEv+0x158>
     c18:	9d cf       	rjmp	.-198    	; 0xb54 <_ZN5pulse14decodeToDitDahEv+0x92>
     c1a:	06 c0       	rjmp	.+12     	; 0xc28 <_ZN5pulse14decodeToDitDahEv+0x166>
				if(errorCheck)
				{
					if(j>0)			//if not the first pulse
					{
					unsigned long timeWidth (morsePulses[j].startTime-morsePulses[j-1].stopTime) ;		//finding time distance betn next pulse falling and previous pulse rising
					if(!((timeWidth>tDit/2) && ( timeWidth <tDah/2) ))return false;
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	05 c0       	rjmp	.+10     	; 0xc2a <_ZN5pulse14decodeToDitDahEv+0x168>
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	03 c0       	rjmp	.+6      	; 0xc2a <_ZN5pulse14decodeToDitDahEv+0x168>
				{
					DitDah[j]=1;
				}
				else
				{
					return false;
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	01 c0       	rjmp	.+2      	; 0xc2a <_ZN5pulse14decodeToDitDahEv+0x168>
				}
			}
	}
	return true;
     c28:	81 e0       	ldi	r24, 0x01	; 1
}
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16
     c32:	ff 90       	pop	r15
     c34:	ef 90       	pop	r14
     c36:	df 90       	pop	r13
     c38:	cf 90       	pop	r12
     c3a:	bf 90       	pop	r11
     c3c:	af 90       	pop	r10
     c3e:	9f 90       	pop	r9
     c40:	8f 90       	pop	r8
     c42:	7f 90       	pop	r7
     c44:	6f 90       	pop	r6
     c46:	5f 90       	pop	r5
     c48:	4f 90       	pop	r4
     c4a:	3f 90       	pop	r3
     c4c:	2f 90       	pop	r2
     c4e:	08 95       	ret

00000c50 <_ZN5pulse14getDecodedDataEPc>:
/************************************************************************/
/* void pulse::getDecodedData(char *buffer)								*/
/* input : pointer to a  buffer for storing decoded output              */
/************************************************************************/
void pulse::getDecodedData(char *buffer)
{
     c50:	dc 01       	movw	r26, r24
     c52:	a5 5a       	subi	r26, 0xA5	; 165
     c54:	bf 4f       	sbci	r27, 0xFF	; 255
     c56:	e6 2f       	mov	r30, r22
     c58:	f7 2f       	mov	r31, r23
	for(int i=0;i<6;i++)buffer[i]=DitDah[i]+0x30;
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	8d 91       	ld	r24, X+
     c60:	80 5d       	subi	r24, 0xD0	; 208
     c62:	81 93       	st	Z+, r24
     c64:	2f 5f       	subi	r18, 0xFF	; 255
     c66:	3f 4f       	sbci	r19, 0xFF	; 255
     c68:	26 30       	cpi	r18, 0x06	; 6
     c6a:	31 05       	cpc	r19, r1
     c6c:	c1 f7       	brne	.-16     	; 0xc5e <_ZN5pulse14getDecodedDataEPc+0xe>
}
     c6e:	08 95       	ret

00000c70 <main>:
#include "uart0.h"
#include "Processor.h"
#include "morsebuzzer.h"

int main(void)
{
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
     c78:	cc 5a       	subi	r28, 0xAC	; 172
     c7a:	d1 09       	sbc	r29, r1
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
	LCD lcd;
     c86:	ce 01       	movw	r24, r28
     c88:	8d 58       	subi	r24, 0x8D	; 141
     c8a:	9f 4f       	sbci	r25, 0xFF	; 255
     c8c:	30 db       	rcall	.-2464   	; 0x2ee <_ZN3LCDC1Ev>
	pulse code;
     c8e:	ce 01       	movw	r24, r28
     c90:	01 96       	adiw	r24, 0x01	; 1
     c92:	c8 dd       	rcall	.-1136   	; 0x824 <_ZN5pulseC1Ev>
	uart0 serial(57600);
     c94:	40 e0       	ldi	r20, 0x00	; 0
     c96:	51 ee       	ldi	r21, 0xE1	; 225
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	ce 01       	movw	r24, r28
     c9e:	8a 55       	subi	r24, 0x5A	; 90
     ca0:	9f 4f       	sbci	r25, 0xFF	; 255
     ca2:	0a d1       	rcall	.+532    	; 0xeb8 <_ZN5uart0C1Em>
	Processor motor;
     ca4:	ce 01       	movw	r24, r28
     ca6:	84 55       	subi	r24, 0x54	; 84
     ca8:	9f 4f       	sbci	r25, 0xFF	; 255
     caa:	ba dd       	rcall	.-1164   	; 0x820 <_ZN9ProcessorC1Ev>
	morsebuzzer buzz;
     cac:	68 e2       	ldi	r22, 0x28	; 40
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	ce 01       	movw	r24, r28
     cb2:	86 55       	subi	r24, 0x56	; 86
     cb4:	9f 4f       	sbci	r25, 0xFF	; 255
     cb6:	88 db       	rcall	.-2288   	; 0x3c8 <_ZN11morsebuzzerC1Ei>
	
	buzz.morseTransmit("Hello");
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	72 e0       	ldi	r23, 0x02	; 2
     cbc:	ce 01       	movw	r24, r28
     cbe:	86 55       	subi	r24, 0x56	; 86
     cc0:	9f 4f       	sbci	r25, 0xFF	; 255
     cc2:	9c dd       	rcall	.-1224   	; 0x7fc <_ZN11morsebuzzer13morseTransmitEPKc>
	lcd.print(":)");
     cc4:	66 e0       	ldi	r22, 0x06	; 6
     cc6:	72 e0       	ldi	r23, 0x02	; 2
     cc8:	ce 01       	movw	r24, r28
     cca:	8d 58       	subi	r24, 0x8D	; 141
     ccc:	9f 4f       	sbci	r25, 0xFF	; 255
     cce:	56 db       	rcall	.-2388   	; 0x37c <_ZN3LCD5printEPKc>
	serial.printStr("Initialised\r\n");
     cd0:	69 e0       	ldi	r22, 0x09	; 9
     cd2:	72 e0       	ldi	r23, 0x02	; 2
     cd4:	ce 01       	movw	r24, r28
     cd6:	8a 55       	subi	r24, 0x5A	; 90
     cd8:	9f 4f       	sbci	r25, 0xFF	; 255
     cda:	1d d1       	rcall	.+570    	; 0xf16 <_ZN5uart08printStrEPKc>
	systime::sysTimeInit();
     cdc:	b5 d0       	rcall	.+362    	; 0xe48 <_ZN7systime11sysTimeInitEv>
	char data[7]="";
     cde:	c1 56       	subi	r28, 0x61	; 97
     ce0:	df 4f       	sbci	r29, 0xFF	; 255
     ce2:	18 82       	st	Y, r1
     ce4:	19 82       	std	Y+1, r1	; 0x01
     ce6:	1a 82       	std	Y+2, r1	; 0x02
     ce8:	1b 82       	std	Y+3, r1	; 0x03
     cea:	cf 59       	subi	r28, 0x9F	; 159
     cec:	d0 40       	sbci	r29, 0x00	; 0
     cee:	cd 55       	subi	r28, 0x5D	; 93
     cf0:	df 4f       	sbci	r29, 0xFF	; 255
     cf2:	18 82       	st	Y, r1
     cf4:	19 82       	std	Y+1, r1	; 0x01
     cf6:	1a 82       	std	Y+2, r1	; 0x02
     cf8:	c3 5a       	subi	r28, 0xA3	; 163
     cfa:	d0 40       	sbci	r29, 0x00	; 0
		 if(data[1]=='0')isValid=0;		//avoiding one units of transmit
		 if(isValid>0)
		 {
		 lcd.cursor(2,10);
		 lcd.print("Ok");
		 sprintf(buffer,"T:%lu",systime::getSysTime());
     cfc:	0f 2e       	mov	r0, r31
     cfe:	fa e1       	ldi	r31, 0x1A	; 26
     d00:	ef 2e       	mov	r14, r31
     d02:	f2 e0       	ldi	r31, 0x02	; 2
     d04:	ff 2e       	mov	r15, r31
     d06:	f0 2d       	mov	r31, r0
     d08:	8e 01       	movw	r16, r28
     d0a:	05 57       	subi	r16, 0x75	; 117
     d0c:	1f 4f       	sbci	r17, 0xFF	; 255
	char buffer [20];
	
    while(1)
    {
		char  isValid;
         if(code.receiveCode()>0)
     d0e:	ce 01       	movw	r24, r28
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	78 de       	rcall	.-784    	; 0xa04 <_ZN5pulse11receiveCodeEv>
		 else 
		 {
			 isValid=0;
		 }
		 
		  isValid=code.decodeToDitDah();
     d14:	ce 01       	movw	r24, r28
     d16:	01 96       	adiw	r24, 0x01	; 1
     d18:	d4 de       	rcall	.-600    	; 0xac2 <_ZN5pulse14decodeToDitDahEv>
     d1a:	d8 2e       	mov	r13, r24
		 code.getDecodedData(data);
     d1c:	be 01       	movw	r22, r28
     d1e:	61 56       	subi	r22, 0x61	; 97
     d20:	7f 4f       	sbci	r23, 0xFF	; 255
     d22:	ce 01       	movw	r24, r28
     d24:	01 96       	adiw	r24, 0x01	; 1
     d26:	94 df       	rcall	.-216    	; 0xc50 <_ZN5pulse14getDecodedDataEPc>
		 if(data[1]=='0')isValid=0;		//avoiding one units of transmit
     d28:	c0 56       	subi	r28, 0x60	; 96
     d2a:	df 4f       	sbci	r29, 0xFF	; 255
     d2c:	98 81       	ld	r25, Y
     d2e:	c0 5a       	subi	r28, 0xA0	; 160
     d30:	d0 40       	sbci	r29, 0x00	; 0
     d32:	90 33       	cpi	r25, 0x30	; 48
     d34:	09 f4       	brne	.+2      	; 0xd38 <main+0xc8>
     d36:	56 c0       	rjmp	.+172    	; 0xde4 <main+0x174>
		 if(isValid>0)
     d38:	dd 20       	and	r13, r13
     d3a:	09 f4       	brne	.+2      	; 0xd3e <main+0xce>
     d3c:	53 c0       	rjmp	.+166    	; 0xde4 <main+0x174>
		 {
		 lcd.cursor(2,10);
     d3e:	4a e0       	ldi	r20, 0x0A	; 10
     d40:	62 e0       	ldi	r22, 0x02	; 2
     d42:	ce 01       	movw	r24, r28
     d44:	8d 58       	subi	r24, 0x8D	; 141
     d46:	9f 4f       	sbci	r25, 0xFF	; 255
     d48:	1b db       	rcall	.-2506   	; 0x380 <_ZN3LCD6cursorEcc>
		 lcd.print("Ok");
     d4a:	67 e1       	ldi	r22, 0x17	; 23
     d4c:	72 e0       	ldi	r23, 0x02	; 2
     d4e:	ce 01       	movw	r24, r28
     d50:	8d 58       	subi	r24, 0x8D	; 141
     d52:	9f 4f       	sbci	r25, 0xFF	; 255
     d54:	13 db       	rcall	.-2522   	; 0x37c <_ZN3LCD5printEPKc>
		 sprintf(buffer,"T:%lu",systime::getSysTime());
     d56:	a7 d0       	rcall	.+334    	; 0xea6 <_ZN7systime10getSysTimeEv>
     d58:	9f 93       	push	r25
     d5a:	8f 93       	push	r24
     d5c:	7f 93       	push	r23
     d5e:	6f 93       	push	r22
     d60:	ff 92       	push	r15
     d62:	ef 92       	push	r14
     d64:	1f 93       	push	r17
     d66:	0f 93       	push	r16
     d68:	37 d2       	rcall	.+1134   	; 0x11d8 <sprintf>
		 data[6]=0;
     d6a:	cb 55       	subi	r28, 0x5B	; 91
     d6c:	df 4f       	sbci	r29, 0xFF	; 255
     d6e:	18 82       	st	Y, r1
     d70:	c5 5a       	subi	r28, 0xA5	; 165
     d72:	d0 40       	sbci	r29, 0x00	; 0
		 serial.printStr(data);
     d74:	be 01       	movw	r22, r28
     d76:	61 56       	subi	r22, 0x61	; 97
     d78:	7f 4f       	sbci	r23, 0xFF	; 255
     d7a:	ce 01       	movw	r24, r28
     d7c:	8a 55       	subi	r24, 0x5A	; 90
     d7e:	9f 4f       	sbci	r25, 0xFF	; 255
     d80:	ca d0       	rcall	.+404    	; 0xf16 <_ZN5uart08printStrEPKc>
		 serial.printStr("\t");
     d82:	60 e2       	ldi	r22, 0x20	; 32
     d84:	72 e0       	ldi	r23, 0x02	; 2
     d86:	ce 01       	movw	r24, r28
     d88:	8a 55       	subi	r24, 0x5A	; 90
     d8a:	9f 4f       	sbci	r25, 0xFF	; 255
     d8c:	c4 d0       	rcall	.+392    	; 0xf16 <_ZN5uart08printStrEPKc>
		 serial.printStr(buffer);
     d8e:	b8 01       	movw	r22, r16
     d90:	ce 01       	movw	r24, r28
     d92:	8a 55       	subi	r24, 0x5A	; 90
     d94:	9f 4f       	sbci	r25, 0xFF	; 255
     d96:	bf d0       	rcall	.+382    	; 0xf16 <_ZN5uart08printStrEPKc>
		 serial.write(0x0d);
     d98:	6d e0       	ldi	r22, 0x0D	; 13
     d9a:	ce 01       	movw	r24, r28
     d9c:	8a 55       	subi	r24, 0x5A	; 90
     d9e:	9f 4f       	sbci	r25, 0xFF	; 255
     da0:	b2 d0       	rcall	.+356    	; 0xf06 <_ZN5uart05writeEh>
		 serial.write(0x0a);
     da2:	6a e0       	ldi	r22, 0x0A	; 10
     da4:	ce 01       	movw	r24, r28
     da6:	8a 55       	subi	r24, 0x5A	; 90
     da8:	9f 4f       	sbci	r25, 0xFF	; 255
     daa:	ad d0       	rcall	.+346    	; 0xf06 <_ZN5uart05writeEh>
		 lcd.home();
     dac:	ce 01       	movw	r24, r28
     dae:	8d 58       	subi	r24, 0x8D	; 141
     db0:	9f 4f       	sbci	r25, 0xFF	; 255
     db2:	cd da       	rcall	.-2662   	; 0x34e <_ZN3LCD4homeEv>
		 lcd.print(data);
     db4:	be 01       	movw	r22, r28
     db6:	61 56       	subi	r22, 0x61	; 97
     db8:	7f 4f       	sbci	r23, 0xFF	; 255
     dba:	ce 01       	movw	r24, r28
     dbc:	8d 58       	subi	r24, 0x8D	; 141
     dbe:	9f 4f       	sbci	r25, 0xFF	; 255
     dc0:	c9 da       	rcall	.-2670   	; 0x354 <_ZN3LCD5printEPc>
		 lcd.cursor(2,1);
     dc2:	41 e0       	ldi	r20, 0x01	; 1
     dc4:	62 e0       	ldi	r22, 0x02	; 2
     dc6:	ce 01       	movw	r24, r28
     dc8:	8d 58       	subi	r24, 0x8D	; 141
     dca:	9f 4f       	sbci	r25, 0xFF	; 255
     dcc:	d9 da       	rcall	.-2638   	; 0x380 <_ZN3LCD6cursorEcc>
		 lcd.print(buffer);
     dce:	b8 01       	movw	r22, r16
     dd0:	ce 01       	movw	r24, r28
     dd2:	8d 58       	subi	r24, 0x8D	; 141
     dd4:	9f 4f       	sbci	r25, 0xFF	; 255
     dd6:	be da       	rcall	.-2692   	; 0x354 <_ZN3LCD5printEPc>
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	cd bf       	out	0x3d, r28	; 61
     de2:	95 cf       	rjmp	.-214    	; 0xd0e <main+0x9e>
		 }else{
			  lcd.cursor(2,10);
     de4:	4a e0       	ldi	r20, 0x0A	; 10
     de6:	62 e0       	ldi	r22, 0x02	; 2
     de8:	ce 01       	movw	r24, r28
     dea:	8d 58       	subi	r24, 0x8D	; 141
     dec:	9f 4f       	sbci	r25, 0xFF	; 255
     dee:	c8 da       	rcall	.-2672   	; 0x380 <_ZN3LCD6cursorEcc>
			  lcd.print("Er");
     df0:	62 e2       	ldi	r22, 0x22	; 34
     df2:	72 e0       	ldi	r23, 0x02	; 2
     df4:	ce 01       	movw	r24, r28
     df6:	8d 58       	subi	r24, 0x8D	; 141
     df8:	9f 4f       	sbci	r25, 0xFF	; 255
     dfa:	c0 da       	rcall	.-2688   	; 0x37c <_ZN3LCD5printEPKc>
     dfc:	88 cf       	rjmp	.-240    	; 0xd0e <main+0x9e>

00000dfe <__vector_35>:
//OUTPUT	: number of timer3 overflows

unsigned long getOverflows()		
{
	return overflows;	
}
     dfe:	1f 92       	push	r1
     e00:	0f 92       	push	r0
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	0f 92       	push	r0
     e06:	11 24       	eor	r1, r1
     e08:	8f 93       	push	r24
     e0a:	9f 93       	push	r25
     e0c:	af 93       	push	r26
     e0e:	bf 93       	push	r27
     e10:	80 91 26 02 	lds	r24, 0x0226
     e14:	90 91 27 02 	lds	r25, 0x0227
     e18:	a0 91 28 02 	lds	r26, 0x0228
     e1c:	b0 91 29 02 	lds	r27, 0x0229
     e20:	01 96       	adiw	r24, 0x01	; 1
     e22:	a1 1d       	adc	r26, r1
     e24:	b1 1d       	adc	r27, r1
     e26:	80 93 26 02 	sts	0x0226, r24
     e2a:	90 93 27 02 	sts	0x0227, r25
     e2e:	a0 93 28 02 	sts	0x0228, r26
     e32:	b0 93 29 02 	sts	0x0229, r27
     e36:	bf 91       	pop	r27
     e38:	af 91       	pop	r26
     e3a:	9f 91       	pop	r25
     e3c:	8f 91       	pop	r24
     e3e:	0f 90       	pop	r0
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	0f 90       	pop	r0
     e44:	1f 90       	pop	r1
     e46:	18 95       	reti

00000e48 <_ZN7systime11sysTimeInitEv>:
//OUTPUT	: NONE
//	Initialises the Timer3 with prescaler of 1024 sync to system clock
void sysTimeInit()
{
	
	cli();							//disable interrupts
     e48:	f8 94       	cli
	TCCR3A=0;
     e4a:	10 92 90 00 	sts	0x0090, r1
	TCCR3B=(1<<CS32)|(1<<CS30);		//use prescaler of 1024
     e4e:	85 e0       	ldi	r24, 0x05	; 5
     e50:	80 93 91 00 	sts	0x0091, r24
									//counting clock is now F_OSC/1024
									//corresponding to 69.44 uS on 14.7456 MHz
	TCCR3C=0;
     e54:	10 92 92 00 	sts	0x0092, r1
	TIMSK3=1<<TOIE3;				// Enable timer overflow interrupt
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	80 93 71 00 	sts	0x0071, r24
	overflows=0;
     e5e:	10 92 26 02 	sts	0x0226, r1
     e62:	10 92 27 02 	sts	0x0227, r1
     e66:	10 92 28 02 	sts	0x0228, r1
     e6a:	10 92 29 02 	sts	0x0229, r1
	TCNT3=0;						//clear timer3 counter value
     e6e:	10 92 95 00 	sts	0x0095, r1
     e72:	10 92 94 00 	sts	0x0094, r1
	sei();							//Enable interrupts	
     e76:	78 94       	sei
     e78:	08 95       	ret

00000e7a <_ZN7systime13getSysTimeRawEv>:
//FUNCTION  : getSysTimeRaw()
//INPUT		: NONE
//OUTPUT	: returns time ticks (raw counter values with overflows) after initialisation of sysTime
unsigned long  getSysTimeRaw()			//returns the raw countervalue
{
	unsigned long temptime=TCNT3;					//get counter value at this state
     e7a:	20 91 94 00 	lds	r18, 0x0094
     e7e:	30 91 95 00 	lds	r19, 0x0095
	return overflows*65536+temptime;				
     e82:	80 91 26 02 	lds	r24, 0x0226
     e86:	90 91 27 02 	lds	r25, 0x0227
     e8a:	a0 91 28 02 	lds	r26, 0x0228
     e8e:	b0 91 29 02 	lds	r27, 0x0229
     e92:	dc 01       	movw	r26, r24
     e94:	99 27       	eor	r25, r25
     e96:	88 27       	eor	r24, r24
     e98:	bc 01       	movw	r22, r24
     e9a:	cd 01       	movw	r24, r26
     e9c:	62 0f       	add	r22, r18
     e9e:	73 1f       	adc	r23, r19
     ea0:	81 1d       	adc	r24, r1
     ea2:	91 1d       	adc	r25, r1
}
     ea4:	08 95       	ret

00000ea6 <_ZN7systime10getSysTimeEv>:
//FUNCTION  : getSysTime()
//INPUT		: NONE
//OUTPUT	: returns time in milli Seconds after initialisatin of sysTime
unsigned long getSysTime()		
{
	return (unsigned long)(getSysTimeRaw()*0.06944);
     ea6:	e9 df       	rcall	.-46     	; 0xe7a <_ZN7systime13getSysTimeRawEv>
     ea8:	76 d0       	rcall	.+236    	; 0xf96 <__floatunsisf>
     eaa:	2f e8       	ldi	r18, 0x8F	; 143
     eac:	36 e3       	ldi	r19, 0x36	; 54
     eae:	4e e8       	ldi	r20, 0x8E	; 142
     eb0:	5d e3       	ldi	r21, 0x3D	; 61
     eb2:	d7 d0       	rcall	.+430    	; 0x1062 <__mulsf3>
     eb4:	44 c0       	rjmp	.+136    	; 0xf3e <__fixunssfsi>
}
     eb6:	08 95       	ret

00000eb8 <_ZN5uart0C1Em>:

unsigned char uart0::read(void)
{
	while(!(UCSR0A & (1<<RXC0)));		//wait for data to be received
	return UDR0;
}
     eb8:	cf 92       	push	r12
     eba:	df 92       	push	r13
     ebc:	ef 92       	push	r14
     ebe:	ff 92       	push	r15
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	ec 01       	movw	r28, r24
     ec6:	6a 01       	movw	r12, r20
     ec8:	7b 01       	movw	r14, r22
     eca:	60 e0       	ldi	r22, 0x00	; 0
     ecc:	70 e1       	ldi	r23, 0x10	; 16
     ece:	8e e0       	ldi	r24, 0x0E	; 14
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	a7 01       	movw	r20, r14
     ed4:	96 01       	movw	r18, r12
     ed6:	50 d1       	rcall	.+672    	; 0x1178 <__udivmodsi4>
     ed8:	21 50       	subi	r18, 0x01	; 1
     eda:	31 09       	sbc	r19, r1
     edc:	30 93 c5 00 	sts	0x00C5, r19
     ee0:	20 93 c4 00 	sts	0x00C4, r18
     ee4:	88 e1       	ldi	r24, 0x18	; 24
     ee6:	80 93 c1 00 	sts	0x00C1, r24
     eea:	86 e0       	ldi	r24, 0x06	; 6
     eec:	80 93 c2 00 	sts	0x00C2, r24
     ef0:	c8 82       	st	Y, r12
     ef2:	d9 82       	std	Y+1, r13	; 0x01
     ef4:	ea 82       	std	Y+2, r14	; 0x02
     ef6:	fb 82       	std	Y+3, r15	; 0x03
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	ff 90       	pop	r15
     efe:	ef 90       	pop	r14
     f00:	df 90       	pop	r13
     f02:	cf 90       	pop	r12
     f04:	08 95       	ret

00000f06 <_ZN5uart05writeEh>:
     f06:	e0 ec       	ldi	r30, 0xC0	; 192
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	85 ff       	sbrs	r24, 5
     f0e:	fd cf       	rjmp	.-6      	; 0xf0a <_ZN5uart05writeEh+0x4>
     f10:	60 93 c6 00 	sts	0x00C6, r22
     f14:	08 95       	ret

00000f16 <_ZN5uart08printStrEPKc>:

void uart0::printStr(const char * str)
{
     f16:	0f 93       	push	r16
     f18:	1f 93       	push	r17
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	8c 01       	movw	r16, r24
     f20:	eb 01       	movw	r28, r22
	while(*str)
     f22:	68 81       	ld	r22, Y
     f24:	66 23       	and	r22, r22
     f26:	31 f0       	breq	.+12     	; 0xf34 <_ZN5uart08printStrEPKc+0x1e>
     f28:	21 96       	adiw	r28, 0x01	; 1
	{
		write(*str++);
     f2a:	c8 01       	movw	r24, r16
     f2c:	ec df       	rcall	.-40     	; 0xf06 <_ZN5uart05writeEh>
	return UDR0;
}

void uart0::printStr(const char * str)
{
	while(*str)
     f2e:	69 91       	ld	r22, Y+
     f30:	61 11       	cpse	r22, r1
     f32:	fb cf       	rjmp	.-10     	; 0xf2a <_ZN5uart08printStrEPKc+0x14>
	{
		write(*str++);
	}
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	1f 91       	pop	r17
     f3a:	0f 91       	pop	r16
     f3c:	08 95       	ret

00000f3e <__fixunssfsi>:
     f3e:	70 d0       	rcall	.+224    	; 0x1020 <__fp_splitA>
     f40:	88 f0       	brcs	.+34     	; 0xf64 <__fixunssfsi+0x26>
     f42:	9f 57       	subi	r25, 0x7F	; 127
     f44:	90 f0       	brcs	.+36     	; 0xf6a <__fixunssfsi+0x2c>
     f46:	b9 2f       	mov	r27, r25
     f48:	99 27       	eor	r25, r25
     f4a:	b7 51       	subi	r27, 0x17	; 23
     f4c:	a0 f0       	brcs	.+40     	; 0xf76 <__fixunssfsi+0x38>
     f4e:	d1 f0       	breq	.+52     	; 0xf84 <__fixunssfsi+0x46>
     f50:	66 0f       	add	r22, r22
     f52:	77 1f       	adc	r23, r23
     f54:	88 1f       	adc	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	1a f0       	brmi	.+6      	; 0xf60 <__fixunssfsi+0x22>
     f5a:	ba 95       	dec	r27
     f5c:	c9 f7       	brne	.-14     	; 0xf50 <__fixunssfsi+0x12>
     f5e:	12 c0       	rjmp	.+36     	; 0xf84 <__fixunssfsi+0x46>
     f60:	b1 30       	cpi	r27, 0x01	; 1
     f62:	81 f0       	breq	.+32     	; 0xf84 <__fixunssfsi+0x46>
     f64:	77 d0       	rcall	.+238    	; 0x1054 <__fp_zero>
     f66:	b1 e0       	ldi	r27, 0x01	; 1
     f68:	08 95       	ret
     f6a:	74 c0       	rjmp	.+232    	; 0x1054 <__fp_zero>
     f6c:	67 2f       	mov	r22, r23
     f6e:	78 2f       	mov	r23, r24
     f70:	88 27       	eor	r24, r24
     f72:	b8 5f       	subi	r27, 0xF8	; 248
     f74:	39 f0       	breq	.+14     	; 0xf84 <__fixunssfsi+0x46>
     f76:	b9 3f       	cpi	r27, 0xF9	; 249
     f78:	cc f3       	brlt	.-14     	; 0xf6c <__fixunssfsi+0x2e>
     f7a:	86 95       	lsr	r24
     f7c:	77 95       	ror	r23
     f7e:	67 95       	ror	r22
     f80:	b3 95       	inc	r27
     f82:	d9 f7       	brne	.-10     	; 0xf7a <__fixunssfsi+0x3c>
     f84:	3e f4       	brtc	.+14     	; 0xf94 <__fixunssfsi+0x56>
     f86:	90 95       	com	r25
     f88:	80 95       	com	r24
     f8a:	70 95       	com	r23
     f8c:	61 95       	neg	r22
     f8e:	7f 4f       	sbci	r23, 0xFF	; 255
     f90:	8f 4f       	sbci	r24, 0xFF	; 255
     f92:	9f 4f       	sbci	r25, 0xFF	; 255
     f94:	08 95       	ret

00000f96 <__floatunsisf>:
     f96:	e8 94       	clt
     f98:	09 c0       	rjmp	.+18     	; 0xfac <__floatsisf+0x12>

00000f9a <__floatsisf>:
     f9a:	97 fb       	bst	r25, 7
     f9c:	3e f4       	brtc	.+14     	; 0xfac <__floatsisf+0x12>
     f9e:	90 95       	com	r25
     fa0:	80 95       	com	r24
     fa2:	70 95       	com	r23
     fa4:	61 95       	neg	r22
     fa6:	7f 4f       	sbci	r23, 0xFF	; 255
     fa8:	8f 4f       	sbci	r24, 0xFF	; 255
     faa:	9f 4f       	sbci	r25, 0xFF	; 255
     fac:	99 23       	and	r25, r25
     fae:	a9 f0       	breq	.+42     	; 0xfda <__floatsisf+0x40>
     fb0:	f9 2f       	mov	r31, r25
     fb2:	96 e9       	ldi	r25, 0x96	; 150
     fb4:	bb 27       	eor	r27, r27
     fb6:	93 95       	inc	r25
     fb8:	f6 95       	lsr	r31
     fba:	87 95       	ror	r24
     fbc:	77 95       	ror	r23
     fbe:	67 95       	ror	r22
     fc0:	b7 95       	ror	r27
     fc2:	f1 11       	cpse	r31, r1
     fc4:	f8 cf       	rjmp	.-16     	; 0xfb6 <__floatsisf+0x1c>
     fc6:	fa f4       	brpl	.+62     	; 0x1006 <__floatsisf+0x6c>
     fc8:	bb 0f       	add	r27, r27
     fca:	11 f4       	brne	.+4      	; 0xfd0 <__floatsisf+0x36>
     fcc:	60 ff       	sbrs	r22, 0
     fce:	1b c0       	rjmp	.+54     	; 0x1006 <__floatsisf+0x6c>
     fd0:	6f 5f       	subi	r22, 0xFF	; 255
     fd2:	7f 4f       	sbci	r23, 0xFF	; 255
     fd4:	8f 4f       	sbci	r24, 0xFF	; 255
     fd6:	9f 4f       	sbci	r25, 0xFF	; 255
     fd8:	16 c0       	rjmp	.+44     	; 0x1006 <__floatsisf+0x6c>
     fda:	88 23       	and	r24, r24
     fdc:	11 f0       	breq	.+4      	; 0xfe2 <__floatsisf+0x48>
     fde:	96 e9       	ldi	r25, 0x96	; 150
     fe0:	11 c0       	rjmp	.+34     	; 0x1004 <__floatsisf+0x6a>
     fe2:	77 23       	and	r23, r23
     fe4:	21 f0       	breq	.+8      	; 0xfee <__floatsisf+0x54>
     fe6:	9e e8       	ldi	r25, 0x8E	; 142
     fe8:	87 2f       	mov	r24, r23
     fea:	76 2f       	mov	r23, r22
     fec:	05 c0       	rjmp	.+10     	; 0xff8 <__floatsisf+0x5e>
     fee:	66 23       	and	r22, r22
     ff0:	71 f0       	breq	.+28     	; 0x100e <__floatsisf+0x74>
     ff2:	96 e8       	ldi	r25, 0x86	; 134
     ff4:	86 2f       	mov	r24, r22
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	2a f0       	brmi	.+10     	; 0x1006 <__floatsisf+0x6c>
     ffc:	9a 95       	dec	r25
     ffe:	66 0f       	add	r22, r22
    1000:	77 1f       	adc	r23, r23
    1002:	88 1f       	adc	r24, r24
    1004:	da f7       	brpl	.-10     	; 0xffc <__floatsisf+0x62>
    1006:	88 0f       	add	r24, r24
    1008:	96 95       	lsr	r25
    100a:	87 95       	ror	r24
    100c:	97 f9       	bld	r25, 7
    100e:	08 95       	ret

00001010 <__fp_split3>:
    1010:	57 fd       	sbrc	r21, 7
    1012:	90 58       	subi	r25, 0x80	; 128
    1014:	44 0f       	add	r20, r20
    1016:	55 1f       	adc	r21, r21
    1018:	59 f0       	breq	.+22     	; 0x1030 <__fp_splitA+0x10>
    101a:	5f 3f       	cpi	r21, 0xFF	; 255
    101c:	71 f0       	breq	.+28     	; 0x103a <__fp_splitA+0x1a>
    101e:	47 95       	ror	r20

00001020 <__fp_splitA>:
    1020:	88 0f       	add	r24, r24
    1022:	97 fb       	bst	r25, 7
    1024:	99 1f       	adc	r25, r25
    1026:	61 f0       	breq	.+24     	; 0x1040 <__fp_splitA+0x20>
    1028:	9f 3f       	cpi	r25, 0xFF	; 255
    102a:	79 f0       	breq	.+30     	; 0x104a <__fp_splitA+0x2a>
    102c:	87 95       	ror	r24
    102e:	08 95       	ret
    1030:	12 16       	cp	r1, r18
    1032:	13 06       	cpc	r1, r19
    1034:	14 06       	cpc	r1, r20
    1036:	55 1f       	adc	r21, r21
    1038:	f2 cf       	rjmp	.-28     	; 0x101e <__fp_split3+0xe>
    103a:	46 95       	lsr	r20
    103c:	f1 df       	rcall	.-30     	; 0x1020 <__fp_splitA>
    103e:	08 c0       	rjmp	.+16     	; 0x1050 <__fp_splitA+0x30>
    1040:	16 16       	cp	r1, r22
    1042:	17 06       	cpc	r1, r23
    1044:	18 06       	cpc	r1, r24
    1046:	99 1f       	adc	r25, r25
    1048:	f1 cf       	rjmp	.-30     	; 0x102c <__fp_splitA+0xc>
    104a:	86 95       	lsr	r24
    104c:	71 05       	cpc	r23, r1
    104e:	61 05       	cpc	r22, r1
    1050:	08 94       	sec
    1052:	08 95       	ret

00001054 <__fp_zero>:
    1054:	e8 94       	clt

00001056 <__fp_szero>:
    1056:	bb 27       	eor	r27, r27
    1058:	66 27       	eor	r22, r22
    105a:	77 27       	eor	r23, r23
    105c:	cb 01       	movw	r24, r22
    105e:	97 f9       	bld	r25, 7
    1060:	08 95       	ret

00001062 <__mulsf3>:
    1062:	0b d0       	rcall	.+22     	; 0x107a <__mulsf3x>
    1064:	78 c0       	rjmp	.+240    	; 0x1156 <__fp_round>
    1066:	69 d0       	rcall	.+210    	; 0x113a <__fp_pscA>
    1068:	28 f0       	brcs	.+10     	; 0x1074 <__mulsf3+0x12>
    106a:	6e d0       	rcall	.+220    	; 0x1148 <__fp_pscB>
    106c:	18 f0       	brcs	.+6      	; 0x1074 <__mulsf3+0x12>
    106e:	95 23       	and	r25, r21
    1070:	09 f0       	breq	.+2      	; 0x1074 <__mulsf3+0x12>
    1072:	5a c0       	rjmp	.+180    	; 0x1128 <__fp_inf>
    1074:	5f c0       	rjmp	.+190    	; 0x1134 <__fp_nan>
    1076:	11 24       	eor	r1, r1
    1078:	ee cf       	rjmp	.-36     	; 0x1056 <__fp_szero>

0000107a <__mulsf3x>:
    107a:	ca df       	rcall	.-108    	; 0x1010 <__fp_split3>
    107c:	a0 f3       	brcs	.-24     	; 0x1066 <__mulsf3+0x4>

0000107e <__mulsf3_pse>:
    107e:	95 9f       	mul	r25, r21
    1080:	d1 f3       	breq	.-12     	; 0x1076 <__mulsf3+0x14>
    1082:	95 0f       	add	r25, r21
    1084:	50 e0       	ldi	r21, 0x00	; 0
    1086:	55 1f       	adc	r21, r21
    1088:	62 9f       	mul	r22, r18
    108a:	f0 01       	movw	r30, r0
    108c:	72 9f       	mul	r23, r18
    108e:	bb 27       	eor	r27, r27
    1090:	f0 0d       	add	r31, r0
    1092:	b1 1d       	adc	r27, r1
    1094:	63 9f       	mul	r22, r19
    1096:	aa 27       	eor	r26, r26
    1098:	f0 0d       	add	r31, r0
    109a:	b1 1d       	adc	r27, r1
    109c:	aa 1f       	adc	r26, r26
    109e:	64 9f       	mul	r22, r20
    10a0:	66 27       	eor	r22, r22
    10a2:	b0 0d       	add	r27, r0
    10a4:	a1 1d       	adc	r26, r1
    10a6:	66 1f       	adc	r22, r22
    10a8:	82 9f       	mul	r24, r18
    10aa:	22 27       	eor	r18, r18
    10ac:	b0 0d       	add	r27, r0
    10ae:	a1 1d       	adc	r26, r1
    10b0:	62 1f       	adc	r22, r18
    10b2:	73 9f       	mul	r23, r19
    10b4:	b0 0d       	add	r27, r0
    10b6:	a1 1d       	adc	r26, r1
    10b8:	62 1f       	adc	r22, r18
    10ba:	83 9f       	mul	r24, r19
    10bc:	a0 0d       	add	r26, r0
    10be:	61 1d       	adc	r22, r1
    10c0:	22 1f       	adc	r18, r18
    10c2:	74 9f       	mul	r23, r20
    10c4:	33 27       	eor	r19, r19
    10c6:	a0 0d       	add	r26, r0
    10c8:	61 1d       	adc	r22, r1
    10ca:	23 1f       	adc	r18, r19
    10cc:	84 9f       	mul	r24, r20
    10ce:	60 0d       	add	r22, r0
    10d0:	21 1d       	adc	r18, r1
    10d2:	82 2f       	mov	r24, r18
    10d4:	76 2f       	mov	r23, r22
    10d6:	6a 2f       	mov	r22, r26
    10d8:	11 24       	eor	r1, r1
    10da:	9f 57       	subi	r25, 0x7F	; 127
    10dc:	50 40       	sbci	r21, 0x00	; 0
    10de:	8a f0       	brmi	.+34     	; 0x1102 <__mulsf3_pse+0x84>
    10e0:	e1 f0       	breq	.+56     	; 0x111a <__mulsf3_pse+0x9c>
    10e2:	88 23       	and	r24, r24
    10e4:	4a f0       	brmi	.+18     	; 0x10f8 <__mulsf3_pse+0x7a>
    10e6:	ee 0f       	add	r30, r30
    10e8:	ff 1f       	adc	r31, r31
    10ea:	bb 1f       	adc	r27, r27
    10ec:	66 1f       	adc	r22, r22
    10ee:	77 1f       	adc	r23, r23
    10f0:	88 1f       	adc	r24, r24
    10f2:	91 50       	subi	r25, 0x01	; 1
    10f4:	50 40       	sbci	r21, 0x00	; 0
    10f6:	a9 f7       	brne	.-22     	; 0x10e2 <__mulsf3_pse+0x64>
    10f8:	9e 3f       	cpi	r25, 0xFE	; 254
    10fa:	51 05       	cpc	r21, r1
    10fc:	70 f0       	brcs	.+28     	; 0x111a <__mulsf3_pse+0x9c>
    10fe:	14 c0       	rjmp	.+40     	; 0x1128 <__fp_inf>
    1100:	aa cf       	rjmp	.-172    	; 0x1056 <__fp_szero>
    1102:	5f 3f       	cpi	r21, 0xFF	; 255
    1104:	ec f3       	brlt	.-6      	; 0x1100 <__mulsf3_pse+0x82>
    1106:	98 3e       	cpi	r25, 0xE8	; 232
    1108:	dc f3       	brlt	.-10     	; 0x1100 <__mulsf3_pse+0x82>
    110a:	86 95       	lsr	r24
    110c:	77 95       	ror	r23
    110e:	67 95       	ror	r22
    1110:	b7 95       	ror	r27
    1112:	f7 95       	ror	r31
    1114:	e7 95       	ror	r30
    1116:	9f 5f       	subi	r25, 0xFF	; 255
    1118:	c1 f7       	brne	.-16     	; 0x110a <__mulsf3_pse+0x8c>
    111a:	fe 2b       	or	r31, r30
    111c:	88 0f       	add	r24, r24
    111e:	91 1d       	adc	r25, r1
    1120:	96 95       	lsr	r25
    1122:	87 95       	ror	r24
    1124:	97 f9       	bld	r25, 7
    1126:	08 95       	ret

00001128 <__fp_inf>:
    1128:	97 f9       	bld	r25, 7
    112a:	9f 67       	ori	r25, 0x7F	; 127
    112c:	80 e8       	ldi	r24, 0x80	; 128
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	08 95       	ret

00001134 <__fp_nan>:
    1134:	9f ef       	ldi	r25, 0xFF	; 255
    1136:	80 ec       	ldi	r24, 0xC0	; 192
    1138:	08 95       	ret

0000113a <__fp_pscA>:
    113a:	00 24       	eor	r0, r0
    113c:	0a 94       	dec	r0
    113e:	16 16       	cp	r1, r22
    1140:	17 06       	cpc	r1, r23
    1142:	18 06       	cpc	r1, r24
    1144:	09 06       	cpc	r0, r25
    1146:	08 95       	ret

00001148 <__fp_pscB>:
    1148:	00 24       	eor	r0, r0
    114a:	0a 94       	dec	r0
    114c:	12 16       	cp	r1, r18
    114e:	13 06       	cpc	r1, r19
    1150:	14 06       	cpc	r1, r20
    1152:	05 06       	cpc	r0, r21
    1154:	08 95       	ret

00001156 <__fp_round>:
    1156:	09 2e       	mov	r0, r25
    1158:	03 94       	inc	r0
    115a:	00 0c       	add	r0, r0
    115c:	11 f4       	brne	.+4      	; 0x1162 <__fp_round+0xc>
    115e:	88 23       	and	r24, r24
    1160:	52 f0       	brmi	.+20     	; 0x1176 <__fp_round+0x20>
    1162:	bb 0f       	add	r27, r27
    1164:	40 f4       	brcc	.+16     	; 0x1176 <__fp_round+0x20>
    1166:	bf 2b       	or	r27, r31
    1168:	11 f4       	brne	.+4      	; 0x116e <__fp_round+0x18>
    116a:	60 ff       	sbrs	r22, 0
    116c:	04 c0       	rjmp	.+8      	; 0x1176 <__fp_round+0x20>
    116e:	6f 5f       	subi	r22, 0xFF	; 255
    1170:	7f 4f       	sbci	r23, 0xFF	; 255
    1172:	8f 4f       	sbci	r24, 0xFF	; 255
    1174:	9f 4f       	sbci	r25, 0xFF	; 255
    1176:	08 95       	ret

00001178 <__udivmodsi4>:
    1178:	a1 e2       	ldi	r26, 0x21	; 33
    117a:	1a 2e       	mov	r1, r26
    117c:	aa 1b       	sub	r26, r26
    117e:	bb 1b       	sub	r27, r27
    1180:	fd 01       	movw	r30, r26
    1182:	0d c0       	rjmp	.+26     	; 0x119e <__udivmodsi4_ep>

00001184 <__udivmodsi4_loop>:
    1184:	aa 1f       	adc	r26, r26
    1186:	bb 1f       	adc	r27, r27
    1188:	ee 1f       	adc	r30, r30
    118a:	ff 1f       	adc	r31, r31
    118c:	a2 17       	cp	r26, r18
    118e:	b3 07       	cpc	r27, r19
    1190:	e4 07       	cpc	r30, r20
    1192:	f5 07       	cpc	r31, r21
    1194:	20 f0       	brcs	.+8      	; 0x119e <__udivmodsi4_ep>
    1196:	a2 1b       	sub	r26, r18
    1198:	b3 0b       	sbc	r27, r19
    119a:	e4 0b       	sbc	r30, r20
    119c:	f5 0b       	sbc	r31, r21

0000119e <__udivmodsi4_ep>:
    119e:	66 1f       	adc	r22, r22
    11a0:	77 1f       	adc	r23, r23
    11a2:	88 1f       	adc	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	1a 94       	dec	r1
    11a8:	69 f7       	brne	.-38     	; 0x1184 <__udivmodsi4_loop>
    11aa:	60 95       	com	r22
    11ac:	70 95       	com	r23
    11ae:	80 95       	com	r24
    11b0:	90 95       	com	r25
    11b2:	9b 01       	movw	r18, r22
    11b4:	ac 01       	movw	r20, r24
    11b6:	bd 01       	movw	r22, r26
    11b8:	cf 01       	movw	r24, r30
    11ba:	08 95       	ret

000011bc <__tablejump2__>:
    11bc:	ee 0f       	add	r30, r30
    11be:	ff 1f       	adc	r31, r31

000011c0 <__tablejump__>:
    11c0:	05 90       	lpm	r0, Z+
    11c2:	f4 91       	lpm	r31, Z
    11c4:	e0 2d       	mov	r30, r0
    11c6:	19 94       	eijmp

000011c8 <toupper>:
    11c8:	91 11       	cpse	r25, r1
    11ca:	08 95       	ret
    11cc:	81 56       	subi	r24, 0x61	; 97
    11ce:	8a 51       	subi	r24, 0x1A	; 26
    11d0:	08 f4       	brcc	.+2      	; 0x11d4 <toupper+0xc>
    11d2:	80 52       	subi	r24, 0x20	; 32
    11d4:	85 58       	subi	r24, 0x85	; 133
    11d6:	08 95       	ret

000011d8 <sprintf>:
    11d8:	0f 93       	push	r16
    11da:	1f 93       	push	r17
    11dc:	cf 93       	push	r28
    11de:	df 93       	push	r29
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	2e 97       	sbiw	r28, 0x0e	; 14
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
    11f0:	0e 89       	ldd	r16, Y+22	; 0x16
    11f2:	1f 89       	ldd	r17, Y+23	; 0x17
    11f4:	86 e0       	ldi	r24, 0x06	; 6
    11f6:	8c 83       	std	Y+4, r24	; 0x04
    11f8:	1a 83       	std	Y+2, r17	; 0x02
    11fa:	09 83       	std	Y+1, r16	; 0x01
    11fc:	8f ef       	ldi	r24, 0xFF	; 255
    11fe:	9f e7       	ldi	r25, 0x7F	; 127
    1200:	9e 83       	std	Y+6, r25	; 0x06
    1202:	8d 83       	std	Y+5, r24	; 0x05
    1204:	ae 01       	movw	r20, r28
    1206:	46 5e       	subi	r20, 0xE6	; 230
    1208:	5f 4f       	sbci	r21, 0xFF	; 255
    120a:	68 8d       	ldd	r22, Y+24	; 0x18
    120c:	79 8d       	ldd	r23, Y+25	; 0x19
    120e:	ce 01       	movw	r24, r28
    1210:	01 96       	adiw	r24, 0x01	; 1
    1212:	10 d0       	rcall	.+32     	; 0x1234 <vfprintf>
    1214:	ef 81       	ldd	r30, Y+7	; 0x07
    1216:	f8 85       	ldd	r31, Y+8	; 0x08
    1218:	e0 0f       	add	r30, r16
    121a:	f1 1f       	adc	r31, r17
    121c:	10 82       	st	Z, r1
    121e:	2e 96       	adiw	r28, 0x0e	; 14
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	1f 91       	pop	r17
    1230:	0f 91       	pop	r16
    1232:	08 95       	ret

00001234 <vfprintf>:
    1234:	2f 92       	push	r2
    1236:	3f 92       	push	r3
    1238:	4f 92       	push	r4
    123a:	5f 92       	push	r5
    123c:	6f 92       	push	r6
    123e:	7f 92       	push	r7
    1240:	8f 92       	push	r8
    1242:	9f 92       	push	r9
    1244:	af 92       	push	r10
    1246:	bf 92       	push	r11
    1248:	cf 92       	push	r12
    124a:	df 92       	push	r13
    124c:	ef 92       	push	r14
    124e:	ff 92       	push	r15
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	2c 97       	sbiw	r28, 0x0c	; 12
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	cd bf       	out	0x3d, r28	; 61
    1268:	7c 01       	movw	r14, r24
    126a:	6b 01       	movw	r12, r22
    126c:	8a 01       	movw	r16, r20
    126e:	fc 01       	movw	r30, r24
    1270:	17 82       	std	Z+7, r1	; 0x07
    1272:	16 82       	std	Z+6, r1	; 0x06
    1274:	83 81       	ldd	r24, Z+3	; 0x03
    1276:	81 ff       	sbrs	r24, 1
    1278:	b0 c1       	rjmp	.+864    	; 0x15da <vfprintf+0x3a6>
    127a:	ce 01       	movw	r24, r28
    127c:	01 96       	adiw	r24, 0x01	; 1
    127e:	4c 01       	movw	r8, r24
    1280:	f7 01       	movw	r30, r14
    1282:	93 81       	ldd	r25, Z+3	; 0x03
    1284:	f6 01       	movw	r30, r12
    1286:	93 fd       	sbrc	r25, 3
    1288:	85 91       	lpm	r24, Z+
    128a:	93 ff       	sbrs	r25, 3
    128c:	81 91       	ld	r24, Z+
    128e:	6f 01       	movw	r12, r30
    1290:	88 23       	and	r24, r24
    1292:	09 f4       	brne	.+2      	; 0x1296 <vfprintf+0x62>
    1294:	9e c1       	rjmp	.+828    	; 0x15d2 <vfprintf+0x39e>
    1296:	85 32       	cpi	r24, 0x25	; 37
    1298:	39 f4       	brne	.+14     	; 0x12a8 <vfprintf+0x74>
    129a:	93 fd       	sbrc	r25, 3
    129c:	85 91       	lpm	r24, Z+
    129e:	93 ff       	sbrs	r25, 3
    12a0:	81 91       	ld	r24, Z+
    12a2:	6f 01       	movw	r12, r30
    12a4:	85 32       	cpi	r24, 0x25	; 37
    12a6:	21 f4       	brne	.+8      	; 0x12b0 <vfprintf+0x7c>
    12a8:	b7 01       	movw	r22, r14
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	c7 d1       	rcall	.+910    	; 0x163c <fputc>
    12ae:	e8 cf       	rjmp	.-48     	; 0x1280 <vfprintf+0x4c>
    12b0:	51 2c       	mov	r5, r1
    12b2:	31 2c       	mov	r3, r1
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	20 32       	cpi	r18, 0x20	; 32
    12b8:	a0 f4       	brcc	.+40     	; 0x12e2 <vfprintf+0xae>
    12ba:	8b 32       	cpi	r24, 0x2B	; 43
    12bc:	69 f0       	breq	.+26     	; 0x12d8 <vfprintf+0xa4>
    12be:	30 f4       	brcc	.+12     	; 0x12cc <vfprintf+0x98>
    12c0:	80 32       	cpi	r24, 0x20	; 32
    12c2:	59 f0       	breq	.+22     	; 0x12da <vfprintf+0xa6>
    12c4:	83 32       	cpi	r24, 0x23	; 35
    12c6:	69 f4       	brne	.+26     	; 0x12e2 <vfprintf+0xae>
    12c8:	20 61       	ori	r18, 0x10	; 16
    12ca:	2c c0       	rjmp	.+88     	; 0x1324 <vfprintf+0xf0>
    12cc:	8d 32       	cpi	r24, 0x2D	; 45
    12ce:	39 f0       	breq	.+14     	; 0x12de <vfprintf+0xaa>
    12d0:	80 33       	cpi	r24, 0x30	; 48
    12d2:	39 f4       	brne	.+14     	; 0x12e2 <vfprintf+0xae>
    12d4:	21 60       	ori	r18, 0x01	; 1
    12d6:	26 c0       	rjmp	.+76     	; 0x1324 <vfprintf+0xf0>
    12d8:	22 60       	ori	r18, 0x02	; 2
    12da:	24 60       	ori	r18, 0x04	; 4
    12dc:	23 c0       	rjmp	.+70     	; 0x1324 <vfprintf+0xf0>
    12de:	28 60       	ori	r18, 0x08	; 8
    12e0:	21 c0       	rjmp	.+66     	; 0x1324 <vfprintf+0xf0>
    12e2:	27 fd       	sbrc	r18, 7
    12e4:	27 c0       	rjmp	.+78     	; 0x1334 <vfprintf+0x100>
    12e6:	30 ed       	ldi	r19, 0xD0	; 208
    12e8:	38 0f       	add	r19, r24
    12ea:	3a 30       	cpi	r19, 0x0A	; 10
    12ec:	78 f4       	brcc	.+30     	; 0x130c <vfprintf+0xd8>
    12ee:	26 ff       	sbrs	r18, 6
    12f0:	06 c0       	rjmp	.+12     	; 0x12fe <vfprintf+0xca>
    12f2:	fa e0       	ldi	r31, 0x0A	; 10
    12f4:	5f 9e       	mul	r5, r31
    12f6:	30 0d       	add	r19, r0
    12f8:	11 24       	eor	r1, r1
    12fa:	53 2e       	mov	r5, r19
    12fc:	13 c0       	rjmp	.+38     	; 0x1324 <vfprintf+0xf0>
    12fe:	8a e0       	ldi	r24, 0x0A	; 10
    1300:	38 9e       	mul	r3, r24
    1302:	30 0d       	add	r19, r0
    1304:	11 24       	eor	r1, r1
    1306:	33 2e       	mov	r3, r19
    1308:	20 62       	ori	r18, 0x20	; 32
    130a:	0c c0       	rjmp	.+24     	; 0x1324 <vfprintf+0xf0>
    130c:	8e 32       	cpi	r24, 0x2E	; 46
    130e:	21 f4       	brne	.+8      	; 0x1318 <vfprintf+0xe4>
    1310:	26 fd       	sbrc	r18, 6
    1312:	5f c1       	rjmp	.+702    	; 0x15d2 <vfprintf+0x39e>
    1314:	20 64       	ori	r18, 0x40	; 64
    1316:	06 c0       	rjmp	.+12     	; 0x1324 <vfprintf+0xf0>
    1318:	8c 36       	cpi	r24, 0x6C	; 108
    131a:	11 f4       	brne	.+4      	; 0x1320 <vfprintf+0xec>
    131c:	20 68       	ori	r18, 0x80	; 128
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <vfprintf+0xf0>
    1320:	88 36       	cpi	r24, 0x68	; 104
    1322:	41 f4       	brne	.+16     	; 0x1334 <vfprintf+0x100>
    1324:	f6 01       	movw	r30, r12
    1326:	93 fd       	sbrc	r25, 3
    1328:	85 91       	lpm	r24, Z+
    132a:	93 ff       	sbrs	r25, 3
    132c:	81 91       	ld	r24, Z+
    132e:	6f 01       	movw	r12, r30
    1330:	81 11       	cpse	r24, r1
    1332:	c1 cf       	rjmp	.-126    	; 0x12b6 <vfprintf+0x82>
    1334:	98 2f       	mov	r25, r24
    1336:	9f 7d       	andi	r25, 0xDF	; 223
    1338:	95 54       	subi	r25, 0x45	; 69
    133a:	93 30       	cpi	r25, 0x03	; 3
    133c:	28 f4       	brcc	.+10     	; 0x1348 <vfprintf+0x114>
    133e:	0c 5f       	subi	r16, 0xFC	; 252
    1340:	1f 4f       	sbci	r17, 0xFF	; 255
    1342:	ff e3       	ldi	r31, 0x3F	; 63
    1344:	f9 83       	std	Y+1, r31	; 0x01
    1346:	0d c0       	rjmp	.+26     	; 0x1362 <vfprintf+0x12e>
    1348:	83 36       	cpi	r24, 0x63	; 99
    134a:	31 f0       	breq	.+12     	; 0x1358 <vfprintf+0x124>
    134c:	83 37       	cpi	r24, 0x73	; 115
    134e:	71 f0       	breq	.+28     	; 0x136c <vfprintf+0x138>
    1350:	83 35       	cpi	r24, 0x53	; 83
    1352:	09 f0       	breq	.+2      	; 0x1356 <vfprintf+0x122>
    1354:	57 c0       	rjmp	.+174    	; 0x1404 <vfprintf+0x1d0>
    1356:	21 c0       	rjmp	.+66     	; 0x139a <vfprintf+0x166>
    1358:	f8 01       	movw	r30, r16
    135a:	80 81       	ld	r24, Z
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	0e 5f       	subi	r16, 0xFE	; 254
    1360:	1f 4f       	sbci	r17, 0xFF	; 255
    1362:	44 24       	eor	r4, r4
    1364:	43 94       	inc	r4
    1366:	51 2c       	mov	r5, r1
    1368:	54 01       	movw	r10, r8
    136a:	14 c0       	rjmp	.+40     	; 0x1394 <vfprintf+0x160>
    136c:	38 01       	movw	r6, r16
    136e:	f2 e0       	ldi	r31, 0x02	; 2
    1370:	6f 0e       	add	r6, r31
    1372:	71 1c       	adc	r7, r1
    1374:	f8 01       	movw	r30, r16
    1376:	a0 80       	ld	r10, Z
    1378:	b1 80       	ldd	r11, Z+1	; 0x01
    137a:	26 ff       	sbrs	r18, 6
    137c:	03 c0       	rjmp	.+6      	; 0x1384 <vfprintf+0x150>
    137e:	65 2d       	mov	r22, r5
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <vfprintf+0x154>
    1384:	6f ef       	ldi	r22, 0xFF	; 255
    1386:	7f ef       	ldi	r23, 0xFF	; 255
    1388:	c5 01       	movw	r24, r10
    138a:	2c 87       	std	Y+12, r18	; 0x0c
    138c:	4c d1       	rcall	.+664    	; 0x1626 <strnlen>
    138e:	2c 01       	movw	r4, r24
    1390:	83 01       	movw	r16, r6
    1392:	2c 85       	ldd	r18, Y+12	; 0x0c
    1394:	2f 77       	andi	r18, 0x7F	; 127
    1396:	22 2e       	mov	r2, r18
    1398:	16 c0       	rjmp	.+44     	; 0x13c6 <vfprintf+0x192>
    139a:	38 01       	movw	r6, r16
    139c:	f2 e0       	ldi	r31, 0x02	; 2
    139e:	6f 0e       	add	r6, r31
    13a0:	71 1c       	adc	r7, r1
    13a2:	f8 01       	movw	r30, r16
    13a4:	a0 80       	ld	r10, Z
    13a6:	b1 80       	ldd	r11, Z+1	; 0x01
    13a8:	26 ff       	sbrs	r18, 6
    13aa:	03 c0       	rjmp	.+6      	; 0x13b2 <vfprintf+0x17e>
    13ac:	65 2d       	mov	r22, r5
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <vfprintf+0x182>
    13b2:	6f ef       	ldi	r22, 0xFF	; 255
    13b4:	7f ef       	ldi	r23, 0xFF	; 255
    13b6:	c5 01       	movw	r24, r10
    13b8:	2c 87       	std	Y+12, r18	; 0x0c
    13ba:	2a d1       	rcall	.+596    	; 0x1610 <strnlen_P>
    13bc:	2c 01       	movw	r4, r24
    13be:	2c 85       	ldd	r18, Y+12	; 0x0c
    13c0:	20 68       	ori	r18, 0x80	; 128
    13c2:	22 2e       	mov	r2, r18
    13c4:	83 01       	movw	r16, r6
    13c6:	23 fc       	sbrc	r2, 3
    13c8:	19 c0       	rjmp	.+50     	; 0x13fc <vfprintf+0x1c8>
    13ca:	83 2d       	mov	r24, r3
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	48 16       	cp	r4, r24
    13d0:	59 06       	cpc	r5, r25
    13d2:	a0 f4       	brcc	.+40     	; 0x13fc <vfprintf+0x1c8>
    13d4:	b7 01       	movw	r22, r14
    13d6:	80 e2       	ldi	r24, 0x20	; 32
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	30 d1       	rcall	.+608    	; 0x163c <fputc>
    13dc:	3a 94       	dec	r3
    13de:	f5 cf       	rjmp	.-22     	; 0x13ca <vfprintf+0x196>
    13e0:	f5 01       	movw	r30, r10
    13e2:	27 fc       	sbrc	r2, 7
    13e4:	85 91       	lpm	r24, Z+
    13e6:	27 fe       	sbrs	r2, 7
    13e8:	81 91       	ld	r24, Z+
    13ea:	5f 01       	movw	r10, r30
    13ec:	b7 01       	movw	r22, r14
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	25 d1       	rcall	.+586    	; 0x163c <fputc>
    13f2:	31 10       	cpse	r3, r1
    13f4:	3a 94       	dec	r3
    13f6:	f1 e0       	ldi	r31, 0x01	; 1
    13f8:	4f 1a       	sub	r4, r31
    13fa:	51 08       	sbc	r5, r1
    13fc:	41 14       	cp	r4, r1
    13fe:	51 04       	cpc	r5, r1
    1400:	79 f7       	brne	.-34     	; 0x13e0 <vfprintf+0x1ac>
    1402:	de c0       	rjmp	.+444    	; 0x15c0 <vfprintf+0x38c>
    1404:	84 36       	cpi	r24, 0x64	; 100
    1406:	11 f0       	breq	.+4      	; 0x140c <vfprintf+0x1d8>
    1408:	89 36       	cpi	r24, 0x69	; 105
    140a:	31 f5       	brne	.+76     	; 0x1458 <vfprintf+0x224>
    140c:	f8 01       	movw	r30, r16
    140e:	27 ff       	sbrs	r18, 7
    1410:	07 c0       	rjmp	.+14     	; 0x1420 <vfprintf+0x1ec>
    1412:	60 81       	ld	r22, Z
    1414:	71 81       	ldd	r23, Z+1	; 0x01
    1416:	82 81       	ldd	r24, Z+2	; 0x02
    1418:	93 81       	ldd	r25, Z+3	; 0x03
    141a:	0c 5f       	subi	r16, 0xFC	; 252
    141c:	1f 4f       	sbci	r17, 0xFF	; 255
    141e:	08 c0       	rjmp	.+16     	; 0x1430 <vfprintf+0x1fc>
    1420:	60 81       	ld	r22, Z
    1422:	71 81       	ldd	r23, Z+1	; 0x01
    1424:	88 27       	eor	r24, r24
    1426:	77 fd       	sbrc	r23, 7
    1428:	80 95       	com	r24
    142a:	98 2f       	mov	r25, r24
    142c:	0e 5f       	subi	r16, 0xFE	; 254
    142e:	1f 4f       	sbci	r17, 0xFF	; 255
    1430:	2f 76       	andi	r18, 0x6F	; 111
    1432:	b2 2e       	mov	r11, r18
    1434:	97 ff       	sbrs	r25, 7
    1436:	09 c0       	rjmp	.+18     	; 0x144a <vfprintf+0x216>
    1438:	90 95       	com	r25
    143a:	80 95       	com	r24
    143c:	70 95       	com	r23
    143e:	61 95       	neg	r22
    1440:	7f 4f       	sbci	r23, 0xFF	; 255
    1442:	8f 4f       	sbci	r24, 0xFF	; 255
    1444:	9f 4f       	sbci	r25, 0xFF	; 255
    1446:	20 68       	ori	r18, 0x80	; 128
    1448:	b2 2e       	mov	r11, r18
    144a:	2a e0       	ldi	r18, 0x0A	; 10
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	a4 01       	movw	r20, r8
    1450:	27 d1       	rcall	.+590    	; 0x16a0 <__ultoa_invert>
    1452:	a8 2e       	mov	r10, r24
    1454:	a8 18       	sub	r10, r8
    1456:	43 c0       	rjmp	.+134    	; 0x14de <vfprintf+0x2aa>
    1458:	85 37       	cpi	r24, 0x75	; 117
    145a:	29 f4       	brne	.+10     	; 0x1466 <vfprintf+0x232>
    145c:	2f 7e       	andi	r18, 0xEF	; 239
    145e:	b2 2e       	mov	r11, r18
    1460:	2a e0       	ldi	r18, 0x0A	; 10
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	25 c0       	rjmp	.+74     	; 0x14b0 <vfprintf+0x27c>
    1466:	f2 2f       	mov	r31, r18
    1468:	f9 7f       	andi	r31, 0xF9	; 249
    146a:	bf 2e       	mov	r11, r31
    146c:	8f 36       	cpi	r24, 0x6F	; 111
    146e:	c1 f0       	breq	.+48     	; 0x14a0 <vfprintf+0x26c>
    1470:	18 f4       	brcc	.+6      	; 0x1478 <vfprintf+0x244>
    1472:	88 35       	cpi	r24, 0x58	; 88
    1474:	79 f0       	breq	.+30     	; 0x1494 <vfprintf+0x260>
    1476:	ad c0       	rjmp	.+346    	; 0x15d2 <vfprintf+0x39e>
    1478:	80 37       	cpi	r24, 0x70	; 112
    147a:	19 f0       	breq	.+6      	; 0x1482 <vfprintf+0x24e>
    147c:	88 37       	cpi	r24, 0x78	; 120
    147e:	21 f0       	breq	.+8      	; 0x1488 <vfprintf+0x254>
    1480:	a8 c0       	rjmp	.+336    	; 0x15d2 <vfprintf+0x39e>
    1482:	2f 2f       	mov	r18, r31
    1484:	20 61       	ori	r18, 0x10	; 16
    1486:	b2 2e       	mov	r11, r18
    1488:	b4 fe       	sbrs	r11, 4
    148a:	0d c0       	rjmp	.+26     	; 0x14a6 <vfprintf+0x272>
    148c:	8b 2d       	mov	r24, r11
    148e:	84 60       	ori	r24, 0x04	; 4
    1490:	b8 2e       	mov	r11, r24
    1492:	09 c0       	rjmp	.+18     	; 0x14a6 <vfprintf+0x272>
    1494:	24 ff       	sbrs	r18, 4
    1496:	0a c0       	rjmp	.+20     	; 0x14ac <vfprintf+0x278>
    1498:	9f 2f       	mov	r25, r31
    149a:	96 60       	ori	r25, 0x06	; 6
    149c:	b9 2e       	mov	r11, r25
    149e:	06 c0       	rjmp	.+12     	; 0x14ac <vfprintf+0x278>
    14a0:	28 e0       	ldi	r18, 0x08	; 8
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	05 c0       	rjmp	.+10     	; 0x14b0 <vfprintf+0x27c>
    14a6:	20 e1       	ldi	r18, 0x10	; 16
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <vfprintf+0x27c>
    14ac:	20 e1       	ldi	r18, 0x10	; 16
    14ae:	32 e0       	ldi	r19, 0x02	; 2
    14b0:	f8 01       	movw	r30, r16
    14b2:	b7 fe       	sbrs	r11, 7
    14b4:	07 c0       	rjmp	.+14     	; 0x14c4 <vfprintf+0x290>
    14b6:	60 81       	ld	r22, Z
    14b8:	71 81       	ldd	r23, Z+1	; 0x01
    14ba:	82 81       	ldd	r24, Z+2	; 0x02
    14bc:	93 81       	ldd	r25, Z+3	; 0x03
    14be:	0c 5f       	subi	r16, 0xFC	; 252
    14c0:	1f 4f       	sbci	r17, 0xFF	; 255
    14c2:	06 c0       	rjmp	.+12     	; 0x14d0 <vfprintf+0x29c>
    14c4:	60 81       	ld	r22, Z
    14c6:	71 81       	ldd	r23, Z+1	; 0x01
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 5f       	subi	r16, 0xFE	; 254
    14ce:	1f 4f       	sbci	r17, 0xFF	; 255
    14d0:	a4 01       	movw	r20, r8
    14d2:	e6 d0       	rcall	.+460    	; 0x16a0 <__ultoa_invert>
    14d4:	a8 2e       	mov	r10, r24
    14d6:	a8 18       	sub	r10, r8
    14d8:	fb 2d       	mov	r31, r11
    14da:	ff 77       	andi	r31, 0x7F	; 127
    14dc:	bf 2e       	mov	r11, r31
    14de:	b6 fe       	sbrs	r11, 6
    14e0:	0b c0       	rjmp	.+22     	; 0x14f8 <vfprintf+0x2c4>
    14e2:	2b 2d       	mov	r18, r11
    14e4:	2e 7f       	andi	r18, 0xFE	; 254
    14e6:	a5 14       	cp	r10, r5
    14e8:	50 f4       	brcc	.+20     	; 0x14fe <vfprintf+0x2ca>
    14ea:	b4 fe       	sbrs	r11, 4
    14ec:	0a c0       	rjmp	.+20     	; 0x1502 <vfprintf+0x2ce>
    14ee:	b2 fc       	sbrc	r11, 2
    14f0:	08 c0       	rjmp	.+16     	; 0x1502 <vfprintf+0x2ce>
    14f2:	2b 2d       	mov	r18, r11
    14f4:	2e 7e       	andi	r18, 0xEE	; 238
    14f6:	05 c0       	rjmp	.+10     	; 0x1502 <vfprintf+0x2ce>
    14f8:	7a 2c       	mov	r7, r10
    14fa:	2b 2d       	mov	r18, r11
    14fc:	03 c0       	rjmp	.+6      	; 0x1504 <vfprintf+0x2d0>
    14fe:	7a 2c       	mov	r7, r10
    1500:	01 c0       	rjmp	.+2      	; 0x1504 <vfprintf+0x2d0>
    1502:	75 2c       	mov	r7, r5
    1504:	24 ff       	sbrs	r18, 4
    1506:	0d c0       	rjmp	.+26     	; 0x1522 <vfprintf+0x2ee>
    1508:	fe 01       	movw	r30, r28
    150a:	ea 0d       	add	r30, r10
    150c:	f1 1d       	adc	r31, r1
    150e:	80 81       	ld	r24, Z
    1510:	80 33       	cpi	r24, 0x30	; 48
    1512:	11 f4       	brne	.+4      	; 0x1518 <vfprintf+0x2e4>
    1514:	29 7e       	andi	r18, 0xE9	; 233
    1516:	09 c0       	rjmp	.+18     	; 0x152a <vfprintf+0x2f6>
    1518:	22 ff       	sbrs	r18, 2
    151a:	06 c0       	rjmp	.+12     	; 0x1528 <vfprintf+0x2f4>
    151c:	73 94       	inc	r7
    151e:	73 94       	inc	r7
    1520:	04 c0       	rjmp	.+8      	; 0x152a <vfprintf+0x2f6>
    1522:	82 2f       	mov	r24, r18
    1524:	86 78       	andi	r24, 0x86	; 134
    1526:	09 f0       	breq	.+2      	; 0x152a <vfprintf+0x2f6>
    1528:	73 94       	inc	r7
    152a:	23 fd       	sbrc	r18, 3
    152c:	12 c0       	rjmp	.+36     	; 0x1552 <vfprintf+0x31e>
    152e:	20 ff       	sbrs	r18, 0
    1530:	06 c0       	rjmp	.+12     	; 0x153e <vfprintf+0x30a>
    1532:	5a 2c       	mov	r5, r10
    1534:	73 14       	cp	r7, r3
    1536:	18 f4       	brcc	.+6      	; 0x153e <vfprintf+0x30a>
    1538:	53 0c       	add	r5, r3
    153a:	57 18       	sub	r5, r7
    153c:	73 2c       	mov	r7, r3
    153e:	73 14       	cp	r7, r3
    1540:	60 f4       	brcc	.+24     	; 0x155a <vfprintf+0x326>
    1542:	b7 01       	movw	r22, r14
    1544:	80 e2       	ldi	r24, 0x20	; 32
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	2c 87       	std	Y+12, r18	; 0x0c
    154a:	78 d0       	rcall	.+240    	; 0x163c <fputc>
    154c:	73 94       	inc	r7
    154e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1550:	f6 cf       	rjmp	.-20     	; 0x153e <vfprintf+0x30a>
    1552:	73 14       	cp	r7, r3
    1554:	10 f4       	brcc	.+4      	; 0x155a <vfprintf+0x326>
    1556:	37 18       	sub	r3, r7
    1558:	01 c0       	rjmp	.+2      	; 0x155c <vfprintf+0x328>
    155a:	31 2c       	mov	r3, r1
    155c:	24 ff       	sbrs	r18, 4
    155e:	11 c0       	rjmp	.+34     	; 0x1582 <vfprintf+0x34e>
    1560:	b7 01       	movw	r22, r14
    1562:	80 e3       	ldi	r24, 0x30	; 48
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	2c 87       	std	Y+12, r18	; 0x0c
    1568:	69 d0       	rcall	.+210    	; 0x163c <fputc>
    156a:	2c 85       	ldd	r18, Y+12	; 0x0c
    156c:	22 ff       	sbrs	r18, 2
    156e:	16 c0       	rjmp	.+44     	; 0x159c <vfprintf+0x368>
    1570:	21 ff       	sbrs	r18, 1
    1572:	03 c0       	rjmp	.+6      	; 0x157a <vfprintf+0x346>
    1574:	88 e5       	ldi	r24, 0x58	; 88
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 c0       	rjmp	.+4      	; 0x157e <vfprintf+0x34a>
    157a:	88 e7       	ldi	r24, 0x78	; 120
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	b7 01       	movw	r22, r14
    1580:	0c c0       	rjmp	.+24     	; 0x159a <vfprintf+0x366>
    1582:	82 2f       	mov	r24, r18
    1584:	86 78       	andi	r24, 0x86	; 134
    1586:	51 f0       	breq	.+20     	; 0x159c <vfprintf+0x368>
    1588:	21 fd       	sbrc	r18, 1
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <vfprintf+0x35c>
    158c:	80 e2       	ldi	r24, 0x20	; 32
    158e:	01 c0       	rjmp	.+2      	; 0x1592 <vfprintf+0x35e>
    1590:	8b e2       	ldi	r24, 0x2B	; 43
    1592:	27 fd       	sbrc	r18, 7
    1594:	8d e2       	ldi	r24, 0x2D	; 45
    1596:	b7 01       	movw	r22, r14
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	50 d0       	rcall	.+160    	; 0x163c <fputc>
    159c:	a5 14       	cp	r10, r5
    159e:	30 f4       	brcc	.+12     	; 0x15ac <vfprintf+0x378>
    15a0:	b7 01       	movw	r22, r14
    15a2:	80 e3       	ldi	r24, 0x30	; 48
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	4a d0       	rcall	.+148    	; 0x163c <fputc>
    15a8:	5a 94       	dec	r5
    15aa:	f8 cf       	rjmp	.-16     	; 0x159c <vfprintf+0x368>
    15ac:	aa 94       	dec	r10
    15ae:	f4 01       	movw	r30, r8
    15b0:	ea 0d       	add	r30, r10
    15b2:	f1 1d       	adc	r31, r1
    15b4:	80 81       	ld	r24, Z
    15b6:	b7 01       	movw	r22, r14
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	40 d0       	rcall	.+128    	; 0x163c <fputc>
    15bc:	a1 10       	cpse	r10, r1
    15be:	f6 cf       	rjmp	.-20     	; 0x15ac <vfprintf+0x378>
    15c0:	33 20       	and	r3, r3
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <vfprintf+0x392>
    15c4:	5d ce       	rjmp	.-838    	; 0x1280 <vfprintf+0x4c>
    15c6:	b7 01       	movw	r22, r14
    15c8:	80 e2       	ldi	r24, 0x20	; 32
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	37 d0       	rcall	.+110    	; 0x163c <fputc>
    15ce:	3a 94       	dec	r3
    15d0:	f7 cf       	rjmp	.-18     	; 0x15c0 <vfprintf+0x38c>
    15d2:	f7 01       	movw	r30, r14
    15d4:	86 81       	ldd	r24, Z+6	; 0x06
    15d6:	97 81       	ldd	r25, Z+7	; 0x07
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <vfprintf+0x3aa>
    15da:	8f ef       	ldi	r24, 0xFF	; 255
    15dc:	9f ef       	ldi	r25, 0xFF	; 255
    15de:	2c 96       	adiw	r28, 0x0c	; 12
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	1f 91       	pop	r17
    15f0:	0f 91       	pop	r16
    15f2:	ff 90       	pop	r15
    15f4:	ef 90       	pop	r14
    15f6:	df 90       	pop	r13
    15f8:	cf 90       	pop	r12
    15fa:	bf 90       	pop	r11
    15fc:	af 90       	pop	r10
    15fe:	9f 90       	pop	r9
    1600:	8f 90       	pop	r8
    1602:	7f 90       	pop	r7
    1604:	6f 90       	pop	r6
    1606:	5f 90       	pop	r5
    1608:	4f 90       	pop	r4
    160a:	3f 90       	pop	r3
    160c:	2f 90       	pop	r2
    160e:	08 95       	ret

00001610 <strnlen_P>:
    1610:	fc 01       	movw	r30, r24
    1612:	05 90       	lpm	r0, Z+
    1614:	61 50       	subi	r22, 0x01	; 1
    1616:	70 40       	sbci	r23, 0x00	; 0
    1618:	01 10       	cpse	r0, r1
    161a:	d8 f7       	brcc	.-10     	; 0x1612 <strnlen_P+0x2>
    161c:	80 95       	com	r24
    161e:	90 95       	com	r25
    1620:	8e 0f       	add	r24, r30
    1622:	9f 1f       	adc	r25, r31
    1624:	08 95       	ret

00001626 <strnlen>:
    1626:	fc 01       	movw	r30, r24
    1628:	61 50       	subi	r22, 0x01	; 1
    162a:	70 40       	sbci	r23, 0x00	; 0
    162c:	01 90       	ld	r0, Z+
    162e:	01 10       	cpse	r0, r1
    1630:	d8 f7       	brcc	.-10     	; 0x1628 <strnlen+0x2>
    1632:	80 95       	com	r24
    1634:	90 95       	com	r25
    1636:	8e 0f       	add	r24, r30
    1638:	9f 1f       	adc	r25, r31
    163a:	08 95       	ret

0000163c <fputc>:
    163c:	0f 93       	push	r16
    163e:	1f 93       	push	r17
    1640:	cf 93       	push	r28
    1642:	df 93       	push	r29
    1644:	18 2f       	mov	r17, r24
    1646:	09 2f       	mov	r16, r25
    1648:	eb 01       	movw	r28, r22
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	81 fd       	sbrc	r24, 1
    164e:	03 c0       	rjmp	.+6      	; 0x1656 <fputc+0x1a>
    1650:	8f ef       	ldi	r24, 0xFF	; 255
    1652:	9f ef       	ldi	r25, 0xFF	; 255
    1654:	20 c0       	rjmp	.+64     	; 0x1696 <fputc+0x5a>
    1656:	82 ff       	sbrs	r24, 2
    1658:	10 c0       	rjmp	.+32     	; 0x167a <fputc+0x3e>
    165a:	4e 81       	ldd	r20, Y+6	; 0x06
    165c:	5f 81       	ldd	r21, Y+7	; 0x07
    165e:	2c 81       	ldd	r18, Y+4	; 0x04
    1660:	3d 81       	ldd	r19, Y+5	; 0x05
    1662:	42 17       	cp	r20, r18
    1664:	53 07       	cpc	r21, r19
    1666:	7c f4       	brge	.+30     	; 0x1686 <fputc+0x4a>
    1668:	e8 81       	ld	r30, Y
    166a:	f9 81       	ldd	r31, Y+1	; 0x01
    166c:	9f 01       	movw	r18, r30
    166e:	2f 5f       	subi	r18, 0xFF	; 255
    1670:	3f 4f       	sbci	r19, 0xFF	; 255
    1672:	39 83       	std	Y+1, r19	; 0x01
    1674:	28 83       	st	Y, r18
    1676:	10 83       	st	Z, r17
    1678:	06 c0       	rjmp	.+12     	; 0x1686 <fputc+0x4a>
    167a:	e8 85       	ldd	r30, Y+8	; 0x08
    167c:	f9 85       	ldd	r31, Y+9	; 0x09
    167e:	81 2f       	mov	r24, r17
    1680:	19 95       	eicall
    1682:	89 2b       	or	r24, r25
    1684:	29 f7       	brne	.-54     	; 0x1650 <fputc+0x14>
    1686:	2e 81       	ldd	r18, Y+6	; 0x06
    1688:	3f 81       	ldd	r19, Y+7	; 0x07
    168a:	2f 5f       	subi	r18, 0xFF	; 255
    168c:	3f 4f       	sbci	r19, 0xFF	; 255
    168e:	3f 83       	std	Y+7, r19	; 0x07
    1690:	2e 83       	std	Y+6, r18	; 0x06
    1692:	81 2f       	mov	r24, r17
    1694:	90 2f       	mov	r25, r16
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	08 95       	ret

000016a0 <__ultoa_invert>:
    16a0:	fa 01       	movw	r30, r20
    16a2:	aa 27       	eor	r26, r26
    16a4:	28 30       	cpi	r18, 0x08	; 8
    16a6:	51 f1       	breq	.+84     	; 0x16fc <__ultoa_invert+0x5c>
    16a8:	20 31       	cpi	r18, 0x10	; 16
    16aa:	81 f1       	breq	.+96     	; 0x170c <__ultoa_invert+0x6c>
    16ac:	e8 94       	clt
    16ae:	6f 93       	push	r22
    16b0:	6e 7f       	andi	r22, 0xFE	; 254
    16b2:	6e 5f       	subi	r22, 0xFE	; 254
    16b4:	7f 4f       	sbci	r23, 0xFF	; 255
    16b6:	8f 4f       	sbci	r24, 0xFF	; 255
    16b8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ba:	af 4f       	sbci	r26, 0xFF	; 255
    16bc:	b1 e0       	ldi	r27, 0x01	; 1
    16be:	3e d0       	rcall	.+124    	; 0x173c <__ultoa_invert+0x9c>
    16c0:	b4 e0       	ldi	r27, 0x04	; 4
    16c2:	3c d0       	rcall	.+120    	; 0x173c <__ultoa_invert+0x9c>
    16c4:	67 0f       	add	r22, r23
    16c6:	78 1f       	adc	r23, r24
    16c8:	89 1f       	adc	r24, r25
    16ca:	9a 1f       	adc	r25, r26
    16cc:	a1 1d       	adc	r26, r1
    16ce:	68 0f       	add	r22, r24
    16d0:	79 1f       	adc	r23, r25
    16d2:	8a 1f       	adc	r24, r26
    16d4:	91 1d       	adc	r25, r1
    16d6:	a1 1d       	adc	r26, r1
    16d8:	6a 0f       	add	r22, r26
    16da:	71 1d       	adc	r23, r1
    16dc:	81 1d       	adc	r24, r1
    16de:	91 1d       	adc	r25, r1
    16e0:	a1 1d       	adc	r26, r1
    16e2:	20 d0       	rcall	.+64     	; 0x1724 <__ultoa_invert+0x84>
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <__ultoa_invert+0x48>
    16e6:	68 94       	set
    16e8:	3f 91       	pop	r19
    16ea:	2a e0       	ldi	r18, 0x0A	; 10
    16ec:	26 9f       	mul	r18, r22
    16ee:	11 24       	eor	r1, r1
    16f0:	30 19       	sub	r19, r0
    16f2:	30 5d       	subi	r19, 0xD0	; 208
    16f4:	31 93       	st	Z+, r19
    16f6:	de f6       	brtc	.-74     	; 0x16ae <__ultoa_invert+0xe>
    16f8:	cf 01       	movw	r24, r30
    16fa:	08 95       	ret
    16fc:	46 2f       	mov	r20, r22
    16fe:	47 70       	andi	r20, 0x07	; 7
    1700:	40 5d       	subi	r20, 0xD0	; 208
    1702:	41 93       	st	Z+, r20
    1704:	b3 e0       	ldi	r27, 0x03	; 3
    1706:	0f d0       	rcall	.+30     	; 0x1726 <__ultoa_invert+0x86>
    1708:	c9 f7       	brne	.-14     	; 0x16fc <__ultoa_invert+0x5c>
    170a:	f6 cf       	rjmp	.-20     	; 0x16f8 <__ultoa_invert+0x58>
    170c:	46 2f       	mov	r20, r22
    170e:	4f 70       	andi	r20, 0x0F	; 15
    1710:	40 5d       	subi	r20, 0xD0	; 208
    1712:	4a 33       	cpi	r20, 0x3A	; 58
    1714:	18 f0       	brcs	.+6      	; 0x171c <__ultoa_invert+0x7c>
    1716:	49 5d       	subi	r20, 0xD9	; 217
    1718:	31 fd       	sbrc	r19, 1
    171a:	40 52       	subi	r20, 0x20	; 32
    171c:	41 93       	st	Z+, r20
    171e:	02 d0       	rcall	.+4      	; 0x1724 <__ultoa_invert+0x84>
    1720:	a9 f7       	brne	.-22     	; 0x170c <__ultoa_invert+0x6c>
    1722:	ea cf       	rjmp	.-44     	; 0x16f8 <__ultoa_invert+0x58>
    1724:	b4 e0       	ldi	r27, 0x04	; 4
    1726:	a6 95       	lsr	r26
    1728:	97 95       	ror	r25
    172a:	87 95       	ror	r24
    172c:	77 95       	ror	r23
    172e:	67 95       	ror	r22
    1730:	ba 95       	dec	r27
    1732:	c9 f7       	brne	.-14     	; 0x1726 <__ultoa_invert+0x86>
    1734:	00 97       	sbiw	r24, 0x00	; 0
    1736:	61 05       	cpc	r22, r1
    1738:	71 05       	cpc	r23, r1
    173a:	08 95       	ret
    173c:	9b 01       	movw	r18, r22
    173e:	ac 01       	movw	r20, r24
    1740:	0a 2e       	mov	r0, r26
    1742:	06 94       	lsr	r0
    1744:	57 95       	ror	r21
    1746:	47 95       	ror	r20
    1748:	37 95       	ror	r19
    174a:	27 95       	ror	r18
    174c:	ba 95       	dec	r27
    174e:	c9 f7       	brne	.-14     	; 0x1742 <__ultoa_invert+0xa2>
    1750:	62 0f       	add	r22, r18
    1752:	73 1f       	adc	r23, r19
    1754:	84 1f       	adc	r24, r20
    1756:	95 1f       	adc	r25, r21
    1758:	a0 1d       	adc	r26, r0
    175a:	08 95       	ret

0000175c <_exit>:
    175c:	f8 94       	cli

0000175e <__stop_program>:
    175e:	ff cf       	rjmp	.-2      	; 0x175e <__stop_program>
