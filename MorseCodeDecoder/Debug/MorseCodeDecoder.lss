
MorseCodeDecoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  00001026  000010ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001026  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800210  00800210  000010ca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010ca  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  00001126  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b93  00000000  00000000  0000129e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009e3  00000000  00000000  00002e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c6e  00000000  00000000  00003814  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003cc  00000000  00000000  00004484  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000691  00000000  00000000  00004850  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f91  00000000  00000000  00004ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000188  00000000  00000000  00005e72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
       a:	00 00       	nop
       c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
       e:	00 00       	nop
      10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
      12:	00 00       	nop
      14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
      16:	00 00       	nop
      18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
      1e:	00 00       	nop
      20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
      3e:	00 00       	nop
      40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
      42:	00 00       	nop
      44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
      46:	00 00       	nop
      48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
      4e:	00 00       	nop
      50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
      52:	00 00       	nop
      54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
      62:	00 00       	nop
      64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
      66:	00 00       	nop
      68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
      72:	00 00       	nop
      74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8e c3       	rjmp	.+1820   	; 0x7aa <__vector_35>
      8e:	00 00       	nop
      90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
      92:	00 00       	nop
      94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
      96:	00 00       	nop
      98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
      be:	00 00       	nop
      c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
      da:	00 00       	nop
      dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
      de:	00 00       	nop
      e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 e2       	ldi	r30, 0x26	; 38
      fc:	f0 e1       	ldi	r31, 0x10	; 16
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 31       	cpi	r26, 0x10	; 16
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a0 e1       	ldi	r26, 0x10	; 16
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a4 31       	cpi	r26, 0x14	; 20
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	d4 d2       	rcall	.+1448   	; 0x6c8 <main>
     120:	80 c7       	rjmp	.+3840   	; 0x1022 <_exit>

00000122 <__bad_interrupt>:
     122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_ZN3LCD10portConfigEv>:
}

//Function to Initialize PORTS
void LCD::portInit()
{
	portConfig();
     124:	87 b1       	in	r24, 0x07	; 7
     126:	87 6f       	ori	r24, 0xF7	; 247
     128:	87 b9       	out	0x07, r24	; 7
     12a:	88 b1       	in	r24, 0x08	; 8
     12c:	80 78       	andi	r24, 0x80	; 128
     12e:	88 b9       	out	0x08, r24	; 8
     130:	08 95       	ret

00000132 <_ZN3LCD7set4bitEv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     132:	86 e6       	ldi	r24, 0x66	; 102
     134:	9e e0       	ldi	r25, 0x0E	; 14
     136:	01 97       	sbiw	r24, 0x01	; 1
     138:	f1 f7       	brne	.-4      	; 0x136 <_ZN3LCD7set4bitEv+0x4>
     13a:	00 00       	nop
//Function to Reset LCD
void LCD::set4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     13c:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     13e:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     140:	80 e3       	ldi	r24, 0x30	; 48
     142:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     144:	42 9a       	sbi	0x08, 2	; 8
     146:	8f ef       	ldi	r24, 0xFF	; 255
     148:	97 e4       	ldi	r25, 0x47	; 71
     14a:	01 97       	sbiw	r24, 0x01	; 1
     14c:	f1 f7       	brne	.-4      	; 0x14a <_ZN3LCD7set4bitEv+0x18>
     14e:	00 c0       	rjmp	.+0      	; 0x150 <_ZN3LCD7set4bitEv+0x1e>
     150:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     152:	42 98       	cbi	0x08, 2	; 8
     154:	86 e6       	ldi	r24, 0x66	; 102
     156:	9e e0       	ldi	r25, 0x0E	; 14
     158:	01 97       	sbiw	r24, 0x01	; 1
     15a:	f1 f7       	brne	.-4      	; 0x158 <_ZN3LCD7set4bitEv+0x26>
     15c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     15e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     160:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     162:	80 e3       	ldi	r24, 0x30	; 48
     164:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     166:	42 9a       	sbi	0x08, 2	; 8
     168:	8f ef       	ldi	r24, 0xFF	; 255
     16a:	97 e4       	ldi	r25, 0x47	; 71
     16c:	01 97       	sbiw	r24, 0x01	; 1
     16e:	f1 f7       	brne	.-4      	; 0x16c <_ZN3LCD7set4bitEv+0x3a>
     170:	00 c0       	rjmp	.+0      	; 0x172 <_ZN3LCD7set4bitEv+0x40>
     172:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     174:	42 98       	cbi	0x08, 2	; 8
     176:	86 e6       	ldi	r24, 0x66	; 102
     178:	9e e0       	ldi	r25, 0x0E	; 14
     17a:	01 97       	sbiw	r24, 0x01	; 1
     17c:	f1 f7       	brne	.-4      	; 0x17a <_ZN3LCD7set4bitEv+0x48>
     17e:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     180:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     182:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     184:	80 e3       	ldi	r24, 0x30	; 48
     186:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     188:	42 9a       	sbi	0x08, 2	; 8
     18a:	8f ef       	ldi	r24, 0xFF	; 255
     18c:	97 e4       	ldi	r25, 0x47	; 71
     18e:	01 97       	sbiw	r24, 0x01	; 1
     190:	f1 f7       	brne	.-4      	; 0x18e <_ZN3LCD7set4bitEv+0x5c>
     192:	00 c0       	rjmp	.+0      	; 0x194 <_ZN3LCD7set4bitEv+0x62>
     194:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     196:	42 98       	cbi	0x08, 2	; 8
     198:	86 e6       	ldi	r24, 0x66	; 102
     19a:	9e e0       	ldi	r25, 0x0E	; 14
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	f1 f7       	brne	.-4      	; 0x19c <_ZN3LCD7set4bitEv+0x6a>
     1a0:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1a2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1a4:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     1a6:	80 e2       	ldi	r24, 0x20	; 32
     1a8:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1aa:	42 9a       	sbi	0x08, 2	; 8
     1ac:	86 e6       	ldi	r24, 0x66	; 102
     1ae:	9e e0       	ldi	r25, 0x0E	; 14
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <_ZN3LCD7set4bitEv+0x7e>
     1b4:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1b6:	42 98       	cbi	0x08, 2	; 8
     1b8:	08 95       	ret

000001ba <_ZN3LCD12writeCommandEh>:
void LCD::writeCommand(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     1ba:	88 b1       	in	r24, 0x08	; 8
     1bc:	8f 70       	andi	r24, 0x0F	; 15
     1be:	88 b9       	out	0x08, r24	; 8
	lcd_port |= temp;
     1c0:	88 b1       	in	r24, 0x08	; 8
//Function to Write Command on LCD
void LCD::writeCommand(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     1c2:	96 2f       	mov	r25, r22
     1c4:	90 7f       	andi	r25, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     1c6:	89 2b       	or	r24, r25
     1c8:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     1ca:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1cc:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1ce:	42 9a       	sbi	0x08, 2	; 8
     1d0:	8f ef       	ldi	r24, 0xFF	; 255
     1d2:	97 e4       	ldi	r25, 0x47	; 71
     1d4:	01 97       	sbiw	r24, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <_ZN3LCD12writeCommandEh+0x1a>
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <_ZN3LCD12writeCommandEh+0x20>
     1da:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     1dc:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     1de:	88 b1       	in	r24, 0x08	; 8
     1e0:	8f 70       	andi	r24, 0x0F	; 15
     1e2:	88 b9       	out	0x08, r24	; 8
	lcd_port |= cmd;
     1e4:	88 b1       	in	r24, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     1e6:	62 95       	swap	r22
     1e8:	60 7f       	andi	r22, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     1ea:	68 2b       	or	r22, r24
     1ec:	68 b9       	out	0x08, r22	; 8
	cbit(lcd_port,RS);
     1ee:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1f0:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1f2:	42 9a       	sbi	0x08, 2	; 8
     1f4:	8f ef       	ldi	r24, 0xFF	; 255
     1f6:	97 e4       	ldi	r25, 0x47	; 71
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <_ZN3LCD12writeCommandEh+0x3e>
     1fc:	00 c0       	rjmp	.+0      	; 0x1fe <_ZN3LCD12writeCommandEh+0x44>
     1fe:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     200:	42 98       	cbi	0x08, 2	; 8
     202:	08 95       	ret

00000204 <_ZN3LCD4initEv>:
	
}

//Function to Initialize LCD
void LCD::init()
{
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	ec 01       	movw	r28, r24
     20a:	86 e6       	ldi	r24, 0x66	; 102
     20c:	9e e0       	ldi	r25, 0x0E	; 14
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	f1 f7       	brne	.-4      	; 0x20e <_ZN3LCD4initEv+0xa>
     212:	00 00       	nop
	_delay_ms(1);

	writeCommand(0x28);			//LCD 4-bit mode and 2 lines.
     214:	68 e2       	ldi	r22, 0x28	; 40
     216:	ce 01       	movw	r24, r28
     218:	d0 df       	rcall	.-96     	; 0x1ba <_ZN3LCD12writeCommandEh>
	writeCommand(0x01);
     21a:	61 e0       	ldi	r22, 0x01	; 1
     21c:	ce 01       	movw	r24, r28
     21e:	cd df       	rcall	.-102    	; 0x1ba <_ZN3LCD12writeCommandEh>
	writeCommand(0x06);
     220:	66 e0       	ldi	r22, 0x06	; 6
     222:	ce 01       	movw	r24, r28
     224:	ca df       	rcall	.-108    	; 0x1ba <_ZN3LCD12writeCommandEh>
	writeCommand(0x0E);
     226:	6e e0       	ldi	r22, 0x0E	; 14
     228:	ce 01       	movw	r24, r28
     22a:	c7 df       	rcall	.-114    	; 0x1ba <_ZN3LCD12writeCommandEh>
	writeCommand(0x80);
     22c:	60 e8       	ldi	r22, 0x80	; 128
     22e:	ce 01       	movw	r24, r28
     230:	c4 df       	rcall	.-120    	; 0x1ba <_ZN3LCD12writeCommandEh>
	
}
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	08 95       	ret

00000238 <_ZN3LCDC1Ev>:
 * Created: 07-03-2015 05:52:49 PM
 *  Author: Ajinkya
 */ 
#include "lcd.h"
#include "stdlib.h"
LCD::LCD()
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	ec 01       	movw	r28, r24
}

//Function to Initialize PORTS
void LCD::portInit()
{
	portConfig();
     23e:	72 df       	rcall	.-284    	; 0x124 <_ZN3LCD10portConfigEv>
#include "lcd.h"
#include "stdlib.h"
LCD::LCD()
{
	portInit();
	set4bit();
     240:	ce 01       	movw	r24, r28
     242:	77 df       	rcall	.-274    	; 0x132 <_ZN3LCD7set4bitEv>
	init();
     244:	ce 01       	movw	r24, r28
     246:	de df       	rcall	.-68     	; 0x204 <_ZN3LCD4initEv>
}
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <_ZN3LCD9writeCharEc>:
void LCD::writeChar(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     24e:	88 b1       	in	r24, 0x08	; 8
     250:	8f 70       	andi	r24, 0x0F	; 15
     252:	88 b9       	out	0x08, r24	; 8
	lcd_port |= temp;
     254:	88 b1       	in	r24, 0x08	; 8
//Function to Write Data on LCD
void LCD::writeChar(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     256:	96 2f       	mov	r25, r22
     258:	90 7f       	andi	r25, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     25a:	89 2b       	or	r24, r25
     25c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     25e:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     260:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     262:	42 9a       	sbi	0x08, 2	; 8
     264:	8f ef       	ldi	r24, 0xFF	; 255
     266:	97 e4       	ldi	r25, 0x47	; 71
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	f1 f7       	brne	.-4      	; 0x268 <_ZN3LCD9writeCharEc+0x1a>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <_ZN3LCD9writeCharEc+0x20>
     26e:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     270:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     272:	88 b1       	in	r24, 0x08	; 8
     274:	8f 70       	andi	r24, 0x0F	; 15
     276:	88 b9       	out	0x08, r24	; 8
	lcd_port |= letter;
     278:	88 b1       	in	r24, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     27a:	62 95       	swap	r22
     27c:	60 7f       	andi	r22, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     27e:	68 2b       	or	r22, r24
     280:	68 b9       	out	0x08, r22	; 8
	sbit(lcd_port,RS);
     282:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     284:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     286:	42 9a       	sbi	0x08, 2	; 8
     288:	8f ef       	ldi	r24, 0xFF	; 255
     28a:	97 e4       	ldi	r25, 0x47	; 71
     28c:	01 97       	sbiw	r24, 0x01	; 1
     28e:	f1 f7       	brne	.-4      	; 0x28c <_ZN3LCD9writeCharEc+0x3e>
     290:	00 c0       	rjmp	.+0      	; 0x292 <_ZN3LCD9writeCharEc+0x44>
     292:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     294:	42 98       	cbi	0x08, 2	; 8
     296:	08 95       	ret

00000298 <_ZN3LCD4homeEv>:


//Function to bring cursor at home position
void LCD::home()
{
	writeCommand(0x80);
     298:	60 e8       	ldi	r22, 0x80	; 128
     29a:	8f cf       	rjmp	.-226    	; 0x1ba <_ZN3LCD12writeCommandEh>
     29c:	08 95       	ret

0000029e <_ZN3LCD5printEPc>:
}


//Function to Print String on LCD
void LCD::print(char *str)
{
     29e:	0f 93       	push	r16
     2a0:	1f 93       	push	r17
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	8c 01       	movw	r16, r24
     2a8:	eb 01       	movw	r28, r22
	while(*str != '\0')
     2aa:	68 81       	ld	r22, Y
     2ac:	66 23       	and	r22, r22
     2ae:	31 f0       	breq	.+12     	; 0x2bc <_ZN3LCD5printEPc+0x1e>
     2b0:	21 96       	adiw	r28, 0x01	; 1
	{
		writeChar(*str);
     2b2:	c8 01       	movw	r24, r16
     2b4:	cc df       	rcall	.-104    	; 0x24e <_ZN3LCD9writeCharEc>


//Function to Print String on LCD
void LCD::print(char *str)
{
	while(*str != '\0')
     2b6:	69 91       	ld	r22, Y+
     2b8:	61 11       	cpse	r22, r1
     2ba:	fb cf       	rjmp	.-10     	; 0x2b2 <_ZN3LCD5printEPc+0x14>
	{
		writeChar(*str);
		str++;
	}
}
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	1f 91       	pop	r17
     2c2:	0f 91       	pop	r16
     2c4:	08 95       	ret

000002c6 <_ZN3LCD6cursorEcc>:
//Position the LCD cursor at "row", "column".

void LCD::cursor (char row, char col)
{
	
	switch (row) {
     2c6:	62 30       	cpi	r22, 0x02	; 2
     2c8:	69 f0       	breq	.+26     	; 0x2e4 <_ZN3LCD6cursorEcc+0x1e>
     2ca:	18 f4       	brcc	.+6      	; 0x2d2 <_ZN3LCD6cursorEcc+0xc>
     2cc:	61 30       	cpi	r22, 0x01	; 1
     2ce:	31 f0       	breq	.+12     	; 0x2dc <_ZN3LCD6cursorEcc+0x16>
     2d0:	15 c0       	rjmp	.+42     	; 0x2fc <_ZN3LCD6cursorEcc+0x36>
     2d2:	63 30       	cpi	r22, 0x03	; 3
     2d4:	59 f0       	breq	.+22     	; 0x2ec <_ZN3LCD6cursorEcc+0x26>
     2d6:	64 30       	cpi	r22, 0x04	; 4
     2d8:	69 f0       	breq	.+26     	; 0x2f4 <_ZN3LCD6cursorEcc+0x2e>
     2da:	10 c0       	rjmp	.+32     	; 0x2fc <_ZN3LCD6cursorEcc+0x36>
		case 1: writeCommand (0x80 + col - 1); break;
     2dc:	6f e7       	ldi	r22, 0x7F	; 127
     2de:	64 0f       	add	r22, r20
     2e0:	6c cf       	rjmp	.-296    	; 0x1ba <_ZN3LCD12writeCommandEh>
     2e2:	08 95       	ret
		case 2: writeCommand (0xc0 + col - 1); break;
     2e4:	6f eb       	ldi	r22, 0xBF	; 191
     2e6:	64 0f       	add	r22, r20
     2e8:	68 cf       	rjmp	.-304    	; 0x1ba <_ZN3LCD12writeCommandEh>
     2ea:	08 95       	ret
		case 3: writeCommand (0x94 + col - 1); break;
     2ec:	63 e9       	ldi	r22, 0x93	; 147
     2ee:	64 0f       	add	r22, r20
     2f0:	64 cf       	rjmp	.-312    	; 0x1ba <_ZN3LCD12writeCommandEh>
     2f2:	08 95       	ret
		case 4: writeCommand (0xd4 + col - 1); break;
     2f4:	63 ed       	ldi	r22, 0xD3	; 211
     2f6:	64 0f       	add	r22, r20
     2f8:	60 cf       	rjmp	.-320    	; 0x1ba <_ZN3LCD12writeCommandEh>
     2fa:	08 95       	ret
		default: break;
	}
	if(row==0&&col==0)home();
     2fc:	61 11       	cpse	r22, r1
     2fe:	03 c0       	rjmp	.+6      	; 0x306 <_ZN3LCD6cursorEcc+0x40>
     300:	41 11       	cpse	r20, r1
     302:	01 c0       	rjmp	.+2      	; 0x306 <_ZN3LCD6cursorEcc+0x40>
     304:	c9 cf       	rjmp	.-110    	; 0x298 <_ZN3LCD4homeEv>
     306:	08 95       	ret

00000308 <_ZN5pulseC1Ev>:
 *  Author: Ajinkya
 */ 
#include "pulse.h"
pulse::pulse()
{
	pulseData.ifData=0;		//set validity of data to invalid
     308:	fc 01       	movw	r30, r24
     30a:	14 86       	std	Z+12, r1	; 0x0c
	timeout=2;
     30c:	ed 59       	subi	r30, 0x9D	; 157
     30e:	ff 4f       	sbci	r31, 0xFF	; 255
     310:	22 e0       	ldi	r18, 0x02	; 2
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	31 83       	std	Z+1, r19	; 0x01
     316:	20 83       	st	Z, r18
	thresholdTime=20;
     318:	32 96       	adiw	r30, 0x02	; 2
     31a:	24 e1       	ldi	r18, 0x14	; 20
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	31 83       	std	Z+1, r19	; 0x01
     320:	20 83       	st	Z, r18
	wordsPerMinute=25;
     322:	36 96       	adiw	r30, 0x06	; 6
     324:	29 e1       	ldi	r18, 0x19	; 25
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	31 83       	std	Z+1, r19	; 0x01
     32a:	20 83       	st	Z, r18
	tDit=1200/wordsPerMinute;
     32c:	34 97       	sbiw	r30, 0x04	; 4
     32e:	20 e3       	ldi	r18, 0x30	; 48
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	31 83       	std	Z+1, r19	; 0x01
     334:	20 83       	st	Z, r18
	tDah=3*tDit;
     336:	32 96       	adiw	r30, 0x02	; 2
     338:	20 e9       	ldi	r18, 0x90	; 144
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	31 83       	std	Z+1, r19	; 0x01
     33e:	20 83       	st	Z, r18
	errorCheck=true;
     340:	34 96       	adiw	r30, 0x04	; 4
     342:	21 e0       	ldi	r18, 0x01	; 1
     344:	20 83       	st	Z, r18
     346:	08 95       	ret

00000348 <_ZN5pulse4initEv>:
//pulse::init initialses the registers for counting the clock pulses on 
//T1 pin of mcu, 
void pulse::init(void)
{
	
	TCCR1A=0;		//not using any other mode
     348:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=(1<<CS12)|(1<<CS11); //set clock source as falling edge on T1 pin
     34c:	86 e0       	ldi	r24, 0x06	; 6
     34e:	80 93 81 00 	sts	0x0081, r24
	TCNT1=0;					//set initial value of counter to zero
     352:	10 92 85 00 	sts	0x0085, r1
     356:	10 92 84 00 	sts	0x0084, r1
	OCR1A=0;					//not using other timer modules
     35a:	10 92 89 00 	sts	0x0089, r1
     35e:	10 92 88 00 	sts	0x0088, r1
	OCR1B=0;
     362:	10 92 8b 00 	sts	0x008B, r1
     366:	10 92 8a 00 	sts	0x008A, r1
	ICR1=0;
     36a:	10 92 87 00 	sts	0x0087, r1
     36e:	10 92 86 00 	sts	0x0086, r1
	TIMSK1=0;					//not using interrupts for timer 1
     372:	10 92 6f 00 	sts	0x006F, r1
	TIFR1=0;
     376:	16 ba       	out	0x16, r1	; 22
	DDRD&=~(1<<PD6);							//make T1 pin as input PD6
     378:	56 98       	cbi	0x0a, 6	; 10
     37a:	08 95       	ret

0000037c <_ZN5pulse5delayEj>:
	}
	return 1;
}
void pulse::delay(unsigned int time_ms)
{
	while(time_ms--)_delay_ms(1);
     37c:	61 15       	cp	r22, r1
     37e:	71 05       	cpc	r23, r1
     380:	51 f0       	breq	.+20     	; 0x396 <_ZN5pulse5delayEj+0x1a>
     382:	86 e6       	ldi	r24, 0x66	; 102
     384:	9e e0       	ldi	r25, 0x0E	; 14
     386:	01 97       	sbiw	r24, 0x01	; 1
     388:	f1 f7       	brne	.-4      	; 0x386 <_ZN5pulse5delayEj+0xa>
     38a:	00 00       	nop
     38c:	61 50       	subi	r22, 0x01	; 1
     38e:	71 09       	sbc	r23, r1
     390:	61 15       	cp	r22, r1
     392:	71 05       	cpc	r23, r1
     394:	b1 f7       	brne	.-20     	; 0x382 <_ZN5pulse5delayEj+0x6>
     396:	08 95       	ret

00000398 <_ZN9pulseInfo17setPulseWidthTimeEv>:
}

void pulseInfo::setPulseWidthTime()
{
     398:	fc 01       	movw	r30, r24
	pulseWidthTime=stopTime-startTime;
     39a:	84 81       	ldd	r24, Z+4	; 0x04
     39c:	95 81       	ldd	r25, Z+5	; 0x05
     39e:	20 81       	ld	r18, Z
     3a0:	31 81       	ldd	r19, Z+1	; 0x01
     3a2:	82 1b       	sub	r24, r18
     3a4:	93 0b       	sbc	r25, r19
     3a6:	93 87       	std	Z+11, r25	; 0x0b
     3a8:	82 87       	std	Z+10, r24	; 0x0a
     3aa:	08 95       	ret

000003ac <_ZN5pulse7captureEv>:
//initialise timer1 in 16 bit counter mode with falling edge on T1 pin
//check every 2 ms that counter is incremented or not
//if incremented continue to check
//else exit loop and save timer value as pulse count 
char pulse::capture()
{
     3ac:	4f 92       	push	r4
     3ae:	5f 92       	push	r5
     3b0:	6f 92       	push	r6
     3b2:	7f 92       	push	r7
     3b4:	af 92       	push	r10
     3b6:	bf 92       	push	r11
     3b8:	cf 92       	push	r12
     3ba:	df 92       	push	r13
     3bc:	ef 92       	push	r14
     3be:	ff 92       	push	r15
     3c0:	0f 93       	push	r16
     3c2:	1f 93       	push	r17
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	ec 01       	movw	r28, r24
	init();
     3ca:	be df       	rcall	.-132    	; 0x348 <_ZN5pulse4initEv>
	pulseData.numberOfEdges	= 0;		
     3cc:	19 86       	std	Y+9, r1	; 0x09
     3ce:	18 86       	std	Y+8, r1	; 0x08
	//need to add time out checking
	unsigned long temptime=systime::getSysTime();
     3d0:	40 d2       	rcall	.+1152   	; 0x852 <_ZN7systime10getSysTimeEv>
     3d2:	2b 01       	movw	r4, r22
     3d4:	3c 01       	movw	r6, r24
	while(TCNT1 == 0){
     3d6:	04 e8       	ldi	r16, 0x84	; 132
     3d8:	10 e0       	ldi	r17, 0x00	; 0
		if( (systime::getSysTime()-temptime)>(unsigned long)(1.5*tDit)) 
     3da:	5e 01       	movw	r10, r28
     3dc:	87 e6       	ldi	r24, 0x67	; 103
     3de:	a8 0e       	add	r10, r24
     3e0:	b1 1c       	adc	r11, r1
{
	init();
	pulseData.numberOfEdges	= 0;		
	//need to add time out checking
	unsigned long temptime=systime::getSysTime();
	while(TCNT1 == 0){
     3e2:	22 c0       	rjmp	.+68     	; 0x428 <_ZN5pulse7captureEv+0x7c>
		if( (systime::getSysTime()-temptime)>(unsigned long)(1.5*tDit)) 
     3e4:	36 d2       	rcall	.+1132   	; 0x852 <_ZN7systime10getSysTimeEv>
     3e6:	6b 01       	movw	r12, r22
     3e8:	7c 01       	movw	r14, r24
     3ea:	c4 18       	sub	r12, r4
     3ec:	d5 08       	sbc	r13, r5
     3ee:	e6 08       	sbc	r14, r6
     3f0:	f7 08       	sbc	r15, r7
     3f2:	f5 01       	movw	r30, r10
     3f4:	60 81       	ld	r22, Z
     3f6:	71 81       	ldd	r23, Z+1	; 0x01
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	5f d2       	rcall	.+1214   	; 0x8bc <__floatunsisf>
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	40 ec       	ldi	r20, 0xC0	; 192
     404:	5f e3       	ldi	r21, 0x3F	; 63
     406:	c0 d2       	rcall	.+1408   	; 0x988 <__mulsf3>
     408:	2d d2       	rcall	.+1114   	; 0x864 <__fixunssfsi>
     40a:	6c 15       	cp	r22, r12
     40c:	7d 05       	cpc	r23, r13
     40e:	8e 05       	cpc	r24, r14
     410:	9f 05       	cpc	r25, r15
     412:	50 f4       	brcc	.+20     	; 0x428 <_ZN5pulse7captureEv+0x7c>
		{
			isDitTimeout=true;
     414:	fe 01       	movw	r30, r28
     416:	ee 59       	subi	r30, 0x9E	; 158
     418:	ff 4f       	sbci	r31, 0xFF	; 255
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	80 83       	st	Z, r24
			flag=0;
     41e:	cf 59       	subi	r28, 0x9F	; 159
     420:	df 4f       	sbci	r29, 0xFF	; 255
     422:	18 82       	st	Y, r1
			return flag;
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	44 c0       	rjmp	.+136    	; 0x4b0 <_ZN5pulse7captureEv+0x104>
{
	init();
	pulseData.numberOfEdges	= 0;		
	//need to add time out checking
	unsigned long temptime=systime::getSysTime();
	while(TCNT1 == 0){
     428:	f8 01       	movw	r30, r16
     42a:	80 81       	ld	r24, Z
     42c:	91 81       	ldd	r25, Z+1	; 0x01
     42e:	89 2b       	or	r24, r25
     430:	c9 f2       	breq	.-78     	; 0x3e4 <_ZN5pulse7captureEv+0x38>
			flag=0;
			return flag;
		}
	};		//wait for first falling edge	
	
	pulseData.startTime=systime::getSysTime();	//save start time 
     432:	0f d2       	rcall	.+1054   	; 0x852 <_ZN7systime10getSysTimeEv>
     434:	68 83       	st	Y, r22
     436:	79 83       	std	Y+1, r23	; 0x01
     438:	8a 83       	std	Y+2, r24	; 0x02
     43a:	9b 83       	std	Y+3, r25	; 0x03
	isDitTimeout=false;
     43c:	fe 01       	movw	r30, r28
     43e:	ee 59       	subi	r30, 0x9E	; 158
     440:	ff 4f       	sbci	r31, 0xFF	; 255
     442:	10 82       	st	Z, r1
	while(true)									
	{
		pulseData.numberOfEdges=TCNT1;
     444:	04 e8       	ldi	r16, 0x84	; 132
     446:	10 e0       	ldi	r17, 0x00	; 0
		delay(timeout);
     448:	7e 01       	movw	r14, r28
     44a:	f3 e6       	ldi	r31, 0x63	; 99
     44c:	ef 0e       	add	r14, r31
     44e:	f1 1c       	adc	r15, r1
	
	pulseData.startTime=systime::getSysTime();	//save start time 
	isDitTimeout=false;
	while(true)									
	{
		pulseData.numberOfEdges=TCNT1;
     450:	f8 01       	movw	r30, r16
     452:	80 81       	ld	r24, Z
     454:	91 81       	ldd	r25, Z+1	; 0x01
     456:	99 87       	std	Y+9, r25	; 0x09
     458:	88 87       	std	Y+8, r24	; 0x08
		delay(timeout);
     45a:	f7 01       	movw	r30, r14
     45c:	60 81       	ld	r22, Z
     45e:	71 81       	ldd	r23, Z+1	; 0x01
     460:	ce 01       	movw	r24, r28
     462:	8c df       	rcall	.-232    	; 0x37c <_ZN5pulse5delayEj>
		if(pulseData.numberOfEdges == TCNT1)break;	//break only if counter value
     464:	f8 01       	movw	r30, r16
     466:	80 81       	ld	r24, Z
     468:	91 81       	ldd	r25, Z+1	; 0x01
     46a:	28 85       	ldd	r18, Y+8	; 0x08
     46c:	39 85       	ldd	r19, Y+9	; 0x09
     46e:	28 17       	cp	r18, r24
     470:	39 07       	cpc	r19, r25
     472:	71 f7       	brne	.-36     	; 0x450 <_ZN5pulse7captureEv+0xa4>
													//does not changes within timout
	}
	pulseData.stopTime=systime::getSysTime();		//save pulse stop time
     474:	ee d1       	rcall	.+988    	; 0x852 <_ZN7systime10getSysTimeEv>
     476:	6c 83       	std	Y+4, r22	; 0x04
     478:	7d 83       	std	Y+5, r23	; 0x05
     47a:	8e 83       	std	Y+6, r24	; 0x06
     47c:	9f 83       	std	Y+7, r25	; 0x07
	pulseData.setPulseWidthTime();					
     47e:	ce 01       	movw	r24, r28
     480:	8b df       	rcall	.-234    	; 0x398 <_ZN9pulseInfo17setPulseWidthTimeEv>
	
	if(pulseData.pulseWidthTime<thresholdTime)
     482:	2a 85       	ldd	r18, Y+10	; 0x0a
     484:	3b 85       	ldd	r19, Y+11	; 0x0b
     486:	fe 01       	movw	r30, r28
     488:	eb 59       	subi	r30, 0x9B	; 155
     48a:	ff 4f       	sbci	r31, 0xFF	; 255
     48c:	80 81       	ld	r24, Z
     48e:	91 81       	ldd	r25, Z+1	; 0x01
     490:	28 17       	cp	r18, r24
     492:	39 07       	cpc	r19, r25
     494:	18 f4       	brcc	.+6      	; 0x49c <_ZN5pulse7captureEv+0xf0>
	{
		flag=0;			//invalid flag : unsuccessful
     496:	34 97       	sbiw	r30, 0x04	; 4
     498:	10 82       	st	Z, r1
     49a:	05 c0       	rjmp	.+10     	; 0x4a6 <_ZN5pulse7captureEv+0xfa>
	}else{
		flag=1;			//valid flag   : successful
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	fe 01       	movw	r30, r28
     4a0:	ef 59       	subi	r30, 0x9F	; 159
     4a2:	ff 4f       	sbci	r31, 0xFF	; 255
     4a4:	80 83       	st	Z, r24
	}
	pulseData.ifData=flag;			//say validity of pulse data
     4a6:	fe 01       	movw	r30, r28
     4a8:	ef 59       	subi	r30, 0x9F	; 159
     4aa:	ff 4f       	sbci	r31, 0xFF	; 255
     4ac:	80 81       	ld	r24, Z
     4ae:	8c 87       	std	Y+12, r24	; 0x0c
	return flag;
}
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	ff 90       	pop	r15
     4ba:	ef 90       	pop	r14
     4bc:	df 90       	pop	r13
     4be:	cf 90       	pop	r12
     4c0:	bf 90       	pop	r11
     4c2:	af 90       	pop	r10
     4c4:	7f 90       	pop	r7
     4c6:	6f 90       	pop	r6
     4c8:	5f 90       	pop	r5
     4ca:	4f 90       	pop	r4
     4cc:	08 95       	ret

000004ce <_ZN5pulse11receiveCodeEv>:

char pulse::receiveCode()
{
     4ce:	cf 92       	push	r12
     4d0:	df 92       	push	r13
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	ec 01       	movw	r28, r24
	char timeoutNo=0;
	for(int i=0;i<6;)
     4e0:	00 e0       	ldi	r16, 0x00	; 0
     4e2:	10 e0       	ldi	r17, 0x00	; 0
	return flag;
}

char pulse::receiveCode()
{
	char timeoutNo=0;
     4e4:	d1 2c       	mov	r13, r1
	for(int i=0;i<6;)
	{
		char isValid = capture();
		if(isValid==1)
		{
			if(isDitTimeout==false)
     4e6:	7c 01       	movw	r14, r24
     4e8:	82 e6       	ldi	r24, 0x62	; 98
     4ea:	e8 0e       	add	r14, r24
     4ec:	f1 1c       	adc	r15, r1
		{
			
			morsePulses[i]=pulseData;
     4ee:	0f 2e       	mov	r0, r31
     4f0:	fd e0       	ldi	r31, 0x0D	; 13
     4f2:	cf 2e       	mov	r12, r31
     4f4:	f0 2d       	mov	r31, r0
char pulse::receiveCode()
{
	char timeoutNo=0;
	for(int i=0;i<6;)
	{
		char isValid = capture();
     4f6:	ce 01       	movw	r24, r28
     4f8:	59 df       	rcall	.-334    	; 0x3ac <_ZN5pulse7captureEv>
		if(isValid==1)
     4fa:	81 30       	cpi	r24, 0x01	; 1
     4fc:	79 f5       	brne	.+94     	; 0x55c <_ZN5pulse11receiveCodeEv+0x8e>
		{
			if(isDitTimeout==false)
     4fe:	f7 01       	movw	r30, r14
     500:	80 81       	ld	r24, Z
     502:	81 11       	cpse	r24, r1
     504:	10 c0       	rjmp	.+32     	; 0x526 <_ZN5pulse11receiveCodeEv+0x58>
		{
			
			morsePulses[i]=pulseData;
     506:	0f 5f       	subi	r16, 0xFF	; 255
     508:	1f 4f       	sbci	r17, 0xFF	; 255
     50a:	c0 9e       	mul	r12, r16
     50c:	d0 01       	movw	r26, r0
     50e:	c1 9e       	mul	r12, r17
     510:	b0 0d       	add	r27, r0
     512:	11 24       	eor	r1, r1
     514:	ac 0f       	add	r26, r28
     516:	bd 1f       	adc	r27, r29
     518:	fe 01       	movw	r30, r28
     51a:	8c 2d       	mov	r24, r12
     51c:	01 90       	ld	r0, Z+
     51e:	0d 92       	st	X+, r0
     520:	8a 95       	dec	r24
     522:	e1 f7       	brne	.-8      	; 0x51c <_ZN5pulse11receiveCodeEv+0x4e>
     524:	1b c0       	rjmp	.+54     	; 0x55c <_ZN5pulse11receiveCodeEv+0x8e>
			i++;
		}else{
				timeoutNo++;
     526:	d3 94       	inc	r13
				if(timeoutNo!=1)	//for first timout repeat and for other return it
     528:	f1 e0       	ldi	r31, 0x01	; 1
     52a:	df 16       	cp	r13, r31
     52c:	b9 f0       	breq	.+46     	; 0x55c <_ZN5pulse11receiveCodeEv+0x8e>
				{
					for(int j=5;j>i;j--)
     52e:	05 30       	cpi	r16, 0x05	; 5
     530:	11 05       	cpc	r17, r1
     532:	bc f4       	brge	.+46     	; 0x562 <_ZN5pulse11receiveCodeEv+0x94>
     534:	ce 01       	movw	r24, r28
     536:	c1 54       	subi	r28, 0x41	; 65
     538:	d1 09       	sbc	r29, r1
     53a:	4d e0       	ldi	r20, 0x0D	; 13
     53c:	40 9f       	mul	r20, r16
     53e:	90 01       	movw	r18, r0
     540:	41 9f       	mul	r20, r17
     542:	30 0d       	add	r19, r0
     544:	11 24       	eor	r1, r1
     546:	c2 0f       	add	r28, r18
     548:	d3 1f       	adc	r29, r19
     54a:	fc 01       	movw	r30, r24
     54c:	e6 5a       	subi	r30, 0xA6	; 166
     54e:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						morsePulses[j].ifData=0;				//make all other ifData zero
     550:	10 82       	st	Z, r1
     552:	0d 97       	sbiw	r24, 0x0d	; 13
			i++;
		}else{
				timeoutNo++;
				if(timeoutNo!=1)	//for first timout repeat and for other return it
				{
					for(int j=5;j>i;j--)
     554:	8c 17       	cp	r24, r28
     556:	9d 07       	cpc	r25, r29
     558:	c1 f7       	brne	.-16     	; 0x54a <_ZN5pulse11receiveCodeEv+0x7c>
     55a:	03 c0       	rjmp	.+6      	; 0x562 <_ZN5pulse11receiveCodeEv+0x94>
}

char pulse::receiveCode()
{
	char timeoutNo=0;
	for(int i=0;i<6;)
     55c:	06 30       	cpi	r16, 0x06	; 6
     55e:	11 05       	cpc	r17, r1
     560:	54 f2       	brlt	.-108    	; 0x4f6 <_ZN5pulse11receiveCodeEv+0x28>
		
		}
	
	}
	return 1;
}
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	ff 90       	pop	r15
     56e:	ef 90       	pop	r14
     570:	df 90       	pop	r13
     572:	cf 90       	pop	r12
     574:	08 95       	ret

00000576 <_ZN5pulse14decodeToDitDahEv>:
{
	pulseWidthTime=stopTime-startTime;
}

bool pulse::decodeToDitDah()
{
     576:	4f 92       	push	r4
     578:	5f 92       	push	r5
     57a:	6f 92       	push	r6
     57c:	7f 92       	push	r7
     57e:	8f 92       	push	r8
     580:	9f 92       	push	r9
     582:	af 92       	push	r10
     584:	bf 92       	push	r11
     586:	cf 92       	push	r12
     588:	df 92       	push	r13
     58a:	ef 92       	push	r14
     58c:	ff 92       	push	r15
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
	
	//find number of morse pulses
	int i=0;
	for( i=0;morsePulses[i].ifData!=0;i++);
     596:	ec 01       	movw	r28, r24
     598:	29 8d       	ldd	r18, Y+25	; 0x19
     59a:	21 11       	cpse	r18, r1
     59c:	15 c0       	rjmp	.+42     	; 0x5c8 <_ZN5pulse14decodeToDitDahEv+0x52>
     59e:	fc 01       	movw	r30, r24
     5a0:	dc 01       	movw	r26, r24
     5a2:	a5 5a       	subi	r26, 0xA5	; 165
     5a4:	bf 4f       	sbci	r27, 0xFF	; 255
{
	pulseWidthTime=stopTime-startTime;
}

bool pulse::decodeToDitDah()
{
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
		if(morsePulses[j].ifData==0)		//just to be safe
		{
			DitDah[j]=0;
			continue;
		}
		if(errorCheck)
     5aa:	bc 01       	movw	r22, r24
     5ac:	63 59       	subi	r22, 0x93	; 147
     5ae:	7f 4f       	sbci	r23, 0xFF	; 255
			{
			unsigned long timeWidth (morsePulses[j].startTime-morsePulses[j-1].stopTime) ;
			if(!((timeWidth>tDit/2) && ( timeWidth <tDah/2) ))return false;
			}
		}
		if(morsePulses[j].pulseWidthTime > ((tDit+tDah)/2 ) )	//its a dah
     5b0:	ac 01       	movw	r20, r24
     5b2:	47 59       	subi	r20, 0x97	; 151
     5b4:	5f 4f       	sbci	r21, 0xFF	; 255
     5b6:	89 59       	subi	r24, 0x99	; 153
     5b8:	9f 4f       	sbci	r25, 0xFF	; 255
		{
			DitDah[j]=3;
		}
		else													//its a dit
		{
			DitDah[j]=1;
     5ba:	aa 24       	eor	r10, r10
     5bc:	a3 94       	inc	r10
			if(!((timeWidth>tDit/2) && ( timeWidth <tDah/2) ))return false;
			}
		}
		if(morsePulses[j].pulseWidthTime > ((tDit+tDah)/2 ) )	//its a dah
		{
			DitDah[j]=3;
     5be:	0f 2e       	mov	r0, r31
     5c0:	f3 e0       	ldi	r31, 0x03	; 3
     5c2:	bf 2e       	mov	r11, r31
     5c4:	f0 2d       	mov	r31, r0
     5c6:	0b c0       	rjmp	.+22     	; 0x5de <_ZN5pulse14decodeToDitDahEv+0x68>
     5c8:	9c 01       	movw	r18, r24
     5ca:	2a 5d       	subi	r18, 0xDA	; 218
     5cc:	3f 4f       	sbci	r19, 0xFF	; 255
     5ce:	23 5f       	subi	r18, 0xF3	; 243
     5d0:	3f 4f       	sbci	r19, 0xFF	; 255
     5d2:	f9 01       	movw	r30, r18
     5d4:	3d 97       	sbiw	r30, 0x0d	; 13
bool pulse::decodeToDitDah()
{
	
	//find number of morse pulses
	int i=0;
	for( i=0;morsePulses[i].ifData!=0;i++);
     5d6:	40 81       	ld	r20, Z
     5d8:	41 11       	cpse	r20, r1
     5da:	f9 cf       	rjmp	.-14     	; 0x5ce <_ZN5pulse14decodeToDitDahEv+0x58>
     5dc:	e0 cf       	rjmp	.-64     	; 0x59e <_ZN5pulse14decodeToDitDahEv+0x28>
     5de:	4f 01       	movw	r8, r30
	int numberOfPulses=i;
	for(int j=0;j<6;j++)
	{
		if(morsePulses[j].ifData==0)		//just to be safe
     5e0:	11 8d       	ldd	r17, Z+25	; 0x19
     5e2:	11 11       	cpse	r17, r1
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <_ZN5pulse14decodeToDitDahEv+0x74>
		{
			DitDah[j]=0;
     5e6:	1c 92       	st	X, r1
			continue;
     5e8:	40 c0       	rjmp	.+128    	; 0x66a <_ZN5pulse14decodeToDitDahEv+0xf4>
		}
		if(errorCheck)
     5ea:	eb 01       	movw	r28, r22
     5ec:	18 81       	ld	r17, Y
     5ee:	11 23       	and	r17, r17
     5f0:	49 f1       	breq	.+82     	; 0x644 <_ZN5pulse14decodeToDitDahEv+0xce>
		{
			if(j>0)			//if not the first pulse
     5f2:	12 16       	cp	r1, r18
     5f4:	13 06       	cpc	r1, r19
     5f6:	34 f5       	brge	.+76     	; 0x644 <_ZN5pulse14decodeToDitDahEv+0xce>
			{
			unsigned long timeWidth (morsePulses[j].startTime-morsePulses[j-1].stopTime) ;
     5f8:	c5 84       	ldd	r12, Z+13	; 0x0d
     5fa:	d6 84       	ldd	r13, Z+14	; 0x0e
     5fc:	e7 84       	ldd	r14, Z+15	; 0x0f
     5fe:	f0 88       	ldd	r15, Z+16	; 0x10
     600:	44 80       	ldd	r4, Z+4	; 0x04
     602:	55 80       	ldd	r5, Z+5	; 0x05
     604:	66 80       	ldd	r6, Z+6	; 0x06
     606:	77 80       	ldd	r7, Z+7	; 0x07
     608:	c4 18       	sub	r12, r4
     60a:	d5 08       	sbc	r13, r5
     60c:	e6 08       	sbc	r14, r6
     60e:	f7 08       	sbc	r15, r7
			if(!((timeWidth>tDit/2) && ( timeWidth <tDah/2) ))return false;
     610:	ec 01       	movw	r28, r24
     612:	08 81       	ld	r16, Y
     614:	19 81       	ldd	r17, Y+1	; 0x01
     616:	16 95       	lsr	r17
     618:	07 95       	ror	r16
     61a:	28 01       	movw	r4, r16
     61c:	61 2c       	mov	r6, r1
     61e:	71 2c       	mov	r7, r1
     620:	4c 14       	cp	r4, r12
     622:	5d 04       	cpc	r5, r13
     624:	6e 04       	cpc	r6, r14
     626:	7f 04       	cpc	r7, r15
     628:	48 f5       	brcc	.+82     	; 0x67c <_ZN5pulse14decodeToDitDahEv+0x106>
     62a:	ea 01       	movw	r28, r20
     62c:	08 81       	ld	r16, Y
     62e:	19 81       	ldd	r17, Y+1	; 0x01
     630:	16 95       	lsr	r17
     632:	07 95       	ror	r16
     634:	28 01       	movw	r4, r16
     636:	61 2c       	mov	r6, r1
     638:	71 2c       	mov	r7, r1
     63a:	c4 14       	cp	r12, r4
     63c:	d5 04       	cpc	r13, r5
     63e:	e6 04       	cpc	r14, r6
     640:	f7 04       	cpc	r15, r7
     642:	f0 f4       	brcc	.+60     	; 0x680 <_ZN5pulse14decodeToDitDahEv+0x10a>
			}
		}
		if(morsePulses[j].pulseWidthTime > ((tDit+tDah)/2 ) )	//its a dah
     644:	ea 01       	movw	r28, r20
     646:	e8 80       	ld	r14, Y
     648:	f9 80       	ldd	r15, Y+1	; 0x01
     64a:	ec 01       	movw	r28, r24
     64c:	08 81       	ld	r16, Y
     64e:	19 81       	ldd	r17, Y+1	; 0x01
     650:	0e 0d       	add	r16, r14
     652:	1f 1d       	adc	r17, r15
     654:	16 95       	lsr	r17
     656:	07 95       	ror	r16
     658:	e4 01       	movw	r28, r8
     65a:	ef 88       	ldd	r14, Y+23	; 0x17
     65c:	f8 8c       	ldd	r15, Y+24	; 0x18
     65e:	0e 15       	cp	r16, r14
     660:	1f 05       	cpc	r17, r15
     662:	10 f4       	brcc	.+4      	; 0x668 <_ZN5pulse14decodeToDitDahEv+0xf2>
		{
			DitDah[j]=3;
     664:	bc 92       	st	X, r11
     666:	01 c0       	rjmp	.+2      	; 0x66a <_ZN5pulse14decodeToDitDahEv+0xf4>
		}
		else													//its a dit
		{
			DitDah[j]=1;
     668:	ac 92       	st	X, r10
	
	//find number of morse pulses
	int i=0;
	for( i=0;morsePulses[i].ifData!=0;i++);
	int numberOfPulses=i;
	for(int j=0;j<6;j++)
     66a:	2f 5f       	subi	r18, 0xFF	; 255
     66c:	3f 4f       	sbci	r19, 0xFF	; 255
     66e:	3d 96       	adiw	r30, 0x0d	; 13
     670:	11 96       	adiw	r26, 0x01	; 1
     672:	26 30       	cpi	r18, 0x06	; 6
     674:	31 05       	cpc	r19, r1
     676:	09 f0       	breq	.+2      	; 0x67a <_ZN5pulse14decodeToDitDahEv+0x104>
     678:	b2 cf       	rjmp	.-156    	; 0x5de <_ZN5pulse14decodeToDitDahEv+0x68>
     67a:	04 c0       	rjmp	.+8      	; 0x684 <_ZN5pulse14decodeToDitDahEv+0x10e>
		if(errorCheck)
		{
			if(j>0)			//if not the first pulse
			{
			unsigned long timeWidth (morsePulses[j].startTime-morsePulses[j-1].stopTime) ;
			if(!((timeWidth>tDit/2) && ( timeWidth <tDah/2) ))return false;
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	03 c0       	rjmp	.+6      	; 0x686 <_ZN5pulse14decodeToDitDahEv+0x110>
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	01 c0       	rjmp	.+2      	; 0x686 <_ZN5pulse14decodeToDitDahEv+0x110>
		else													//its a dit
		{
			DitDah[j]=1;
		}
	}
	return true;
     684:	81 e0       	ldi	r24, 0x01	; 1
}
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	1f 91       	pop	r17
     68c:	0f 91       	pop	r16
     68e:	ff 90       	pop	r15
     690:	ef 90       	pop	r14
     692:	df 90       	pop	r13
     694:	cf 90       	pop	r12
     696:	bf 90       	pop	r11
     698:	af 90       	pop	r10
     69a:	9f 90       	pop	r9
     69c:	8f 90       	pop	r8
     69e:	7f 90       	pop	r7
     6a0:	6f 90       	pop	r6
     6a2:	5f 90       	pop	r5
     6a4:	4f 90       	pop	r4
     6a6:	08 95       	ret

000006a8 <_ZN5pulse14getDecodedDataEPc>:
void pulse::getDecodedData(char *buffer)
{
     6a8:	dc 01       	movw	r26, r24
     6aa:	a5 5a       	subi	r26, 0xA5	; 165
     6ac:	bf 4f       	sbci	r27, 0xFF	; 255
     6ae:	e6 2f       	mov	r30, r22
     6b0:	f7 2f       	mov	r31, r23
	for(int i=0;i<6;i++)buffer[i]=DitDah[i]+0x30;
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	8d 91       	ld	r24, X+
     6b8:	80 5d       	subi	r24, 0xD0	; 208
     6ba:	81 93       	st	Z+, r24
     6bc:	2f 5f       	subi	r18, 0xFF	; 255
     6be:	3f 4f       	sbci	r19, 0xFF	; 255
     6c0:	26 30       	cpi	r18, 0x06	; 6
     6c2:	31 05       	cpc	r19, r1
     6c4:	c1 f7       	brne	.-16     	; 0x6b6 <_ZN5pulse14getDecodedDataEPc+0xe>
     6c6:	08 95       	ret

000006c8 <main>:
#include "pins.h"
#include "pulse.h"
#include "systime.h"
#include "lcd.h"
int main(void)
{
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	cd b7       	in	r28, 0x3d	; 61
     6ce:	de b7       	in	r29, 0x3e	; 62
     6d0:	c1 5a       	subi	r28, 0xA1	; 161
     6d2:	d1 09       	sbc	r29, r1
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	f8 94       	cli
     6d8:	de bf       	out	0x3e, r29	; 62
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	cd bf       	out	0x3d, r28	; 61
	LCD lcd;
     6de:	ce 01       	movw	r24, r28
     6e0:	81 59       	subi	r24, 0x91	; 145
     6e2:	9f 4f       	sbci	r25, 0xFF	; 255
     6e4:	a9 dd       	rcall	.-1198   	; 0x238 <_ZN3LCDC1Ev>
	pulse code;
     6e6:	ce 01       	movw	r24, r28
     6e8:	01 96       	adiw	r24, 0x01	; 1
     6ea:	0e de       	rcall	.-996    	; 0x308 <_ZN5pulseC1Ev>
	lcd.print(":)");
     6ec:	60 e0       	ldi	r22, 0x00	; 0
     6ee:	72 e0       	ldi	r23, 0x02	; 2
     6f0:	ce 01       	movw	r24, r28
     6f2:	81 59       	subi	r24, 0x91	; 145
     6f4:	9f 4f       	sbci	r25, 0xFF	; 255
     6f6:	d3 dd       	rcall	.-1114   	; 0x29e <_ZN3LCD5printEPc>
	systime::sysTimeInit();
     6f8:	7d d0       	rcall	.+250    	; 0x7f4 <_ZN7systime11sysTimeInitEv>
	char data[7]="EEEEEE";	
     6fa:	87 e0       	ldi	r24, 0x07	; 7
     6fc:	e9 e0       	ldi	r30, 0x09	; 9
     6fe:	f2 e0       	ldi	r31, 0x02	; 2
     700:	de 01       	movw	r26, r28
     702:	a5 56       	subi	r26, 0x65	; 101
     704:	bf 4f       	sbci	r27, 0xFF	; 255
     706:	01 90       	ld	r0, Z+
     708:	0d 92       	st	X+, r0
     70a:	8a 95       	dec	r24
     70c:	e1 f7       	brne	.-8      	; 0x706 <main+0x3e>
	char buffer [20];
	DDRJ=0xAA;
     70e:	8a ea       	ldi	r24, 0xAA	; 170
     710:	80 93 04 01 	sts	0x0104, r24
			 PORTJ=0XFF;
			 PORTJ=0X00;
		 }
		 code.decodeToDitDah();
		 code.getDecodedData(data);
		 sprintf(buffer,"T:%lu",systime::getSysTime());
     714:	0f 2e       	mov	r0, r31
     716:	f3 e0       	ldi	r31, 0x03	; 3
     718:	cf 2e       	mov	r12, r31
     71a:	f2 e0       	ldi	r31, 0x02	; 2
     71c:	df 2e       	mov	r13, r31
     71e:	f0 2d       	mov	r31, r0
     720:	7e 01       	movw	r14, r28
     722:	87 e8       	ldi	r24, 0x87	; 135
     724:	e8 0e       	add	r14, r24
     726:	f1 1c       	adc	r15, r1
	DDRJ=0xAA;
    while(1)
    {
         while(!code.receiveCode())		//wait while receiving the code
		 {
			 PORTJ=0XFF;
     728:	05 e0       	ldi	r16, 0x05	; 5
     72a:	11 e0       	ldi	r17, 0x01	; 1
     72c:	bb 24       	eor	r11, r11
     72e:	ba 94       	dec	r11
     730:	03 c0       	rjmp	.+6      	; 0x738 <main+0x70>
     732:	f8 01       	movw	r30, r16
     734:	b0 82       	st	Z, r11
			 PORTJ=0X00;
     736:	10 82       	st	Z, r1
	char data[7]="EEEEEE";	
	char buffer [20];
	DDRJ=0xAA;
    while(1)
    {
         while(!code.receiveCode())		//wait while receiving the code
     738:	ce 01       	movw	r24, r28
     73a:	01 96       	adiw	r24, 0x01	; 1
     73c:	c8 de       	rcall	.-624    	; 0x4ce <_ZN5pulse11receiveCodeEv>
     73e:	88 23       	and	r24, r24
     740:	c1 f3       	breq	.-16     	; 0x732 <main+0x6a>
		 {
			 PORTJ=0XFF;
			 PORTJ=0X00;
		 }
		 code.decodeToDitDah();
     742:	ce 01       	movw	r24, r28
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	17 df       	rcall	.-466    	; 0x576 <_ZN5pulse14decodeToDitDahEv>
		 code.getDecodedData(data);
     748:	be 01       	movw	r22, r28
     74a:	65 56       	subi	r22, 0x65	; 101
     74c:	7f 4f       	sbci	r23, 0xFF	; 255
     74e:	ce 01       	movw	r24, r28
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	aa df       	rcall	.-172    	; 0x6a8 <_ZN5pulse14getDecodedDataEPc>
		 sprintf(buffer,"T:%lu",systime::getSysTime());
     754:	7e d0       	rcall	.+252    	; 0x852 <_ZN7systime10getSysTimeEv>
     756:	9f 93       	push	r25
     758:	8f 93       	push	r24
     75a:	7f 93       	push	r23
     75c:	6f 93       	push	r22
     75e:	df 92       	push	r13
     760:	cf 92       	push	r12
     762:	ff 92       	push	r15
     764:	ef 92       	push	r14
     766:	9b d1       	rcall	.+822    	; 0xa9e <sprintf>
		 data[6]=0;
     768:	cf 55       	subi	r28, 0x5F	; 95
     76a:	df 4f       	sbci	r29, 0xFF	; 255
     76c:	18 82       	st	Y, r1
     76e:	c1 5a       	subi	r28, 0xA1	; 161
     770:	d0 40       	sbci	r29, 0x00	; 0
		 lcd.home();
     772:	ce 01       	movw	r24, r28
     774:	81 59       	subi	r24, 0x91	; 145
     776:	9f 4f       	sbci	r25, 0xFF	; 255
     778:	8f dd       	rcall	.-1250   	; 0x298 <_ZN3LCD4homeEv>
		 lcd.print(data);
     77a:	be 01       	movw	r22, r28
     77c:	65 56       	subi	r22, 0x65	; 101
     77e:	7f 4f       	sbci	r23, 0xFF	; 255
     780:	ce 01       	movw	r24, r28
     782:	81 59       	subi	r24, 0x91	; 145
     784:	9f 4f       	sbci	r25, 0xFF	; 255
     786:	8b dd       	rcall	.-1258   	; 0x29e <_ZN3LCD5printEPc>
		 lcd.cursor(2,1);
     788:	41 e0       	ldi	r20, 0x01	; 1
     78a:	62 e0       	ldi	r22, 0x02	; 2
     78c:	ce 01       	movw	r24, r28
     78e:	81 59       	subi	r24, 0x91	; 145
     790:	9f 4f       	sbci	r25, 0xFF	; 255
     792:	99 dd       	rcall	.-1230   	; 0x2c6 <_ZN3LCD6cursorEcc>
		 lcd.print(buffer);
     794:	b7 01       	movw	r22, r14
     796:	ce 01       	movw	r24, r28
     798:	81 59       	subi	r24, 0x91	; 145
     79a:	9f 4f       	sbci	r25, 0xFF	; 255
     79c:	80 dd       	rcall	.-1280   	; 0x29e <_ZN3LCD5printEPc>
     79e:	0f b6       	in	r0, 0x3f	; 63
     7a0:	f8 94       	cli
     7a2:	de bf       	out	0x3e, r29	; 62
     7a4:	0f be       	out	0x3f, r0	; 63
     7a6:	cd bf       	out	0x3d, r28	; 61
     7a8:	c7 cf       	rjmp	.-114    	; 0x738 <main+0x70>

000007aa <__vector_35>:
//OUTPUT	: number of timer3 overflows

unsigned long getOverflows()		
{
	return overflows;	
}
     7aa:	1f 92       	push	r1
     7ac:	0f 92       	push	r0
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	0f 92       	push	r0
     7b2:	11 24       	eor	r1, r1
     7b4:	8f 93       	push	r24
     7b6:	9f 93       	push	r25
     7b8:	af 93       	push	r26
     7ba:	bf 93       	push	r27
     7bc:	80 91 10 02 	lds	r24, 0x0210
     7c0:	90 91 11 02 	lds	r25, 0x0211
     7c4:	a0 91 12 02 	lds	r26, 0x0212
     7c8:	b0 91 13 02 	lds	r27, 0x0213
     7cc:	01 96       	adiw	r24, 0x01	; 1
     7ce:	a1 1d       	adc	r26, r1
     7d0:	b1 1d       	adc	r27, r1
     7d2:	80 93 10 02 	sts	0x0210, r24
     7d6:	90 93 11 02 	sts	0x0211, r25
     7da:	a0 93 12 02 	sts	0x0212, r26
     7de:	b0 93 13 02 	sts	0x0213, r27
     7e2:	bf 91       	pop	r27
     7e4:	af 91       	pop	r26
     7e6:	9f 91       	pop	r25
     7e8:	8f 91       	pop	r24
     7ea:	0f 90       	pop	r0
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	0f 90       	pop	r0
     7f0:	1f 90       	pop	r1
     7f2:	18 95       	reti

000007f4 <_ZN7systime11sysTimeInitEv>:
//OUTPUT	: NONE
//	Initialises the Timer3 with prescaler of 1024 sync to system clock
void sysTimeInit()
{
	
	cli();							//disable interrupts
     7f4:	f8 94       	cli
	TCCR3A=0;
     7f6:	10 92 90 00 	sts	0x0090, r1
	TCCR3B=(1<<CS32)|(1<<CS30);		//use prescaler of 1024
     7fa:	85 e0       	ldi	r24, 0x05	; 5
     7fc:	80 93 91 00 	sts	0x0091, r24
									//counting clock is now F_OSC/1024
									//corresponding to 69.44 uS on 14.7456 MHz
	TCCR3C=0;
     800:	10 92 92 00 	sts	0x0092, r1
	TIMSK3=1<<TOIE3;				// Enable timer overflow interrupt
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	80 93 71 00 	sts	0x0071, r24
	overflows=0;
     80a:	10 92 10 02 	sts	0x0210, r1
     80e:	10 92 11 02 	sts	0x0211, r1
     812:	10 92 12 02 	sts	0x0212, r1
     816:	10 92 13 02 	sts	0x0213, r1
	TCNT3=0;						//clear timer3 counter value
     81a:	10 92 95 00 	sts	0x0095, r1
     81e:	10 92 94 00 	sts	0x0094, r1
	sei();							//Enable interrupts	
     822:	78 94       	sei
     824:	08 95       	ret

00000826 <_ZN7systime13getSysTimeRawEv>:
//FUNCTION  : getSysTimeRaw()
//INPUT		: NONE
//OUTPUT	: returns time ticks (raw counter values with overflows) after initialisation of sysTime
unsigned long  getSysTimeRaw()			//returns the raw countervalue
{
	unsigned long temptime=TCNT3;					//get counter value at this state
     826:	20 91 94 00 	lds	r18, 0x0094
     82a:	30 91 95 00 	lds	r19, 0x0095
	return overflows*65536+temptime;				
     82e:	80 91 10 02 	lds	r24, 0x0210
     832:	90 91 11 02 	lds	r25, 0x0211
     836:	a0 91 12 02 	lds	r26, 0x0212
     83a:	b0 91 13 02 	lds	r27, 0x0213
     83e:	dc 01       	movw	r26, r24
     840:	99 27       	eor	r25, r25
     842:	88 27       	eor	r24, r24
     844:	bc 01       	movw	r22, r24
     846:	cd 01       	movw	r24, r26
     848:	62 0f       	add	r22, r18
     84a:	73 1f       	adc	r23, r19
     84c:	81 1d       	adc	r24, r1
     84e:	91 1d       	adc	r25, r1
}
     850:	08 95       	ret

00000852 <_ZN7systime10getSysTimeEv>:
//FUNCTION  : getSysTime()
//INPUT		: NONE
//OUTPUT	: returns time in milli Seconds after initialisatin of sysTime
unsigned long getSysTime()		
{
	return (unsigned long)(getSysTimeRaw()*0.06944);
     852:	e9 df       	rcall	.-46     	; 0x826 <_ZN7systime13getSysTimeRawEv>
     854:	33 d0       	rcall	.+102    	; 0x8bc <__floatunsisf>
     856:	2f e8       	ldi	r18, 0x8F	; 143
     858:	36 e3       	ldi	r19, 0x36	; 54
     85a:	4e e8       	ldi	r20, 0x8E	; 142
     85c:	5d e3       	ldi	r21, 0x3D	; 61
     85e:	94 d0       	rcall	.+296    	; 0x988 <__mulsf3>
     860:	01 c0       	rjmp	.+2      	; 0x864 <__fixunssfsi>
}
     862:	08 95       	ret

00000864 <__fixunssfsi>:
     864:	70 d0       	rcall	.+224    	; 0x946 <__fp_splitA>
     866:	88 f0       	brcs	.+34     	; 0x88a <__fixunssfsi+0x26>
     868:	9f 57       	subi	r25, 0x7F	; 127
     86a:	90 f0       	brcs	.+36     	; 0x890 <__fixunssfsi+0x2c>
     86c:	b9 2f       	mov	r27, r25
     86e:	99 27       	eor	r25, r25
     870:	b7 51       	subi	r27, 0x17	; 23
     872:	a0 f0       	brcs	.+40     	; 0x89c <__fixunssfsi+0x38>
     874:	d1 f0       	breq	.+52     	; 0x8aa <__fixunssfsi+0x46>
     876:	66 0f       	add	r22, r22
     878:	77 1f       	adc	r23, r23
     87a:	88 1f       	adc	r24, r24
     87c:	99 1f       	adc	r25, r25
     87e:	1a f0       	brmi	.+6      	; 0x886 <__fixunssfsi+0x22>
     880:	ba 95       	dec	r27
     882:	c9 f7       	brne	.-14     	; 0x876 <__fixunssfsi+0x12>
     884:	12 c0       	rjmp	.+36     	; 0x8aa <__fixunssfsi+0x46>
     886:	b1 30       	cpi	r27, 0x01	; 1
     888:	81 f0       	breq	.+32     	; 0x8aa <__fixunssfsi+0x46>
     88a:	77 d0       	rcall	.+238    	; 0x97a <__fp_zero>
     88c:	b1 e0       	ldi	r27, 0x01	; 1
     88e:	08 95       	ret
     890:	74 c0       	rjmp	.+232    	; 0x97a <__fp_zero>
     892:	67 2f       	mov	r22, r23
     894:	78 2f       	mov	r23, r24
     896:	88 27       	eor	r24, r24
     898:	b8 5f       	subi	r27, 0xF8	; 248
     89a:	39 f0       	breq	.+14     	; 0x8aa <__fixunssfsi+0x46>
     89c:	b9 3f       	cpi	r27, 0xF9	; 249
     89e:	cc f3       	brlt	.-14     	; 0x892 <__fixunssfsi+0x2e>
     8a0:	86 95       	lsr	r24
     8a2:	77 95       	ror	r23
     8a4:	67 95       	ror	r22
     8a6:	b3 95       	inc	r27
     8a8:	d9 f7       	brne	.-10     	; 0x8a0 <__fixunssfsi+0x3c>
     8aa:	3e f4       	brtc	.+14     	; 0x8ba <__fixunssfsi+0x56>
     8ac:	90 95       	com	r25
     8ae:	80 95       	com	r24
     8b0:	70 95       	com	r23
     8b2:	61 95       	neg	r22
     8b4:	7f 4f       	sbci	r23, 0xFF	; 255
     8b6:	8f 4f       	sbci	r24, 0xFF	; 255
     8b8:	9f 4f       	sbci	r25, 0xFF	; 255
     8ba:	08 95       	ret

000008bc <__floatunsisf>:
     8bc:	e8 94       	clt
     8be:	09 c0       	rjmp	.+18     	; 0x8d2 <__floatsisf+0x12>

000008c0 <__floatsisf>:
     8c0:	97 fb       	bst	r25, 7
     8c2:	3e f4       	brtc	.+14     	; 0x8d2 <__floatsisf+0x12>
     8c4:	90 95       	com	r25
     8c6:	80 95       	com	r24
     8c8:	70 95       	com	r23
     8ca:	61 95       	neg	r22
     8cc:	7f 4f       	sbci	r23, 0xFF	; 255
     8ce:	8f 4f       	sbci	r24, 0xFF	; 255
     8d0:	9f 4f       	sbci	r25, 0xFF	; 255
     8d2:	99 23       	and	r25, r25
     8d4:	a9 f0       	breq	.+42     	; 0x900 <__floatsisf+0x40>
     8d6:	f9 2f       	mov	r31, r25
     8d8:	96 e9       	ldi	r25, 0x96	; 150
     8da:	bb 27       	eor	r27, r27
     8dc:	93 95       	inc	r25
     8de:	f6 95       	lsr	r31
     8e0:	87 95       	ror	r24
     8e2:	77 95       	ror	r23
     8e4:	67 95       	ror	r22
     8e6:	b7 95       	ror	r27
     8e8:	f1 11       	cpse	r31, r1
     8ea:	f8 cf       	rjmp	.-16     	; 0x8dc <__floatsisf+0x1c>
     8ec:	fa f4       	brpl	.+62     	; 0x92c <__floatsisf+0x6c>
     8ee:	bb 0f       	add	r27, r27
     8f0:	11 f4       	brne	.+4      	; 0x8f6 <__floatsisf+0x36>
     8f2:	60 ff       	sbrs	r22, 0
     8f4:	1b c0       	rjmp	.+54     	; 0x92c <__floatsisf+0x6c>
     8f6:	6f 5f       	subi	r22, 0xFF	; 255
     8f8:	7f 4f       	sbci	r23, 0xFF	; 255
     8fa:	8f 4f       	sbci	r24, 0xFF	; 255
     8fc:	9f 4f       	sbci	r25, 0xFF	; 255
     8fe:	16 c0       	rjmp	.+44     	; 0x92c <__floatsisf+0x6c>
     900:	88 23       	and	r24, r24
     902:	11 f0       	breq	.+4      	; 0x908 <__floatsisf+0x48>
     904:	96 e9       	ldi	r25, 0x96	; 150
     906:	11 c0       	rjmp	.+34     	; 0x92a <__floatsisf+0x6a>
     908:	77 23       	and	r23, r23
     90a:	21 f0       	breq	.+8      	; 0x914 <__floatsisf+0x54>
     90c:	9e e8       	ldi	r25, 0x8E	; 142
     90e:	87 2f       	mov	r24, r23
     910:	76 2f       	mov	r23, r22
     912:	05 c0       	rjmp	.+10     	; 0x91e <__floatsisf+0x5e>
     914:	66 23       	and	r22, r22
     916:	71 f0       	breq	.+28     	; 0x934 <__floatsisf+0x74>
     918:	96 e8       	ldi	r25, 0x86	; 134
     91a:	86 2f       	mov	r24, r22
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	2a f0       	brmi	.+10     	; 0x92c <__floatsisf+0x6c>
     922:	9a 95       	dec	r25
     924:	66 0f       	add	r22, r22
     926:	77 1f       	adc	r23, r23
     928:	88 1f       	adc	r24, r24
     92a:	da f7       	brpl	.-10     	; 0x922 <__floatsisf+0x62>
     92c:	88 0f       	add	r24, r24
     92e:	96 95       	lsr	r25
     930:	87 95       	ror	r24
     932:	97 f9       	bld	r25, 7
     934:	08 95       	ret

00000936 <__fp_split3>:
     936:	57 fd       	sbrc	r21, 7
     938:	90 58       	subi	r25, 0x80	; 128
     93a:	44 0f       	add	r20, r20
     93c:	55 1f       	adc	r21, r21
     93e:	59 f0       	breq	.+22     	; 0x956 <__fp_splitA+0x10>
     940:	5f 3f       	cpi	r21, 0xFF	; 255
     942:	71 f0       	breq	.+28     	; 0x960 <__fp_splitA+0x1a>
     944:	47 95       	ror	r20

00000946 <__fp_splitA>:
     946:	88 0f       	add	r24, r24
     948:	97 fb       	bst	r25, 7
     94a:	99 1f       	adc	r25, r25
     94c:	61 f0       	breq	.+24     	; 0x966 <__fp_splitA+0x20>
     94e:	9f 3f       	cpi	r25, 0xFF	; 255
     950:	79 f0       	breq	.+30     	; 0x970 <__fp_splitA+0x2a>
     952:	87 95       	ror	r24
     954:	08 95       	ret
     956:	12 16       	cp	r1, r18
     958:	13 06       	cpc	r1, r19
     95a:	14 06       	cpc	r1, r20
     95c:	55 1f       	adc	r21, r21
     95e:	f2 cf       	rjmp	.-28     	; 0x944 <__fp_split3+0xe>
     960:	46 95       	lsr	r20
     962:	f1 df       	rcall	.-30     	; 0x946 <__fp_splitA>
     964:	08 c0       	rjmp	.+16     	; 0x976 <__fp_splitA+0x30>
     966:	16 16       	cp	r1, r22
     968:	17 06       	cpc	r1, r23
     96a:	18 06       	cpc	r1, r24
     96c:	99 1f       	adc	r25, r25
     96e:	f1 cf       	rjmp	.-30     	; 0x952 <__fp_splitA+0xc>
     970:	86 95       	lsr	r24
     972:	71 05       	cpc	r23, r1
     974:	61 05       	cpc	r22, r1
     976:	08 94       	sec
     978:	08 95       	ret

0000097a <__fp_zero>:
     97a:	e8 94       	clt

0000097c <__fp_szero>:
     97c:	bb 27       	eor	r27, r27
     97e:	66 27       	eor	r22, r22
     980:	77 27       	eor	r23, r23
     982:	cb 01       	movw	r24, r22
     984:	97 f9       	bld	r25, 7
     986:	08 95       	ret

00000988 <__mulsf3>:
     988:	0b d0       	rcall	.+22     	; 0x9a0 <__mulsf3x>
     98a:	78 c0       	rjmp	.+240    	; 0xa7c <__fp_round>
     98c:	69 d0       	rcall	.+210    	; 0xa60 <__fp_pscA>
     98e:	28 f0       	brcs	.+10     	; 0x99a <__mulsf3+0x12>
     990:	6e d0       	rcall	.+220    	; 0xa6e <__fp_pscB>
     992:	18 f0       	brcs	.+6      	; 0x99a <__mulsf3+0x12>
     994:	95 23       	and	r25, r21
     996:	09 f0       	breq	.+2      	; 0x99a <__mulsf3+0x12>
     998:	5a c0       	rjmp	.+180    	; 0xa4e <__fp_inf>
     99a:	5f c0       	rjmp	.+190    	; 0xa5a <__fp_nan>
     99c:	11 24       	eor	r1, r1
     99e:	ee cf       	rjmp	.-36     	; 0x97c <__fp_szero>

000009a0 <__mulsf3x>:
     9a0:	ca df       	rcall	.-108    	; 0x936 <__fp_split3>
     9a2:	a0 f3       	brcs	.-24     	; 0x98c <__mulsf3+0x4>

000009a4 <__mulsf3_pse>:
     9a4:	95 9f       	mul	r25, r21
     9a6:	d1 f3       	breq	.-12     	; 0x99c <__mulsf3+0x14>
     9a8:	95 0f       	add	r25, r21
     9aa:	50 e0       	ldi	r21, 0x00	; 0
     9ac:	55 1f       	adc	r21, r21
     9ae:	62 9f       	mul	r22, r18
     9b0:	f0 01       	movw	r30, r0
     9b2:	72 9f       	mul	r23, r18
     9b4:	bb 27       	eor	r27, r27
     9b6:	f0 0d       	add	r31, r0
     9b8:	b1 1d       	adc	r27, r1
     9ba:	63 9f       	mul	r22, r19
     9bc:	aa 27       	eor	r26, r26
     9be:	f0 0d       	add	r31, r0
     9c0:	b1 1d       	adc	r27, r1
     9c2:	aa 1f       	adc	r26, r26
     9c4:	64 9f       	mul	r22, r20
     9c6:	66 27       	eor	r22, r22
     9c8:	b0 0d       	add	r27, r0
     9ca:	a1 1d       	adc	r26, r1
     9cc:	66 1f       	adc	r22, r22
     9ce:	82 9f       	mul	r24, r18
     9d0:	22 27       	eor	r18, r18
     9d2:	b0 0d       	add	r27, r0
     9d4:	a1 1d       	adc	r26, r1
     9d6:	62 1f       	adc	r22, r18
     9d8:	73 9f       	mul	r23, r19
     9da:	b0 0d       	add	r27, r0
     9dc:	a1 1d       	adc	r26, r1
     9de:	62 1f       	adc	r22, r18
     9e0:	83 9f       	mul	r24, r19
     9e2:	a0 0d       	add	r26, r0
     9e4:	61 1d       	adc	r22, r1
     9e6:	22 1f       	adc	r18, r18
     9e8:	74 9f       	mul	r23, r20
     9ea:	33 27       	eor	r19, r19
     9ec:	a0 0d       	add	r26, r0
     9ee:	61 1d       	adc	r22, r1
     9f0:	23 1f       	adc	r18, r19
     9f2:	84 9f       	mul	r24, r20
     9f4:	60 0d       	add	r22, r0
     9f6:	21 1d       	adc	r18, r1
     9f8:	82 2f       	mov	r24, r18
     9fa:	76 2f       	mov	r23, r22
     9fc:	6a 2f       	mov	r22, r26
     9fe:	11 24       	eor	r1, r1
     a00:	9f 57       	subi	r25, 0x7F	; 127
     a02:	50 40       	sbci	r21, 0x00	; 0
     a04:	8a f0       	brmi	.+34     	; 0xa28 <__mulsf3_pse+0x84>
     a06:	e1 f0       	breq	.+56     	; 0xa40 <__mulsf3_pse+0x9c>
     a08:	88 23       	and	r24, r24
     a0a:	4a f0       	brmi	.+18     	; 0xa1e <__mulsf3_pse+0x7a>
     a0c:	ee 0f       	add	r30, r30
     a0e:	ff 1f       	adc	r31, r31
     a10:	bb 1f       	adc	r27, r27
     a12:	66 1f       	adc	r22, r22
     a14:	77 1f       	adc	r23, r23
     a16:	88 1f       	adc	r24, r24
     a18:	91 50       	subi	r25, 0x01	; 1
     a1a:	50 40       	sbci	r21, 0x00	; 0
     a1c:	a9 f7       	brne	.-22     	; 0xa08 <__mulsf3_pse+0x64>
     a1e:	9e 3f       	cpi	r25, 0xFE	; 254
     a20:	51 05       	cpc	r21, r1
     a22:	70 f0       	brcs	.+28     	; 0xa40 <__mulsf3_pse+0x9c>
     a24:	14 c0       	rjmp	.+40     	; 0xa4e <__fp_inf>
     a26:	aa cf       	rjmp	.-172    	; 0x97c <__fp_szero>
     a28:	5f 3f       	cpi	r21, 0xFF	; 255
     a2a:	ec f3       	brlt	.-6      	; 0xa26 <__mulsf3_pse+0x82>
     a2c:	98 3e       	cpi	r25, 0xE8	; 232
     a2e:	dc f3       	brlt	.-10     	; 0xa26 <__mulsf3_pse+0x82>
     a30:	86 95       	lsr	r24
     a32:	77 95       	ror	r23
     a34:	67 95       	ror	r22
     a36:	b7 95       	ror	r27
     a38:	f7 95       	ror	r31
     a3a:	e7 95       	ror	r30
     a3c:	9f 5f       	subi	r25, 0xFF	; 255
     a3e:	c1 f7       	brne	.-16     	; 0xa30 <__mulsf3_pse+0x8c>
     a40:	fe 2b       	or	r31, r30
     a42:	88 0f       	add	r24, r24
     a44:	91 1d       	adc	r25, r1
     a46:	96 95       	lsr	r25
     a48:	87 95       	ror	r24
     a4a:	97 f9       	bld	r25, 7
     a4c:	08 95       	ret

00000a4e <__fp_inf>:
     a4e:	97 f9       	bld	r25, 7
     a50:	9f 67       	ori	r25, 0x7F	; 127
     a52:	80 e8       	ldi	r24, 0x80	; 128
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	08 95       	ret

00000a5a <__fp_nan>:
     a5a:	9f ef       	ldi	r25, 0xFF	; 255
     a5c:	80 ec       	ldi	r24, 0xC0	; 192
     a5e:	08 95       	ret

00000a60 <__fp_pscA>:
     a60:	00 24       	eor	r0, r0
     a62:	0a 94       	dec	r0
     a64:	16 16       	cp	r1, r22
     a66:	17 06       	cpc	r1, r23
     a68:	18 06       	cpc	r1, r24
     a6a:	09 06       	cpc	r0, r25
     a6c:	08 95       	ret

00000a6e <__fp_pscB>:
     a6e:	00 24       	eor	r0, r0
     a70:	0a 94       	dec	r0
     a72:	12 16       	cp	r1, r18
     a74:	13 06       	cpc	r1, r19
     a76:	14 06       	cpc	r1, r20
     a78:	05 06       	cpc	r0, r21
     a7a:	08 95       	ret

00000a7c <__fp_round>:
     a7c:	09 2e       	mov	r0, r25
     a7e:	03 94       	inc	r0
     a80:	00 0c       	add	r0, r0
     a82:	11 f4       	brne	.+4      	; 0xa88 <__fp_round+0xc>
     a84:	88 23       	and	r24, r24
     a86:	52 f0       	brmi	.+20     	; 0xa9c <__fp_round+0x20>
     a88:	bb 0f       	add	r27, r27
     a8a:	40 f4       	brcc	.+16     	; 0xa9c <__fp_round+0x20>
     a8c:	bf 2b       	or	r27, r31
     a8e:	11 f4       	brne	.+4      	; 0xa94 <__fp_round+0x18>
     a90:	60 ff       	sbrs	r22, 0
     a92:	04 c0       	rjmp	.+8      	; 0xa9c <__fp_round+0x20>
     a94:	6f 5f       	subi	r22, 0xFF	; 255
     a96:	7f 4f       	sbci	r23, 0xFF	; 255
     a98:	8f 4f       	sbci	r24, 0xFF	; 255
     a9a:	9f 4f       	sbci	r25, 0xFF	; 255
     a9c:	08 95       	ret

00000a9e <sprintf>:
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	cd b7       	in	r28, 0x3d	; 61
     aa8:	de b7       	in	r29, 0x3e	; 62
     aaa:	2e 97       	sbiw	r28, 0x0e	; 14
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	f8 94       	cli
     ab0:	de bf       	out	0x3e, r29	; 62
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	cd bf       	out	0x3d, r28	; 61
     ab6:	0e 89       	ldd	r16, Y+22	; 0x16
     ab8:	1f 89       	ldd	r17, Y+23	; 0x17
     aba:	86 e0       	ldi	r24, 0x06	; 6
     abc:	8c 83       	std	Y+4, r24	; 0x04
     abe:	1a 83       	std	Y+2, r17	; 0x02
     ac0:	09 83       	std	Y+1, r16	; 0x01
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	9f e7       	ldi	r25, 0x7F	; 127
     ac6:	9e 83       	std	Y+6, r25	; 0x06
     ac8:	8d 83       	std	Y+5, r24	; 0x05
     aca:	ae 01       	movw	r20, r28
     acc:	46 5e       	subi	r20, 0xE6	; 230
     ace:	5f 4f       	sbci	r21, 0xFF	; 255
     ad0:	68 8d       	ldd	r22, Y+24	; 0x18
     ad2:	79 8d       	ldd	r23, Y+25	; 0x19
     ad4:	ce 01       	movw	r24, r28
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	10 d0       	rcall	.+32     	; 0xafa <vfprintf>
     ada:	ef 81       	ldd	r30, Y+7	; 0x07
     adc:	f8 85       	ldd	r31, Y+8	; 0x08
     ade:	e0 0f       	add	r30, r16
     ae0:	f1 1f       	adc	r31, r17
     ae2:	10 82       	st	Z, r1
     ae4:	2e 96       	adiw	r28, 0x0e	; 14
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	f8 94       	cli
     aea:	de bf       	out	0x3e, r29	; 62
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	cd bf       	out	0x3d, r28	; 61
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	08 95       	ret

00000afa <vfprintf>:
     afa:	2f 92       	push	r2
     afc:	3f 92       	push	r3
     afe:	4f 92       	push	r4
     b00:	5f 92       	push	r5
     b02:	6f 92       	push	r6
     b04:	7f 92       	push	r7
     b06:	8f 92       	push	r8
     b08:	9f 92       	push	r9
     b0a:	af 92       	push	r10
     b0c:	bf 92       	push	r11
     b0e:	cf 92       	push	r12
     b10:	df 92       	push	r13
     b12:	ef 92       	push	r14
     b14:	ff 92       	push	r15
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	cd b7       	in	r28, 0x3d	; 61
     b20:	de b7       	in	r29, 0x3e	; 62
     b22:	2c 97       	sbiw	r28, 0x0c	; 12
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	f8 94       	cli
     b28:	de bf       	out	0x3e, r29	; 62
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	cd bf       	out	0x3d, r28	; 61
     b2e:	7c 01       	movw	r14, r24
     b30:	6b 01       	movw	r12, r22
     b32:	8a 01       	movw	r16, r20
     b34:	fc 01       	movw	r30, r24
     b36:	17 82       	std	Z+7, r1	; 0x07
     b38:	16 82       	std	Z+6, r1	; 0x06
     b3a:	83 81       	ldd	r24, Z+3	; 0x03
     b3c:	81 ff       	sbrs	r24, 1
     b3e:	b0 c1       	rjmp	.+864    	; 0xea0 <vfprintf+0x3a6>
     b40:	ce 01       	movw	r24, r28
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	4c 01       	movw	r8, r24
     b46:	f7 01       	movw	r30, r14
     b48:	93 81       	ldd	r25, Z+3	; 0x03
     b4a:	f6 01       	movw	r30, r12
     b4c:	93 fd       	sbrc	r25, 3
     b4e:	85 91       	lpm	r24, Z+
     b50:	93 ff       	sbrs	r25, 3
     b52:	81 91       	ld	r24, Z+
     b54:	6f 01       	movw	r12, r30
     b56:	88 23       	and	r24, r24
     b58:	09 f4       	brne	.+2      	; 0xb5c <vfprintf+0x62>
     b5a:	9e c1       	rjmp	.+828    	; 0xe98 <vfprintf+0x39e>
     b5c:	85 32       	cpi	r24, 0x25	; 37
     b5e:	39 f4       	brne	.+14     	; 0xb6e <vfprintf+0x74>
     b60:	93 fd       	sbrc	r25, 3
     b62:	85 91       	lpm	r24, Z+
     b64:	93 ff       	sbrs	r25, 3
     b66:	81 91       	ld	r24, Z+
     b68:	6f 01       	movw	r12, r30
     b6a:	85 32       	cpi	r24, 0x25	; 37
     b6c:	21 f4       	brne	.+8      	; 0xb76 <vfprintf+0x7c>
     b6e:	b7 01       	movw	r22, r14
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	c7 d1       	rcall	.+910    	; 0xf02 <fputc>
     b74:	e8 cf       	rjmp	.-48     	; 0xb46 <vfprintf+0x4c>
     b76:	51 2c       	mov	r5, r1
     b78:	31 2c       	mov	r3, r1
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	20 32       	cpi	r18, 0x20	; 32
     b7e:	a0 f4       	brcc	.+40     	; 0xba8 <vfprintf+0xae>
     b80:	8b 32       	cpi	r24, 0x2B	; 43
     b82:	69 f0       	breq	.+26     	; 0xb9e <vfprintf+0xa4>
     b84:	30 f4       	brcc	.+12     	; 0xb92 <vfprintf+0x98>
     b86:	80 32       	cpi	r24, 0x20	; 32
     b88:	59 f0       	breq	.+22     	; 0xba0 <vfprintf+0xa6>
     b8a:	83 32       	cpi	r24, 0x23	; 35
     b8c:	69 f4       	brne	.+26     	; 0xba8 <vfprintf+0xae>
     b8e:	20 61       	ori	r18, 0x10	; 16
     b90:	2c c0       	rjmp	.+88     	; 0xbea <vfprintf+0xf0>
     b92:	8d 32       	cpi	r24, 0x2D	; 45
     b94:	39 f0       	breq	.+14     	; 0xba4 <vfprintf+0xaa>
     b96:	80 33       	cpi	r24, 0x30	; 48
     b98:	39 f4       	brne	.+14     	; 0xba8 <vfprintf+0xae>
     b9a:	21 60       	ori	r18, 0x01	; 1
     b9c:	26 c0       	rjmp	.+76     	; 0xbea <vfprintf+0xf0>
     b9e:	22 60       	ori	r18, 0x02	; 2
     ba0:	24 60       	ori	r18, 0x04	; 4
     ba2:	23 c0       	rjmp	.+70     	; 0xbea <vfprintf+0xf0>
     ba4:	28 60       	ori	r18, 0x08	; 8
     ba6:	21 c0       	rjmp	.+66     	; 0xbea <vfprintf+0xf0>
     ba8:	27 fd       	sbrc	r18, 7
     baa:	27 c0       	rjmp	.+78     	; 0xbfa <vfprintf+0x100>
     bac:	30 ed       	ldi	r19, 0xD0	; 208
     bae:	38 0f       	add	r19, r24
     bb0:	3a 30       	cpi	r19, 0x0A	; 10
     bb2:	78 f4       	brcc	.+30     	; 0xbd2 <vfprintf+0xd8>
     bb4:	26 ff       	sbrs	r18, 6
     bb6:	06 c0       	rjmp	.+12     	; 0xbc4 <vfprintf+0xca>
     bb8:	fa e0       	ldi	r31, 0x0A	; 10
     bba:	5f 9e       	mul	r5, r31
     bbc:	30 0d       	add	r19, r0
     bbe:	11 24       	eor	r1, r1
     bc0:	53 2e       	mov	r5, r19
     bc2:	13 c0       	rjmp	.+38     	; 0xbea <vfprintf+0xf0>
     bc4:	8a e0       	ldi	r24, 0x0A	; 10
     bc6:	38 9e       	mul	r3, r24
     bc8:	30 0d       	add	r19, r0
     bca:	11 24       	eor	r1, r1
     bcc:	33 2e       	mov	r3, r19
     bce:	20 62       	ori	r18, 0x20	; 32
     bd0:	0c c0       	rjmp	.+24     	; 0xbea <vfprintf+0xf0>
     bd2:	8e 32       	cpi	r24, 0x2E	; 46
     bd4:	21 f4       	brne	.+8      	; 0xbde <vfprintf+0xe4>
     bd6:	26 fd       	sbrc	r18, 6
     bd8:	5f c1       	rjmp	.+702    	; 0xe98 <vfprintf+0x39e>
     bda:	20 64       	ori	r18, 0x40	; 64
     bdc:	06 c0       	rjmp	.+12     	; 0xbea <vfprintf+0xf0>
     bde:	8c 36       	cpi	r24, 0x6C	; 108
     be0:	11 f4       	brne	.+4      	; 0xbe6 <vfprintf+0xec>
     be2:	20 68       	ori	r18, 0x80	; 128
     be4:	02 c0       	rjmp	.+4      	; 0xbea <vfprintf+0xf0>
     be6:	88 36       	cpi	r24, 0x68	; 104
     be8:	41 f4       	brne	.+16     	; 0xbfa <vfprintf+0x100>
     bea:	f6 01       	movw	r30, r12
     bec:	93 fd       	sbrc	r25, 3
     bee:	85 91       	lpm	r24, Z+
     bf0:	93 ff       	sbrs	r25, 3
     bf2:	81 91       	ld	r24, Z+
     bf4:	6f 01       	movw	r12, r30
     bf6:	81 11       	cpse	r24, r1
     bf8:	c1 cf       	rjmp	.-126    	; 0xb7c <vfprintf+0x82>
     bfa:	98 2f       	mov	r25, r24
     bfc:	9f 7d       	andi	r25, 0xDF	; 223
     bfe:	95 54       	subi	r25, 0x45	; 69
     c00:	93 30       	cpi	r25, 0x03	; 3
     c02:	28 f4       	brcc	.+10     	; 0xc0e <vfprintf+0x114>
     c04:	0c 5f       	subi	r16, 0xFC	; 252
     c06:	1f 4f       	sbci	r17, 0xFF	; 255
     c08:	ff e3       	ldi	r31, 0x3F	; 63
     c0a:	f9 83       	std	Y+1, r31	; 0x01
     c0c:	0d c0       	rjmp	.+26     	; 0xc28 <vfprintf+0x12e>
     c0e:	83 36       	cpi	r24, 0x63	; 99
     c10:	31 f0       	breq	.+12     	; 0xc1e <vfprintf+0x124>
     c12:	83 37       	cpi	r24, 0x73	; 115
     c14:	71 f0       	breq	.+28     	; 0xc32 <vfprintf+0x138>
     c16:	83 35       	cpi	r24, 0x53	; 83
     c18:	09 f0       	breq	.+2      	; 0xc1c <vfprintf+0x122>
     c1a:	57 c0       	rjmp	.+174    	; 0xcca <vfprintf+0x1d0>
     c1c:	21 c0       	rjmp	.+66     	; 0xc60 <vfprintf+0x166>
     c1e:	f8 01       	movw	r30, r16
     c20:	80 81       	ld	r24, Z
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	0e 5f       	subi	r16, 0xFE	; 254
     c26:	1f 4f       	sbci	r17, 0xFF	; 255
     c28:	44 24       	eor	r4, r4
     c2a:	43 94       	inc	r4
     c2c:	51 2c       	mov	r5, r1
     c2e:	54 01       	movw	r10, r8
     c30:	14 c0       	rjmp	.+40     	; 0xc5a <vfprintf+0x160>
     c32:	38 01       	movw	r6, r16
     c34:	f2 e0       	ldi	r31, 0x02	; 2
     c36:	6f 0e       	add	r6, r31
     c38:	71 1c       	adc	r7, r1
     c3a:	f8 01       	movw	r30, r16
     c3c:	a0 80       	ld	r10, Z
     c3e:	b1 80       	ldd	r11, Z+1	; 0x01
     c40:	26 ff       	sbrs	r18, 6
     c42:	03 c0       	rjmp	.+6      	; 0xc4a <vfprintf+0x150>
     c44:	65 2d       	mov	r22, r5
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <vfprintf+0x154>
     c4a:	6f ef       	ldi	r22, 0xFF	; 255
     c4c:	7f ef       	ldi	r23, 0xFF	; 255
     c4e:	c5 01       	movw	r24, r10
     c50:	2c 87       	std	Y+12, r18	; 0x0c
     c52:	4c d1       	rcall	.+664    	; 0xeec <strnlen>
     c54:	2c 01       	movw	r4, r24
     c56:	83 01       	movw	r16, r6
     c58:	2c 85       	ldd	r18, Y+12	; 0x0c
     c5a:	2f 77       	andi	r18, 0x7F	; 127
     c5c:	22 2e       	mov	r2, r18
     c5e:	16 c0       	rjmp	.+44     	; 0xc8c <vfprintf+0x192>
     c60:	38 01       	movw	r6, r16
     c62:	f2 e0       	ldi	r31, 0x02	; 2
     c64:	6f 0e       	add	r6, r31
     c66:	71 1c       	adc	r7, r1
     c68:	f8 01       	movw	r30, r16
     c6a:	a0 80       	ld	r10, Z
     c6c:	b1 80       	ldd	r11, Z+1	; 0x01
     c6e:	26 ff       	sbrs	r18, 6
     c70:	03 c0       	rjmp	.+6      	; 0xc78 <vfprintf+0x17e>
     c72:	65 2d       	mov	r22, r5
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <vfprintf+0x182>
     c78:	6f ef       	ldi	r22, 0xFF	; 255
     c7a:	7f ef       	ldi	r23, 0xFF	; 255
     c7c:	c5 01       	movw	r24, r10
     c7e:	2c 87       	std	Y+12, r18	; 0x0c
     c80:	2a d1       	rcall	.+596    	; 0xed6 <strnlen_P>
     c82:	2c 01       	movw	r4, r24
     c84:	2c 85       	ldd	r18, Y+12	; 0x0c
     c86:	20 68       	ori	r18, 0x80	; 128
     c88:	22 2e       	mov	r2, r18
     c8a:	83 01       	movw	r16, r6
     c8c:	23 fc       	sbrc	r2, 3
     c8e:	19 c0       	rjmp	.+50     	; 0xcc2 <vfprintf+0x1c8>
     c90:	83 2d       	mov	r24, r3
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	48 16       	cp	r4, r24
     c96:	59 06       	cpc	r5, r25
     c98:	a0 f4       	brcc	.+40     	; 0xcc2 <vfprintf+0x1c8>
     c9a:	b7 01       	movw	r22, r14
     c9c:	80 e2       	ldi	r24, 0x20	; 32
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	30 d1       	rcall	.+608    	; 0xf02 <fputc>
     ca2:	3a 94       	dec	r3
     ca4:	f5 cf       	rjmp	.-22     	; 0xc90 <vfprintf+0x196>
     ca6:	f5 01       	movw	r30, r10
     ca8:	27 fc       	sbrc	r2, 7
     caa:	85 91       	lpm	r24, Z+
     cac:	27 fe       	sbrs	r2, 7
     cae:	81 91       	ld	r24, Z+
     cb0:	5f 01       	movw	r10, r30
     cb2:	b7 01       	movw	r22, r14
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	25 d1       	rcall	.+586    	; 0xf02 <fputc>
     cb8:	31 10       	cpse	r3, r1
     cba:	3a 94       	dec	r3
     cbc:	f1 e0       	ldi	r31, 0x01	; 1
     cbe:	4f 1a       	sub	r4, r31
     cc0:	51 08       	sbc	r5, r1
     cc2:	41 14       	cp	r4, r1
     cc4:	51 04       	cpc	r5, r1
     cc6:	79 f7       	brne	.-34     	; 0xca6 <vfprintf+0x1ac>
     cc8:	de c0       	rjmp	.+444    	; 0xe86 <vfprintf+0x38c>
     cca:	84 36       	cpi	r24, 0x64	; 100
     ccc:	11 f0       	breq	.+4      	; 0xcd2 <vfprintf+0x1d8>
     cce:	89 36       	cpi	r24, 0x69	; 105
     cd0:	31 f5       	brne	.+76     	; 0xd1e <vfprintf+0x224>
     cd2:	f8 01       	movw	r30, r16
     cd4:	27 ff       	sbrs	r18, 7
     cd6:	07 c0       	rjmp	.+14     	; 0xce6 <vfprintf+0x1ec>
     cd8:	60 81       	ld	r22, Z
     cda:	71 81       	ldd	r23, Z+1	; 0x01
     cdc:	82 81       	ldd	r24, Z+2	; 0x02
     cde:	93 81       	ldd	r25, Z+3	; 0x03
     ce0:	0c 5f       	subi	r16, 0xFC	; 252
     ce2:	1f 4f       	sbci	r17, 0xFF	; 255
     ce4:	08 c0       	rjmp	.+16     	; 0xcf6 <vfprintf+0x1fc>
     ce6:	60 81       	ld	r22, Z
     ce8:	71 81       	ldd	r23, Z+1	; 0x01
     cea:	88 27       	eor	r24, r24
     cec:	77 fd       	sbrc	r23, 7
     cee:	80 95       	com	r24
     cf0:	98 2f       	mov	r25, r24
     cf2:	0e 5f       	subi	r16, 0xFE	; 254
     cf4:	1f 4f       	sbci	r17, 0xFF	; 255
     cf6:	2f 76       	andi	r18, 0x6F	; 111
     cf8:	b2 2e       	mov	r11, r18
     cfa:	97 ff       	sbrs	r25, 7
     cfc:	09 c0       	rjmp	.+18     	; 0xd10 <vfprintf+0x216>
     cfe:	90 95       	com	r25
     d00:	80 95       	com	r24
     d02:	70 95       	com	r23
     d04:	61 95       	neg	r22
     d06:	7f 4f       	sbci	r23, 0xFF	; 255
     d08:	8f 4f       	sbci	r24, 0xFF	; 255
     d0a:	9f 4f       	sbci	r25, 0xFF	; 255
     d0c:	20 68       	ori	r18, 0x80	; 128
     d0e:	b2 2e       	mov	r11, r18
     d10:	2a e0       	ldi	r18, 0x0A	; 10
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	a4 01       	movw	r20, r8
     d16:	27 d1       	rcall	.+590    	; 0xf66 <__ultoa_invert>
     d18:	a8 2e       	mov	r10, r24
     d1a:	a8 18       	sub	r10, r8
     d1c:	43 c0       	rjmp	.+134    	; 0xda4 <vfprintf+0x2aa>
     d1e:	85 37       	cpi	r24, 0x75	; 117
     d20:	29 f4       	brne	.+10     	; 0xd2c <vfprintf+0x232>
     d22:	2f 7e       	andi	r18, 0xEF	; 239
     d24:	b2 2e       	mov	r11, r18
     d26:	2a e0       	ldi	r18, 0x0A	; 10
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	25 c0       	rjmp	.+74     	; 0xd76 <vfprintf+0x27c>
     d2c:	f2 2f       	mov	r31, r18
     d2e:	f9 7f       	andi	r31, 0xF9	; 249
     d30:	bf 2e       	mov	r11, r31
     d32:	8f 36       	cpi	r24, 0x6F	; 111
     d34:	c1 f0       	breq	.+48     	; 0xd66 <vfprintf+0x26c>
     d36:	18 f4       	brcc	.+6      	; 0xd3e <vfprintf+0x244>
     d38:	88 35       	cpi	r24, 0x58	; 88
     d3a:	79 f0       	breq	.+30     	; 0xd5a <vfprintf+0x260>
     d3c:	ad c0       	rjmp	.+346    	; 0xe98 <vfprintf+0x39e>
     d3e:	80 37       	cpi	r24, 0x70	; 112
     d40:	19 f0       	breq	.+6      	; 0xd48 <vfprintf+0x24e>
     d42:	88 37       	cpi	r24, 0x78	; 120
     d44:	21 f0       	breq	.+8      	; 0xd4e <vfprintf+0x254>
     d46:	a8 c0       	rjmp	.+336    	; 0xe98 <vfprintf+0x39e>
     d48:	2f 2f       	mov	r18, r31
     d4a:	20 61       	ori	r18, 0x10	; 16
     d4c:	b2 2e       	mov	r11, r18
     d4e:	b4 fe       	sbrs	r11, 4
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <vfprintf+0x272>
     d52:	8b 2d       	mov	r24, r11
     d54:	84 60       	ori	r24, 0x04	; 4
     d56:	b8 2e       	mov	r11, r24
     d58:	09 c0       	rjmp	.+18     	; 0xd6c <vfprintf+0x272>
     d5a:	24 ff       	sbrs	r18, 4
     d5c:	0a c0       	rjmp	.+20     	; 0xd72 <vfprintf+0x278>
     d5e:	9f 2f       	mov	r25, r31
     d60:	96 60       	ori	r25, 0x06	; 6
     d62:	b9 2e       	mov	r11, r25
     d64:	06 c0       	rjmp	.+12     	; 0xd72 <vfprintf+0x278>
     d66:	28 e0       	ldi	r18, 0x08	; 8
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	05 c0       	rjmp	.+10     	; 0xd76 <vfprintf+0x27c>
     d6c:	20 e1       	ldi	r18, 0x10	; 16
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <vfprintf+0x27c>
     d72:	20 e1       	ldi	r18, 0x10	; 16
     d74:	32 e0       	ldi	r19, 0x02	; 2
     d76:	f8 01       	movw	r30, r16
     d78:	b7 fe       	sbrs	r11, 7
     d7a:	07 c0       	rjmp	.+14     	; 0xd8a <vfprintf+0x290>
     d7c:	60 81       	ld	r22, Z
     d7e:	71 81       	ldd	r23, Z+1	; 0x01
     d80:	82 81       	ldd	r24, Z+2	; 0x02
     d82:	93 81       	ldd	r25, Z+3	; 0x03
     d84:	0c 5f       	subi	r16, 0xFC	; 252
     d86:	1f 4f       	sbci	r17, 0xFF	; 255
     d88:	06 c0       	rjmp	.+12     	; 0xd96 <vfprintf+0x29c>
     d8a:	60 81       	ld	r22, Z
     d8c:	71 81       	ldd	r23, Z+1	; 0x01
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 5f       	subi	r16, 0xFE	; 254
     d94:	1f 4f       	sbci	r17, 0xFF	; 255
     d96:	a4 01       	movw	r20, r8
     d98:	e6 d0       	rcall	.+460    	; 0xf66 <__ultoa_invert>
     d9a:	a8 2e       	mov	r10, r24
     d9c:	a8 18       	sub	r10, r8
     d9e:	fb 2d       	mov	r31, r11
     da0:	ff 77       	andi	r31, 0x7F	; 127
     da2:	bf 2e       	mov	r11, r31
     da4:	b6 fe       	sbrs	r11, 6
     da6:	0b c0       	rjmp	.+22     	; 0xdbe <vfprintf+0x2c4>
     da8:	2b 2d       	mov	r18, r11
     daa:	2e 7f       	andi	r18, 0xFE	; 254
     dac:	a5 14       	cp	r10, r5
     dae:	50 f4       	brcc	.+20     	; 0xdc4 <vfprintf+0x2ca>
     db0:	b4 fe       	sbrs	r11, 4
     db2:	0a c0       	rjmp	.+20     	; 0xdc8 <vfprintf+0x2ce>
     db4:	b2 fc       	sbrc	r11, 2
     db6:	08 c0       	rjmp	.+16     	; 0xdc8 <vfprintf+0x2ce>
     db8:	2b 2d       	mov	r18, r11
     dba:	2e 7e       	andi	r18, 0xEE	; 238
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <vfprintf+0x2ce>
     dbe:	7a 2c       	mov	r7, r10
     dc0:	2b 2d       	mov	r18, r11
     dc2:	03 c0       	rjmp	.+6      	; 0xdca <vfprintf+0x2d0>
     dc4:	7a 2c       	mov	r7, r10
     dc6:	01 c0       	rjmp	.+2      	; 0xdca <vfprintf+0x2d0>
     dc8:	75 2c       	mov	r7, r5
     dca:	24 ff       	sbrs	r18, 4
     dcc:	0d c0       	rjmp	.+26     	; 0xde8 <vfprintf+0x2ee>
     dce:	fe 01       	movw	r30, r28
     dd0:	ea 0d       	add	r30, r10
     dd2:	f1 1d       	adc	r31, r1
     dd4:	80 81       	ld	r24, Z
     dd6:	80 33       	cpi	r24, 0x30	; 48
     dd8:	11 f4       	brne	.+4      	; 0xdde <vfprintf+0x2e4>
     dda:	29 7e       	andi	r18, 0xE9	; 233
     ddc:	09 c0       	rjmp	.+18     	; 0xdf0 <vfprintf+0x2f6>
     dde:	22 ff       	sbrs	r18, 2
     de0:	06 c0       	rjmp	.+12     	; 0xdee <vfprintf+0x2f4>
     de2:	73 94       	inc	r7
     de4:	73 94       	inc	r7
     de6:	04 c0       	rjmp	.+8      	; 0xdf0 <vfprintf+0x2f6>
     de8:	82 2f       	mov	r24, r18
     dea:	86 78       	andi	r24, 0x86	; 134
     dec:	09 f0       	breq	.+2      	; 0xdf0 <vfprintf+0x2f6>
     dee:	73 94       	inc	r7
     df0:	23 fd       	sbrc	r18, 3
     df2:	12 c0       	rjmp	.+36     	; 0xe18 <vfprintf+0x31e>
     df4:	20 ff       	sbrs	r18, 0
     df6:	06 c0       	rjmp	.+12     	; 0xe04 <vfprintf+0x30a>
     df8:	5a 2c       	mov	r5, r10
     dfa:	73 14       	cp	r7, r3
     dfc:	18 f4       	brcc	.+6      	; 0xe04 <vfprintf+0x30a>
     dfe:	53 0c       	add	r5, r3
     e00:	57 18       	sub	r5, r7
     e02:	73 2c       	mov	r7, r3
     e04:	73 14       	cp	r7, r3
     e06:	60 f4       	brcc	.+24     	; 0xe20 <vfprintf+0x326>
     e08:	b7 01       	movw	r22, r14
     e0a:	80 e2       	ldi	r24, 0x20	; 32
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	2c 87       	std	Y+12, r18	; 0x0c
     e10:	78 d0       	rcall	.+240    	; 0xf02 <fputc>
     e12:	73 94       	inc	r7
     e14:	2c 85       	ldd	r18, Y+12	; 0x0c
     e16:	f6 cf       	rjmp	.-20     	; 0xe04 <vfprintf+0x30a>
     e18:	73 14       	cp	r7, r3
     e1a:	10 f4       	brcc	.+4      	; 0xe20 <vfprintf+0x326>
     e1c:	37 18       	sub	r3, r7
     e1e:	01 c0       	rjmp	.+2      	; 0xe22 <vfprintf+0x328>
     e20:	31 2c       	mov	r3, r1
     e22:	24 ff       	sbrs	r18, 4
     e24:	11 c0       	rjmp	.+34     	; 0xe48 <vfprintf+0x34e>
     e26:	b7 01       	movw	r22, r14
     e28:	80 e3       	ldi	r24, 0x30	; 48
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	2c 87       	std	Y+12, r18	; 0x0c
     e2e:	69 d0       	rcall	.+210    	; 0xf02 <fputc>
     e30:	2c 85       	ldd	r18, Y+12	; 0x0c
     e32:	22 ff       	sbrs	r18, 2
     e34:	16 c0       	rjmp	.+44     	; 0xe62 <vfprintf+0x368>
     e36:	21 ff       	sbrs	r18, 1
     e38:	03 c0       	rjmp	.+6      	; 0xe40 <vfprintf+0x346>
     e3a:	88 e5       	ldi	r24, 0x58	; 88
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <vfprintf+0x34a>
     e40:	88 e7       	ldi	r24, 0x78	; 120
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	b7 01       	movw	r22, r14
     e46:	0c c0       	rjmp	.+24     	; 0xe60 <vfprintf+0x366>
     e48:	82 2f       	mov	r24, r18
     e4a:	86 78       	andi	r24, 0x86	; 134
     e4c:	51 f0       	breq	.+20     	; 0xe62 <vfprintf+0x368>
     e4e:	21 fd       	sbrc	r18, 1
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <vfprintf+0x35c>
     e52:	80 e2       	ldi	r24, 0x20	; 32
     e54:	01 c0       	rjmp	.+2      	; 0xe58 <vfprintf+0x35e>
     e56:	8b e2       	ldi	r24, 0x2B	; 43
     e58:	27 fd       	sbrc	r18, 7
     e5a:	8d e2       	ldi	r24, 0x2D	; 45
     e5c:	b7 01       	movw	r22, r14
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	50 d0       	rcall	.+160    	; 0xf02 <fputc>
     e62:	a5 14       	cp	r10, r5
     e64:	30 f4       	brcc	.+12     	; 0xe72 <vfprintf+0x378>
     e66:	b7 01       	movw	r22, r14
     e68:	80 e3       	ldi	r24, 0x30	; 48
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	4a d0       	rcall	.+148    	; 0xf02 <fputc>
     e6e:	5a 94       	dec	r5
     e70:	f8 cf       	rjmp	.-16     	; 0xe62 <vfprintf+0x368>
     e72:	aa 94       	dec	r10
     e74:	f4 01       	movw	r30, r8
     e76:	ea 0d       	add	r30, r10
     e78:	f1 1d       	adc	r31, r1
     e7a:	80 81       	ld	r24, Z
     e7c:	b7 01       	movw	r22, r14
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	40 d0       	rcall	.+128    	; 0xf02 <fputc>
     e82:	a1 10       	cpse	r10, r1
     e84:	f6 cf       	rjmp	.-20     	; 0xe72 <vfprintf+0x378>
     e86:	33 20       	and	r3, r3
     e88:	09 f4       	brne	.+2      	; 0xe8c <vfprintf+0x392>
     e8a:	5d ce       	rjmp	.-838    	; 0xb46 <vfprintf+0x4c>
     e8c:	b7 01       	movw	r22, r14
     e8e:	80 e2       	ldi	r24, 0x20	; 32
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	37 d0       	rcall	.+110    	; 0xf02 <fputc>
     e94:	3a 94       	dec	r3
     e96:	f7 cf       	rjmp	.-18     	; 0xe86 <vfprintf+0x38c>
     e98:	f7 01       	movw	r30, r14
     e9a:	86 81       	ldd	r24, Z+6	; 0x06
     e9c:	97 81       	ldd	r25, Z+7	; 0x07
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <vfprintf+0x3aa>
     ea0:	8f ef       	ldi	r24, 0xFF	; 255
     ea2:	9f ef       	ldi	r25, 0xFF	; 255
     ea4:	2c 96       	adiw	r28, 0x0c	; 12
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	ff 90       	pop	r15
     eba:	ef 90       	pop	r14
     ebc:	df 90       	pop	r13
     ebe:	cf 90       	pop	r12
     ec0:	bf 90       	pop	r11
     ec2:	af 90       	pop	r10
     ec4:	9f 90       	pop	r9
     ec6:	8f 90       	pop	r8
     ec8:	7f 90       	pop	r7
     eca:	6f 90       	pop	r6
     ecc:	5f 90       	pop	r5
     ece:	4f 90       	pop	r4
     ed0:	3f 90       	pop	r3
     ed2:	2f 90       	pop	r2
     ed4:	08 95       	ret

00000ed6 <strnlen_P>:
     ed6:	fc 01       	movw	r30, r24
     ed8:	05 90       	lpm	r0, Z+
     eda:	61 50       	subi	r22, 0x01	; 1
     edc:	70 40       	sbci	r23, 0x00	; 0
     ede:	01 10       	cpse	r0, r1
     ee0:	d8 f7       	brcc	.-10     	; 0xed8 <strnlen_P+0x2>
     ee2:	80 95       	com	r24
     ee4:	90 95       	com	r25
     ee6:	8e 0f       	add	r24, r30
     ee8:	9f 1f       	adc	r25, r31
     eea:	08 95       	ret

00000eec <strnlen>:
     eec:	fc 01       	movw	r30, r24
     eee:	61 50       	subi	r22, 0x01	; 1
     ef0:	70 40       	sbci	r23, 0x00	; 0
     ef2:	01 90       	ld	r0, Z+
     ef4:	01 10       	cpse	r0, r1
     ef6:	d8 f7       	brcc	.-10     	; 0xeee <strnlen+0x2>
     ef8:	80 95       	com	r24
     efa:	90 95       	com	r25
     efc:	8e 0f       	add	r24, r30
     efe:	9f 1f       	adc	r25, r31
     f00:	08 95       	ret

00000f02 <fputc>:
     f02:	0f 93       	push	r16
     f04:	1f 93       	push	r17
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	18 2f       	mov	r17, r24
     f0c:	09 2f       	mov	r16, r25
     f0e:	eb 01       	movw	r28, r22
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	81 fd       	sbrc	r24, 1
     f14:	03 c0       	rjmp	.+6      	; 0xf1c <fputc+0x1a>
     f16:	8f ef       	ldi	r24, 0xFF	; 255
     f18:	9f ef       	ldi	r25, 0xFF	; 255
     f1a:	20 c0       	rjmp	.+64     	; 0xf5c <fputc+0x5a>
     f1c:	82 ff       	sbrs	r24, 2
     f1e:	10 c0       	rjmp	.+32     	; 0xf40 <fputc+0x3e>
     f20:	4e 81       	ldd	r20, Y+6	; 0x06
     f22:	5f 81       	ldd	r21, Y+7	; 0x07
     f24:	2c 81       	ldd	r18, Y+4	; 0x04
     f26:	3d 81       	ldd	r19, Y+5	; 0x05
     f28:	42 17       	cp	r20, r18
     f2a:	53 07       	cpc	r21, r19
     f2c:	7c f4       	brge	.+30     	; 0xf4c <fputc+0x4a>
     f2e:	e8 81       	ld	r30, Y
     f30:	f9 81       	ldd	r31, Y+1	; 0x01
     f32:	9f 01       	movw	r18, r30
     f34:	2f 5f       	subi	r18, 0xFF	; 255
     f36:	3f 4f       	sbci	r19, 0xFF	; 255
     f38:	39 83       	std	Y+1, r19	; 0x01
     f3a:	28 83       	st	Y, r18
     f3c:	10 83       	st	Z, r17
     f3e:	06 c0       	rjmp	.+12     	; 0xf4c <fputc+0x4a>
     f40:	e8 85       	ldd	r30, Y+8	; 0x08
     f42:	f9 85       	ldd	r31, Y+9	; 0x09
     f44:	81 2f       	mov	r24, r17
     f46:	19 95       	eicall
     f48:	89 2b       	or	r24, r25
     f4a:	29 f7       	brne	.-54     	; 0xf16 <fputc+0x14>
     f4c:	2e 81       	ldd	r18, Y+6	; 0x06
     f4e:	3f 81       	ldd	r19, Y+7	; 0x07
     f50:	2f 5f       	subi	r18, 0xFF	; 255
     f52:	3f 4f       	sbci	r19, 0xFF	; 255
     f54:	3f 83       	std	Y+7, r19	; 0x07
     f56:	2e 83       	std	Y+6, r18	; 0x06
     f58:	81 2f       	mov	r24, r17
     f5a:	90 2f       	mov	r25, r16
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	08 95       	ret

00000f66 <__ultoa_invert>:
     f66:	fa 01       	movw	r30, r20
     f68:	aa 27       	eor	r26, r26
     f6a:	28 30       	cpi	r18, 0x08	; 8
     f6c:	51 f1       	breq	.+84     	; 0xfc2 <__ultoa_invert+0x5c>
     f6e:	20 31       	cpi	r18, 0x10	; 16
     f70:	81 f1       	breq	.+96     	; 0xfd2 <__ultoa_invert+0x6c>
     f72:	e8 94       	clt
     f74:	6f 93       	push	r22
     f76:	6e 7f       	andi	r22, 0xFE	; 254
     f78:	6e 5f       	subi	r22, 0xFE	; 254
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	8f 4f       	sbci	r24, 0xFF	; 255
     f7e:	9f 4f       	sbci	r25, 0xFF	; 255
     f80:	af 4f       	sbci	r26, 0xFF	; 255
     f82:	b1 e0       	ldi	r27, 0x01	; 1
     f84:	3e d0       	rcall	.+124    	; 0x1002 <__ultoa_invert+0x9c>
     f86:	b4 e0       	ldi	r27, 0x04	; 4
     f88:	3c d0       	rcall	.+120    	; 0x1002 <__ultoa_invert+0x9c>
     f8a:	67 0f       	add	r22, r23
     f8c:	78 1f       	adc	r23, r24
     f8e:	89 1f       	adc	r24, r25
     f90:	9a 1f       	adc	r25, r26
     f92:	a1 1d       	adc	r26, r1
     f94:	68 0f       	add	r22, r24
     f96:	79 1f       	adc	r23, r25
     f98:	8a 1f       	adc	r24, r26
     f9a:	91 1d       	adc	r25, r1
     f9c:	a1 1d       	adc	r26, r1
     f9e:	6a 0f       	add	r22, r26
     fa0:	71 1d       	adc	r23, r1
     fa2:	81 1d       	adc	r24, r1
     fa4:	91 1d       	adc	r25, r1
     fa6:	a1 1d       	adc	r26, r1
     fa8:	20 d0       	rcall	.+64     	; 0xfea <__ultoa_invert+0x84>
     faa:	09 f4       	brne	.+2      	; 0xfae <__ultoa_invert+0x48>
     fac:	68 94       	set
     fae:	3f 91       	pop	r19
     fb0:	2a e0       	ldi	r18, 0x0A	; 10
     fb2:	26 9f       	mul	r18, r22
     fb4:	11 24       	eor	r1, r1
     fb6:	30 19       	sub	r19, r0
     fb8:	30 5d       	subi	r19, 0xD0	; 208
     fba:	31 93       	st	Z+, r19
     fbc:	de f6       	brtc	.-74     	; 0xf74 <__ultoa_invert+0xe>
     fbe:	cf 01       	movw	r24, r30
     fc0:	08 95       	ret
     fc2:	46 2f       	mov	r20, r22
     fc4:	47 70       	andi	r20, 0x07	; 7
     fc6:	40 5d       	subi	r20, 0xD0	; 208
     fc8:	41 93       	st	Z+, r20
     fca:	b3 e0       	ldi	r27, 0x03	; 3
     fcc:	0f d0       	rcall	.+30     	; 0xfec <__ultoa_invert+0x86>
     fce:	c9 f7       	brne	.-14     	; 0xfc2 <__ultoa_invert+0x5c>
     fd0:	f6 cf       	rjmp	.-20     	; 0xfbe <__ultoa_invert+0x58>
     fd2:	46 2f       	mov	r20, r22
     fd4:	4f 70       	andi	r20, 0x0F	; 15
     fd6:	40 5d       	subi	r20, 0xD0	; 208
     fd8:	4a 33       	cpi	r20, 0x3A	; 58
     fda:	18 f0       	brcs	.+6      	; 0xfe2 <__ultoa_invert+0x7c>
     fdc:	49 5d       	subi	r20, 0xD9	; 217
     fde:	31 fd       	sbrc	r19, 1
     fe0:	40 52       	subi	r20, 0x20	; 32
     fe2:	41 93       	st	Z+, r20
     fe4:	02 d0       	rcall	.+4      	; 0xfea <__ultoa_invert+0x84>
     fe6:	a9 f7       	brne	.-22     	; 0xfd2 <__ultoa_invert+0x6c>
     fe8:	ea cf       	rjmp	.-44     	; 0xfbe <__ultoa_invert+0x58>
     fea:	b4 e0       	ldi	r27, 0x04	; 4
     fec:	a6 95       	lsr	r26
     fee:	97 95       	ror	r25
     ff0:	87 95       	ror	r24
     ff2:	77 95       	ror	r23
     ff4:	67 95       	ror	r22
     ff6:	ba 95       	dec	r27
     ff8:	c9 f7       	brne	.-14     	; 0xfec <__ultoa_invert+0x86>
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	61 05       	cpc	r22, r1
     ffe:	71 05       	cpc	r23, r1
    1000:	08 95       	ret
    1002:	9b 01       	movw	r18, r22
    1004:	ac 01       	movw	r20, r24
    1006:	0a 2e       	mov	r0, r26
    1008:	06 94       	lsr	r0
    100a:	57 95       	ror	r21
    100c:	47 95       	ror	r20
    100e:	37 95       	ror	r19
    1010:	27 95       	ror	r18
    1012:	ba 95       	dec	r27
    1014:	c9 f7       	brne	.-14     	; 0x1008 <__ultoa_invert+0xa2>
    1016:	62 0f       	add	r22, r18
    1018:	73 1f       	adc	r23, r19
    101a:	84 1f       	adc	r24, r20
    101c:	95 1f       	adc	r25, r21
    101e:	a0 1d       	adc	r26, r0
    1020:	08 95       	ret

00001022 <_exit>:
    1022:	f8 94       	cli

00001024 <__stop_program>:
    1024:	ff cf       	rjmp	.-2      	; 0x1024 <__stop_program>
