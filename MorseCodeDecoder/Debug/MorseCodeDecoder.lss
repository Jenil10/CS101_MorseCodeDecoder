
MorseCodeDecoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800200  000011fa  0000128e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800226  00800226  000012b4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001b8  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002127  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000beb  00000000  00000000  000035ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e0b  00000000  00000000  000041da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000470  00000000  00000000  00004fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000752  00000000  00000000  00005458  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001135  00000000  00000000  00005baa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d0  00000000  00000000  00006cdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	11 c4       	rjmp	.+2082   	; 0x8b0 <__vector_35>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea ef       	ldi	r30, 0xFA	; 250
      fc:	f1 e1       	ldi	r31, 0x11	; 17
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a6 32       	cpi	r26, 0x26	; 38
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a6 e2       	ldi	r26, 0x26	; 38
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 32       	cpi	r26, 0x2A	; 42
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	1b d3       	rcall	.+1590   	; 0x756 <main>
     120:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <_ZN3LCD10portConfigEv>:
}

//Function to Initialize PORTS
void LCD::portInit()
{
	portConfig();
     126:	87 b1       	in	r24, 0x07	; 7
     128:	87 6f       	ori	r24, 0xF7	; 247
     12a:	87 b9       	out	0x07, r24	; 7
     12c:	88 b1       	in	r24, 0x08	; 8
     12e:	80 78       	andi	r24, 0x80	; 128
     130:	88 b9       	out	0x08, r24	; 8
     132:	08 95       	ret

00000134 <_ZN3LCD7set4bitEv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     134:	86 e6       	ldi	r24, 0x66	; 102
     136:	9e e0       	ldi	r25, 0x0E	; 14
     138:	01 97       	sbiw	r24, 0x01	; 1
     13a:	f1 f7       	brne	.-4      	; 0x138 <_ZN3LCD7set4bitEv+0x4>
     13c:	00 00       	nop
//Function to Reset LCD
void LCD::set4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     13e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     140:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     142:	80 e3       	ldi	r24, 0x30	; 48
     144:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     146:	42 9a       	sbi	0x08, 2	; 8
     148:	8f ef       	ldi	r24, 0xFF	; 255
     14a:	97 e4       	ldi	r25, 0x47	; 71
     14c:	01 97       	sbiw	r24, 0x01	; 1
     14e:	f1 f7       	brne	.-4      	; 0x14c <_ZN3LCD7set4bitEv+0x18>
     150:	00 c0       	rjmp	.+0      	; 0x152 <_ZN3LCD7set4bitEv+0x1e>
     152:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     154:	42 98       	cbi	0x08, 2	; 8
     156:	86 e6       	ldi	r24, 0x66	; 102
     158:	9e e0       	ldi	r25, 0x0E	; 14
     15a:	01 97       	sbiw	r24, 0x01	; 1
     15c:	f1 f7       	brne	.-4      	; 0x15a <_ZN3LCD7set4bitEv+0x26>
     15e:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     160:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     162:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     164:	80 e3       	ldi	r24, 0x30	; 48
     166:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     168:	42 9a       	sbi	0x08, 2	; 8
     16a:	8f ef       	ldi	r24, 0xFF	; 255
     16c:	97 e4       	ldi	r25, 0x47	; 71
     16e:	01 97       	sbiw	r24, 0x01	; 1
     170:	f1 f7       	brne	.-4      	; 0x16e <_ZN3LCD7set4bitEv+0x3a>
     172:	00 c0       	rjmp	.+0      	; 0x174 <_ZN3LCD7set4bitEv+0x40>
     174:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     176:	42 98       	cbi	0x08, 2	; 8
     178:	86 e6       	ldi	r24, 0x66	; 102
     17a:	9e e0       	ldi	r25, 0x0E	; 14
     17c:	01 97       	sbiw	r24, 0x01	; 1
     17e:	f1 f7       	brne	.-4      	; 0x17c <_ZN3LCD7set4bitEv+0x48>
     180:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     182:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     184:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     186:	80 e3       	ldi	r24, 0x30	; 48
     188:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     18a:	42 9a       	sbi	0x08, 2	; 8
     18c:	8f ef       	ldi	r24, 0xFF	; 255
     18e:	97 e4       	ldi	r25, 0x47	; 71
     190:	01 97       	sbiw	r24, 0x01	; 1
     192:	f1 f7       	brne	.-4      	; 0x190 <_ZN3LCD7set4bitEv+0x5c>
     194:	00 c0       	rjmp	.+0      	; 0x196 <_ZN3LCD7set4bitEv+0x62>
     196:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     198:	42 98       	cbi	0x08, 2	; 8
     19a:	86 e6       	ldi	r24, 0x66	; 102
     19c:	9e e0       	ldi	r25, 0x0E	; 14
     19e:	01 97       	sbiw	r24, 0x01	; 1
     1a0:	f1 f7       	brne	.-4      	; 0x19e <_ZN3LCD7set4bitEv+0x6a>
     1a2:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1a4:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1a6:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     1a8:	80 e2       	ldi	r24, 0x20	; 32
     1aa:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1ac:	42 9a       	sbi	0x08, 2	; 8
     1ae:	86 e6       	ldi	r24, 0x66	; 102
     1b0:	9e e0       	ldi	r25, 0x0E	; 14
     1b2:	01 97       	sbiw	r24, 0x01	; 1
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <_ZN3LCD7set4bitEv+0x7e>
     1b6:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1b8:	42 98       	cbi	0x08, 2	; 8
     1ba:	08 95       	ret

000001bc <_ZN3LCD12writeCommandEh>:
void LCD::writeCommand(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     1bc:	88 b1       	in	r24, 0x08	; 8
     1be:	8f 70       	andi	r24, 0x0F	; 15
     1c0:	88 b9       	out	0x08, r24	; 8
	lcd_port |= temp;
     1c2:	88 b1       	in	r24, 0x08	; 8
//Function to Write Command on LCD
void LCD::writeCommand(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     1c4:	96 2f       	mov	r25, r22
     1c6:	90 7f       	andi	r25, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     1c8:	89 2b       	or	r24, r25
     1ca:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     1cc:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1ce:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1d0:	42 9a       	sbi	0x08, 2	; 8
     1d2:	8f ef       	ldi	r24, 0xFF	; 255
     1d4:	97 e4       	ldi	r25, 0x47	; 71
     1d6:	01 97       	sbiw	r24, 0x01	; 1
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <_ZN3LCD12writeCommandEh+0x1a>
     1da:	00 c0       	rjmp	.+0      	; 0x1dc <_ZN3LCD12writeCommandEh+0x20>
     1dc:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     1de:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     1e0:	88 b1       	in	r24, 0x08	; 8
     1e2:	8f 70       	andi	r24, 0x0F	; 15
     1e4:	88 b9       	out	0x08, r24	; 8
	lcd_port |= cmd;
     1e6:	88 b1       	in	r24, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     1e8:	62 95       	swap	r22
     1ea:	60 7f       	andi	r22, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     1ec:	68 2b       	or	r22, r24
     1ee:	68 b9       	out	0x08, r22	; 8
	cbit(lcd_port,RS);
     1f0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1f2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1f4:	42 9a       	sbi	0x08, 2	; 8
     1f6:	8f ef       	ldi	r24, 0xFF	; 255
     1f8:	97 e4       	ldi	r25, 0x47	; 71
     1fa:	01 97       	sbiw	r24, 0x01	; 1
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <_ZN3LCD12writeCommandEh+0x3e>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <_ZN3LCD12writeCommandEh+0x44>
     200:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     202:	42 98       	cbi	0x08, 2	; 8
     204:	08 95       	ret

00000206 <_ZN3LCD4initEv>:
	
}

//Function to Initialize LCD
void LCD::init()
{
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	ec 01       	movw	r28, r24
     20c:	86 e6       	ldi	r24, 0x66	; 102
     20e:	9e e0       	ldi	r25, 0x0E	; 14
     210:	01 97       	sbiw	r24, 0x01	; 1
     212:	f1 f7       	brne	.-4      	; 0x210 <_ZN3LCD4initEv+0xa>
     214:	00 00       	nop
	_delay_ms(1);

	writeCommand(0x28);			//LCD 4-bit mode and 2 lines.
     216:	68 e2       	ldi	r22, 0x28	; 40
     218:	ce 01       	movw	r24, r28
     21a:	d0 df       	rcall	.-96     	; 0x1bc <_ZN3LCD12writeCommandEh>
	writeCommand(0x01);
     21c:	61 e0       	ldi	r22, 0x01	; 1
     21e:	ce 01       	movw	r24, r28
     220:	cd df       	rcall	.-102    	; 0x1bc <_ZN3LCD12writeCommandEh>
	writeCommand(0x06);
     222:	66 e0       	ldi	r22, 0x06	; 6
     224:	ce 01       	movw	r24, r28
     226:	ca df       	rcall	.-108    	; 0x1bc <_ZN3LCD12writeCommandEh>
	writeCommand(0x0E);
     228:	6e e0       	ldi	r22, 0x0E	; 14
     22a:	ce 01       	movw	r24, r28
     22c:	c7 df       	rcall	.-114    	; 0x1bc <_ZN3LCD12writeCommandEh>
	writeCommand(0x80);
     22e:	60 e8       	ldi	r22, 0x80	; 128
     230:	ce 01       	movw	r24, r28
     232:	c4 df       	rcall	.-120    	; 0x1bc <_ZN3LCD12writeCommandEh>
	
}
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	08 95       	ret

0000023a <_ZN3LCDC1Ev>:
 * Created: 07-03-2015 05:52:49 PM
 *  Author: Ajinkya
 */ 
#include "lcd.h"
#include "stdlib.h"
LCD::LCD()
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	ec 01       	movw	r28, r24
}

//Function to Initialize PORTS
void LCD::portInit()
{
	portConfig();
     240:	72 df       	rcall	.-284    	; 0x126 <_ZN3LCD10portConfigEv>
#include "lcd.h"
#include "stdlib.h"
LCD::LCD()
{
	portInit();
	set4bit();
     242:	ce 01       	movw	r24, r28
     244:	77 df       	rcall	.-274    	; 0x134 <_ZN3LCD7set4bitEv>
	init();
     246:	ce 01       	movw	r24, r28
     248:	de df       	rcall	.-68     	; 0x206 <_ZN3LCD4initEv>
}
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	08 95       	ret

00000250 <_ZN3LCD9writeCharEc>:
void LCD::writeChar(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     250:	88 b1       	in	r24, 0x08	; 8
     252:	8f 70       	andi	r24, 0x0F	; 15
     254:	88 b9       	out	0x08, r24	; 8
	lcd_port |= temp;
     256:	88 b1       	in	r24, 0x08	; 8
//Function to Write Data on LCD
void LCD::writeChar(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     258:	96 2f       	mov	r25, r22
     25a:	90 7f       	andi	r25, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     25c:	89 2b       	or	r24, r25
     25e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     260:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     262:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     264:	42 9a       	sbi	0x08, 2	; 8
     266:	8f ef       	ldi	r24, 0xFF	; 255
     268:	97 e4       	ldi	r25, 0x47	; 71
     26a:	01 97       	sbiw	r24, 0x01	; 1
     26c:	f1 f7       	brne	.-4      	; 0x26a <_ZN3LCD9writeCharEc+0x1a>
     26e:	00 c0       	rjmp	.+0      	; 0x270 <_ZN3LCD9writeCharEc+0x20>
     270:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     272:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     274:	88 b1       	in	r24, 0x08	; 8
     276:	8f 70       	andi	r24, 0x0F	; 15
     278:	88 b9       	out	0x08, r24	; 8
	lcd_port |= letter;
     27a:	88 b1       	in	r24, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     27c:	62 95       	swap	r22
     27e:	60 7f       	andi	r22, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     280:	68 2b       	or	r22, r24
     282:	68 b9       	out	0x08, r22	; 8
	sbit(lcd_port,RS);
     284:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     286:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     288:	42 9a       	sbi	0x08, 2	; 8
     28a:	8f ef       	ldi	r24, 0xFF	; 255
     28c:	97 e4       	ldi	r25, 0x47	; 71
     28e:	01 97       	sbiw	r24, 0x01	; 1
     290:	f1 f7       	brne	.-4      	; 0x28e <_ZN3LCD9writeCharEc+0x3e>
     292:	00 c0       	rjmp	.+0      	; 0x294 <_ZN3LCD9writeCharEc+0x44>
     294:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     296:	42 98       	cbi	0x08, 2	; 8
     298:	08 95       	ret

0000029a <_ZN3LCD4homeEv>:


//Function to bring cursor at home position
void LCD::home()
{
	writeCommand(0x80);
     29a:	60 e8       	ldi	r22, 0x80	; 128
     29c:	8f cf       	rjmp	.-226    	; 0x1bc <_ZN3LCD12writeCommandEh>
     29e:	08 95       	ret

000002a0 <_ZN3LCD5printEPc>:
}


//Function to Print String on LCD
void LCD::print(char *str)
{
     2a0:	0f 93       	push	r16
     2a2:	1f 93       	push	r17
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	8c 01       	movw	r16, r24
     2aa:	eb 01       	movw	r28, r22
	while(*str != '\0')
     2ac:	68 81       	ld	r22, Y
     2ae:	66 23       	and	r22, r22
     2b0:	31 f0       	breq	.+12     	; 0x2be <_ZN3LCD5printEPc+0x1e>
     2b2:	21 96       	adiw	r28, 0x01	; 1
	{
		writeChar(*str);
     2b4:	c8 01       	movw	r24, r16
     2b6:	cc df       	rcall	.-104    	; 0x250 <_ZN3LCD9writeCharEc>


//Function to Print String on LCD
void LCD::print(char *str)
{
	while(*str != '\0')
     2b8:	69 91       	ld	r22, Y+
     2ba:	61 11       	cpse	r22, r1
     2bc:	fb cf       	rjmp	.-10     	; 0x2b4 <_ZN3LCD5printEPc+0x14>
	{
		writeChar(*str);
		str++;
	}
}
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	08 95       	ret

000002c8 <_ZN3LCD6cursorEcc>:
//Position the LCD cursor at "row", "column".

void LCD::cursor (char row, char col)
{
	
	switch (row) {
     2c8:	62 30       	cpi	r22, 0x02	; 2
     2ca:	69 f0       	breq	.+26     	; 0x2e6 <_ZN3LCD6cursorEcc+0x1e>
     2cc:	18 f4       	brcc	.+6      	; 0x2d4 <_ZN3LCD6cursorEcc+0xc>
     2ce:	61 30       	cpi	r22, 0x01	; 1
     2d0:	31 f0       	breq	.+12     	; 0x2de <_ZN3LCD6cursorEcc+0x16>
     2d2:	15 c0       	rjmp	.+42     	; 0x2fe <_ZN3LCD6cursorEcc+0x36>
     2d4:	63 30       	cpi	r22, 0x03	; 3
     2d6:	59 f0       	breq	.+22     	; 0x2ee <_ZN3LCD6cursorEcc+0x26>
     2d8:	64 30       	cpi	r22, 0x04	; 4
     2da:	69 f0       	breq	.+26     	; 0x2f6 <_ZN3LCD6cursorEcc+0x2e>
     2dc:	10 c0       	rjmp	.+32     	; 0x2fe <_ZN3LCD6cursorEcc+0x36>
		case 1: writeCommand (0x80 + col - 1); break;
     2de:	6f e7       	ldi	r22, 0x7F	; 127
     2e0:	64 0f       	add	r22, r20
     2e2:	6c cf       	rjmp	.-296    	; 0x1bc <_ZN3LCD12writeCommandEh>
     2e4:	08 95       	ret
		case 2: writeCommand (0xc0 + col - 1); break;
     2e6:	6f eb       	ldi	r22, 0xBF	; 191
     2e8:	64 0f       	add	r22, r20
     2ea:	68 cf       	rjmp	.-304    	; 0x1bc <_ZN3LCD12writeCommandEh>
     2ec:	08 95       	ret
		case 3: writeCommand (0x94 + col - 1); break;
     2ee:	63 e9       	ldi	r22, 0x93	; 147
     2f0:	64 0f       	add	r22, r20
     2f2:	64 cf       	rjmp	.-312    	; 0x1bc <_ZN3LCD12writeCommandEh>
     2f4:	08 95       	ret
		case 4: writeCommand (0xd4 + col - 1); break;
     2f6:	63 ed       	ldi	r22, 0xD3	; 211
     2f8:	64 0f       	add	r22, r20
     2fa:	60 cf       	rjmp	.-320    	; 0x1bc <_ZN3LCD12writeCommandEh>
     2fc:	08 95       	ret
		default: break;
	}
	if(row==0&&col==0)home();
     2fe:	61 11       	cpse	r22, r1
     300:	03 c0       	rjmp	.+6      	; 0x308 <_ZN3LCD6cursorEcc+0x40>
     302:	41 11       	cpse	r20, r1
     304:	01 c0       	rjmp	.+2      	; 0x308 <_ZN3LCD6cursorEcc+0x40>
     306:	c9 cf       	rjmp	.-110    	; 0x29a <_ZN3LCD4homeEv>
     308:	08 95       	ret

0000030a <_ZN5pulseC1Ev>:
 *  Author: Ajinkya
 */ 
#include "pulse.h"
pulse::pulse()
{
	pulseData.ifData=0;		//set validity of data to invalid
     30a:	fc 01       	movw	r30, r24
     30c:	14 86       	std	Z+12, r1	; 0x0c
	timeout=2;				//timeout in ms for getting pulse
     30e:	ed 59       	subi	r30, 0x9D	; 157
     310:	ff 4f       	sbci	r31, 0xFF	; 255
     312:	22 e0       	ldi	r18, 0x02	; 2
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	31 83       	std	Z+1, r19	; 0x01
     318:	20 83       	st	Z, r18
	wordsPerMinute=15;		//WPM of morse code
     31a:	3a 96       	adiw	r30, 0x0a	; 10
     31c:	2f e0       	ldi	r18, 0x0F	; 15
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	31 83       	std	Z+1, r19	; 0x01
     322:	20 83       	st	Z, r18
	tDit=1200/wordsPerMinute;	//calculates time of dits given WPM		
     324:	34 97       	sbiw	r30, 0x04	; 4
     326:	20 e5       	ldi	r18, 0x50	; 80
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	31 83       	std	Z+1, r19	; 0x01
     32c:	20 83       	st	Z, r18
	tDah=3*tDit;				//calculates time of dahs from tDit
     32e:	32 96       	adiw	r30, 0x02	; 2
     330:	40 ef       	ldi	r20, 0xF0	; 240
     332:	50 e0       	ldi	r21, 0x00	; 0
     334:	51 83       	std	Z+1, r21	; 0x01
     336:	40 83       	st	Z, r20
	thresholdTime=tDit/2;		//used for removal of pulses of length less than it (in ms)	must be +ve assume tdit >20
     338:	36 97       	sbiw	r30, 0x06	; 6
     33a:	48 e2       	ldi	r20, 0x28	; 40
     33c:	50 e0       	ldi	r21, 0x00	; 0
     33e:	51 83       	std	Z+1, r21	; 0x01
     340:	40 83       	st	Z, r20
	maxThresholdTime=(tDah*3)/2;	//used for removal of pulses of length more than it (in ms)	[threshold times doesn't account in errorCheck , removed in capture sequence]
     342:	32 96       	adiw	r30, 0x02	; 2
     344:	48 e6       	ldi	r20, 0x68	; 104
     346:	51 e0       	ldi	r21, 0x01	; 1
     348:	51 83       	std	Z+1, r21	; 0x01
     34a:	40 83       	st	Z, r20
	errorCheck=true;			//for calculating error checks on received pulse data
     34c:	3a 96       	adiw	r30, 0x0a	; 10
     34e:	41 e0       	ldi	r20, 0x01	; 1
     350:	40 83       	st	Z, r20
	tolerance=tDit;
     352:	32 97       	sbiw	r30, 0x02	; 2
     354:	31 83       	std	Z+1, r19	; 0x01
     356:	20 83       	st	Z, r18
     358:	08 95       	ret

0000035a <_ZN5pulse4initEv>:
//pulse::init initialses the registers for counting the clock pulses on 
//T1 pin of mcu, 
void pulse::init(void)
{
	
	TCCR1A=0;		//not using any other mode
     35a:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=(1<<CS12)|(1<<CS11); //set clock source as falling edge on T1 pin
     35e:	86 e0       	ldi	r24, 0x06	; 6
     360:	80 93 81 00 	sts	0x0081, r24
	TCNT1=0;					//set initial value of counter to zero
     364:	10 92 85 00 	sts	0x0085, r1
     368:	10 92 84 00 	sts	0x0084, r1
	OCR1A=0;					//not using other timer modules
     36c:	10 92 89 00 	sts	0x0089, r1
     370:	10 92 88 00 	sts	0x0088, r1
	OCR1B=0;
     374:	10 92 8b 00 	sts	0x008B, r1
     378:	10 92 8a 00 	sts	0x008A, r1
	ICR1=0;
     37c:	10 92 87 00 	sts	0x0087, r1
     380:	10 92 86 00 	sts	0x0086, r1
	TIMSK1=0;					//not using interrupts for timer 1
     384:	10 92 6f 00 	sts	0x006F, r1
	TIFR1=0;
     388:	16 ba       	out	0x16, r1	; 22
	DDRD&=~(1<<PD6);							//make T1 pin as input PD6
     38a:	56 98       	cbi	0x0a, 6	; 10
     38c:	08 95       	ret

0000038e <_ZN5pulse5delayEj>:
	}
	return 1;
}
void pulse::delay(unsigned int time_ms)
{
	while(time_ms--)_delay_ms(1);
     38e:	61 15       	cp	r22, r1
     390:	71 05       	cpc	r23, r1
     392:	51 f0       	breq	.+20     	; 0x3a8 <_ZN5pulse5delayEj+0x1a>
     394:	86 e6       	ldi	r24, 0x66	; 102
     396:	9e e0       	ldi	r25, 0x0E	; 14
     398:	01 97       	sbiw	r24, 0x01	; 1
     39a:	f1 f7       	brne	.-4      	; 0x398 <_ZN5pulse5delayEj+0xa>
     39c:	00 00       	nop
     39e:	61 50       	subi	r22, 0x01	; 1
     3a0:	71 09       	sbc	r23, r1
     3a2:	61 15       	cp	r22, r1
     3a4:	71 05       	cpc	r23, r1
     3a6:	b1 f7       	brne	.-20     	; 0x394 <_ZN5pulse5delayEj+0x6>
     3a8:	08 95       	ret

000003aa <_ZN9pulseInfo17setPulseWidthTimeEv>:
}

void pulseInfo::setPulseWidthTime()
{
     3aa:	fc 01       	movw	r30, r24
	pulseWidthTime=stopTime-startTime;
     3ac:	84 81       	ldd	r24, Z+4	; 0x04
     3ae:	95 81       	ldd	r25, Z+5	; 0x05
     3b0:	20 81       	ld	r18, Z
     3b2:	31 81       	ldd	r19, Z+1	; 0x01
     3b4:	82 1b       	sub	r24, r18
     3b6:	93 0b       	sbc	r25, r19
     3b8:	93 87       	std	Z+11, r25	; 0x0b
     3ba:	82 87       	std	Z+10, r24	; 0x0a
     3bc:	08 95       	ret

000003be <_ZN5pulse7captureEv>:
*check every 2 ms that counter is incremented or not
*if incremented continue to check
*else exit loop and save timer value as pulse count 
*********************************************************/
char pulse::capture()
{
     3be:	4f 92       	push	r4
     3c0:	5f 92       	push	r5
     3c2:	6f 92       	push	r6
     3c4:	7f 92       	push	r7
     3c6:	af 92       	push	r10
     3c8:	bf 92       	push	r11
     3ca:	cf 92       	push	r12
     3cc:	df 92       	push	r13
     3ce:	ef 92       	push	r14
     3d0:	ff 92       	push	r15
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	ec 01       	movw	r28, r24
	init();					//initialise registers for capture
     3dc:	be df       	rcall	.-132    	; 0x35a <_ZN5pulse4initEv>
	pulseData.numberOfEdges	= 0;		
     3de:	19 86       	std	Y+9, r1	; 0x09
     3e0:	18 86       	std	Y+8, r1	; 0x08
	unsigned long temptime=systime::getSysTime();										//save time when it looks for a pulse 
     3e2:	ba d2       	rcall	.+1396   	; 0x958 <_ZN7systime10getSysTimeEv>
     3e4:	2b 01       	movw	r4, r22
     3e6:	3c 01       	movw	r6, r24
	while(TCNT1 == 0){
     3e8:	04 e8       	ldi	r16, 0x84	; 132
     3ea:	10 e0       	ldi	r17, 0x00	; 0
		if( (systime::getSysTime()-temptime)>(unsigned long)(1.5*tDit))					//check if sufficient time has passed after
     3ec:	5e 01       	movw	r10, r28
     3ee:	89 e6       	ldi	r24, 0x69	; 105
     3f0:	a8 0e       	add	r10, r24
     3f2:	b1 1c       	adc	r11, r1
char pulse::capture()
{
	init();					//initialise registers for capture
	pulseData.numberOfEdges	= 0;		
	unsigned long temptime=systime::getSysTime();										//save time when it looks for a pulse 
	while(TCNT1 == 0){
     3f4:	21 c0       	rjmp	.+66     	; 0x438 <_ZN5pulse7captureEv+0x7a>
		if( (systime::getSysTime()-temptime)>(unsigned long)(1.5*tDit))					//check if sufficient time has passed after
     3f6:	b0 d2       	rcall	.+1376   	; 0x958 <_ZN7systime10getSysTimeEv>
     3f8:	6b 01       	movw	r12, r22
     3fa:	7c 01       	movw	r14, r24
     3fc:	c4 18       	sub	r12, r4
     3fe:	d5 08       	sbc	r13, r5
     400:	e6 08       	sbc	r14, r6
     402:	f7 08       	sbc	r15, r7
     404:	f5 01       	movw	r30, r10
     406:	60 81       	ld	r22, Z
     408:	71 81       	ldd	r23, Z+1	; 0x01
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	1e d3       	rcall	.+1596   	; 0xa4c <__floatunsisf>
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	40 ec       	ldi	r20, 0xC0	; 192
     416:	5f e3       	ldi	r21, 0x3F	; 63
     418:	7f d3       	rcall	.+1790   	; 0xb18 <__mulsf3>
     41a:	ec d2       	rcall	.+1496   	; 0x9f4 <__fixunssfsi>
     41c:	6c 15       	cp	r22, r12
     41e:	7d 05       	cpc	r23, r13
     420:	8e 05       	cpc	r24, r14
     422:	9f 05       	cpc	r25, r15
     424:	48 f4       	brcc	.+18     	; 0x438 <_ZN5pulse7captureEv+0x7a>
		{
			isDitTimeout=true;															//if yes setDitTimeout Bit
     426:	fe 01       	movw	r30, r28
     428:	ee 59       	subi	r30, 0x9E	; 158
     42a:	ff 4f       	sbci	r31, 0xFF	; 255
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	80 83       	st	Z, r24
			flag=1;
     430:	cf 59       	subi	r28, 0x9F	; 159
     432:	df 4f       	sbci	r29, 0xFF	; 255
     434:	88 83       	st	Y, r24
			return flag;
     436:	4a c0       	rjmp	.+148    	; 0x4cc <_ZN5pulse7captureEv+0x10e>
char pulse::capture()
{
	init();					//initialise registers for capture
	pulseData.numberOfEdges	= 0;		
	unsigned long temptime=systime::getSysTime();										//save time when it looks for a pulse 
	while(TCNT1 == 0){
     438:	f8 01       	movw	r30, r16
     43a:	80 81       	ld	r24, Z
     43c:	91 81       	ldd	r25, Z+1	; 0x01
     43e:	89 2b       	or	r24, r25
     440:	d1 f2       	breq	.-76     	; 0x3f6 <_ZN5pulse7captureEv+0x38>
			flag=1;
			return flag;
		}
	};		//wait for first falling edge		//ie within timeout edge is detected
	
	pulseData.startTime=systime::getSysTime();	//save START TIME
     442:	8a d2       	rcall	.+1300   	; 0x958 <_ZN7systime10getSysTimeEv>
     444:	68 83       	st	Y, r22
     446:	79 83       	std	Y+1, r23	; 0x01
     448:	8a 83       	std	Y+2, r24	; 0x02
     44a:	9b 83       	std	Y+3, r25	; 0x03
	isDitTimeout=false;
     44c:	fe 01       	movw	r30, r28
     44e:	ee 59       	subi	r30, 0x9E	; 158
     450:	ff 4f       	sbci	r31, 0xFF	; 255
     452:	10 82       	st	Z, r1
	while(true)									
	{
		pulseData.numberOfEdges=TCNT1;
     454:	04 e8       	ldi	r16, 0x84	; 132
     456:	10 e0       	ldi	r17, 0x00	; 0
		delay(timeout);								///timeout value pulse edge timeoutSS
     458:	7e 01       	movw	r14, r28
     45a:	f3 e6       	ldi	r31, 0x63	; 99
     45c:	ef 0e       	add	r14, r31
     45e:	f1 1c       	adc	r15, r1
	
	pulseData.startTime=systime::getSysTime();	//save START TIME
	isDitTimeout=false;
	while(true)									
	{
		pulseData.numberOfEdges=TCNT1;
     460:	f8 01       	movw	r30, r16
     462:	80 81       	ld	r24, Z
     464:	91 81       	ldd	r25, Z+1	; 0x01
     466:	99 87       	std	Y+9, r25	; 0x09
     468:	88 87       	std	Y+8, r24	; 0x08
		delay(timeout);								///timeout value pulse edge timeoutSS
     46a:	f7 01       	movw	r30, r14
     46c:	60 81       	ld	r22, Z
     46e:	71 81       	ldd	r23, Z+1	; 0x01
     470:	ce 01       	movw	r24, r28
     472:	8d df       	rcall	.-230    	; 0x38e <_ZN5pulse5delayEj>
		if(pulseData.numberOfEdges == TCNT1)break;	//break only if counter value
     474:	f8 01       	movw	r30, r16
     476:	80 81       	ld	r24, Z
     478:	91 81       	ldd	r25, Z+1	; 0x01
     47a:	28 85       	ldd	r18, Y+8	; 0x08
     47c:	39 85       	ldd	r19, Y+9	; 0x09
     47e:	28 17       	cp	r18, r24
     480:	39 07       	cpc	r19, r25
     482:	71 f7       	brne	.-36     	; 0x460 <_ZN5pulse7captureEv+0xa2>
													//does not changes within timeout
	}
	pulseData.stopTime=systime::getSysTime();		//save pulse STOP TIME
     484:	69 d2       	rcall	.+1234   	; 0x958 <_ZN7systime10getSysTimeEv>
     486:	6c 83       	std	Y+4, r22	; 0x04
     488:	7d 83       	std	Y+5, r23	; 0x05
     48a:	8e 83       	std	Y+6, r24	; 0x06
     48c:	9f 83       	std	Y+7, r25	; 0x07
	pulseData.setPulseWidthTime();					
     48e:	ce 01       	movw	r24, r28
     490:	8c df       	rcall	.-232    	; 0x3aa <_ZN9pulseInfo17setPulseWidthTimeEv>
	
	if((pulseData.pulseWidthTime<thresholdTime)	&&	(pulseData.pulseWidthTime>maxThresholdTime)	)//flag for error
     492:	8a 85       	ldd	r24, Y+10	; 0x0a
     494:	9b 85       	ldd	r25, Y+11	; 0x0b
     496:	fe 01       	movw	r30, r28
     498:	eb 59       	subi	r30, 0x9B	; 155
     49a:	ff 4f       	sbci	r31, 0xFF	; 255
     49c:	20 81       	ld	r18, Z
     49e:	31 81       	ldd	r19, Z+1	; 0x01
     4a0:	82 17       	cp	r24, r18
     4a2:	93 07       	cpc	r25, r19
     4a4:	48 f4       	brcc	.+18     	; 0x4b8 <_ZN5pulse7captureEv+0xfa>
     4a6:	32 96       	adiw	r30, 0x02	; 2
     4a8:	20 81       	ld	r18, Z
     4aa:	31 81       	ldd	r19, Z+1	; 0x01
     4ac:	28 17       	cp	r18, r24
     4ae:	39 07       	cpc	r19, r25
     4b0:	18 f4       	brcc	.+6      	; 0x4b8 <_ZN5pulse7captureEv+0xfa>
	{
		flag=0;			//invalid flag : unsuccessful
     4b2:	36 97       	sbiw	r30, 0x06	; 6
     4b4:	10 82       	st	Z, r1
     4b6:	05 c0       	rjmp	.+10     	; 0x4c2 <_ZN5pulse7captureEv+0x104>
	}else{
		flag=1;			//valid flag   : successful
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	fe 01       	movw	r30, r28
     4bc:	ef 59       	subi	r30, 0x9F	; 159
     4be:	ff 4f       	sbci	r31, 0xFF	; 255
     4c0:	80 83       	st	Z, r24
	}
	pulseData.ifData=flag;			//says validity of pulse data
     4c2:	fe 01       	movw	r30, r28
     4c4:	ef 59       	subi	r30, 0x9F	; 159
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	80 81       	ld	r24, Z
     4ca:	8c 87       	std	Y+12, r24	; 0x0c
	return flag;
}
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	1f 91       	pop	r17
     4d2:	0f 91       	pop	r16
     4d4:	ff 90       	pop	r15
     4d6:	ef 90       	pop	r14
     4d8:	df 90       	pop	r13
     4da:	cf 90       	pop	r12
     4dc:	bf 90       	pop	r11
     4de:	af 90       	pop	r10
     4e0:	7f 90       	pop	r7
     4e2:	6f 90       	pop	r6
     4e4:	5f 90       	pop	r5
     4e6:	4f 90       	pop	r4
     4e8:	08 95       	ret

000004ea <_ZN5pulse11receiveCodeEv>:
/***************************************
*char pulse::receiveCode()
*returns 1 if successful 
****************************************/
char pulse::receiveCode()	
{
     4ea:	cf 92       	push	r12
     4ec:	df 92       	push	r13
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	ec 01       	movw	r28, r24
	char timeoutNo=0;
	bool isFirstTimeout=true;
	for(int i=0; i<6; )
     4fc:	00 e0       	ldi	r16, 0x00	; 0
     4fe:	10 e0       	ldi	r17, 0x00	; 0
	{
		char isValid = capture();		//receive data for pulse
		if(isValid==1)				
		{
			if(isDitTimeout==false)		//c
     500:	7c 01       	movw	r14, r24
     502:	82 e6       	ldi	r24, 0x62	; 98
     504:	e8 0e       	add	r14, r24
     506:	f1 1c       	adc	r15, r1
			{
				morsePulses[i]=pulseData;		//if not ditTimeout then save the data and increment index 'i'
     508:	0f 2e       	mov	r0, r31
     50a:	fd e0       	ldi	r31, 0x0D	; 13
     50c:	df 2e       	mov	r13, r31
     50e:	f0 2d       	mov	r31, r0
				morsePulses[i].ifData=1;
     510:	cc 24       	eor	r12, r12
     512:	c3 94       	inc	r12
{
	char timeoutNo=0;
	bool isFirstTimeout=true;
	for(int i=0; i<6; )
	{
		char isValid = capture();		//receive data for pulse
     514:	ce 01       	movw	r24, r28
     516:	53 df       	rcall	.-346    	; 0x3be <_ZN5pulse7captureEv>
		if(isValid==1)				
     518:	81 30       	cpi	r24, 0x01	; 1
     51a:	c1 f5       	brne	.+112    	; 0x58c <_ZN5pulse11receiveCodeEv+0xa2>
		{
			if(isDitTimeout==false)		//c
     51c:	f7 01       	movw	r30, r14
     51e:	80 81       	ld	r24, Z
     520:	88 23       	and	r24, r24
     522:	21 f0       	breq	.+8      	; 0x52c <_ZN5pulse11receiveCodeEv+0x42>
			}else{								//else it was a ditTimeout
				
				if(isFirstTimeout==true)	//for first timout repeat and for other return it
				{
					isFirstTimeout = false;	//next time this  will not execute
					for(int j=5;j>i;j--)
     524:	05 30       	cpi	r16, 0x05	; 5
     526:	11 05       	cpc	r17, r1
     528:	ec f0       	brlt	.+58     	; 0x564 <_ZN5pulse11receiveCodeEv+0x7a>
     52a:	34 c0       	rjmp	.+104    	; 0x594 <_ZN5pulse11receiveCodeEv+0xaa>
		char isValid = capture();		//receive data for pulse
		if(isValid==1)				
		{
			if(isDitTimeout==false)		//c
			{
				morsePulses[i]=pulseData;		//if not ditTimeout then save the data and increment index 'i'
     52c:	c8 01       	movw	r24, r16
     52e:	01 96       	adiw	r24, 0x01	; 1
     530:	d8 9e       	mul	r13, r24
     532:	d0 01       	movw	r26, r0
     534:	d9 9e       	mul	r13, r25
     536:	b0 0d       	add	r27, r0
     538:	11 24       	eor	r1, r1
     53a:	ac 0f       	add	r26, r28
     53c:	bd 1f       	adc	r27, r29
     53e:	fe 01       	movw	r30, r28
     540:	2d 2d       	mov	r18, r13
     542:	01 90       	ld	r0, Z+
     544:	0d 92       	st	X+, r0
     546:	2a 95       	dec	r18
     548:	e1 f7       	brne	.-8      	; 0x542 <_ZN5pulse11receiveCodeEv+0x58>
				morsePulses[i].ifData=1;
     54a:	d0 9e       	mul	r13, r16
     54c:	f0 01       	movw	r30, r0
     54e:	d1 9e       	mul	r13, r17
     550:	f0 0d       	add	r31, r0
     552:	11 24       	eor	r1, r1
     554:	ec 0f       	add	r30, r28
     556:	fd 1f       	adc	r31, r29
     558:	c1 8e       	std	Z+25, r12	; 0x19
				i++;
     55a:	8c 01       	movw	r16, r24
****************************************/
char pulse::receiveCode()	
{
	char timeoutNo=0;
	bool isFirstTimeout=true;
	for(int i=0; i<6; )
     55c:	86 30       	cpi	r24, 0x06	; 6
     55e:	91 05       	cpc	r25, r1
     560:	cc f4       	brge	.+50     	; 0x594 <_ZN5pulse11receiveCodeEv+0xaa>
     562:	d8 cf       	rjmp	.-80     	; 0x514 <_ZN5pulse11receiveCodeEv+0x2a>
     564:	ce 01       	movw	r24, r28
     566:	c1 54       	subi	r28, 0x41	; 65
     568:	d1 09       	sbc	r29, r1
     56a:	4d e0       	ldi	r20, 0x0D	; 13
     56c:	40 9f       	mul	r20, r16
     56e:	90 01       	movw	r18, r0
     570:	41 9f       	mul	r20, r17
     572:	30 0d       	add	r19, r0
     574:	11 24       	eor	r1, r1
     576:	2c 0f       	add	r18, r28
     578:	3d 1f       	adc	r19, r29
     57a:	fc 01       	movw	r30, r24
     57c:	e6 5a       	subi	r30, 0xA6	; 166
     57e:	ff 4f       	sbci	r31, 0xFF	; 255
				if(isFirstTimeout==true)	//for first timout repeat and for other return it
				{
					isFirstTimeout = false;	//next time this  will not execute
					for(int j=5;j>i;j--)
					{
						morsePulses[j].ifData=0;				//make all other ifData zero
     580:	10 82       	st	Z, r1
     582:	0d 97       	sbiw	r24, 0x0d	; 13
			}else{								//else it was a ditTimeout
				
				if(isFirstTimeout==true)	//for first timout repeat and for other return it
				{
					isFirstTimeout = false;	//next time this  will not execute
					for(int j=5;j>i;j--)
     584:	82 17       	cp	r24, r18
     586:	93 07       	cpc	r25, r19
     588:	c1 f7       	brne	.-16     	; 0x57a <_ZN5pulse11receiveCodeEv+0x90>
     58a:	04 c0       	rjmp	.+8      	; 0x594 <_ZN5pulse11receiveCodeEv+0xaa>
****************************************/
char pulse::receiveCode()	
{
	char timeoutNo=0;
	bool isFirstTimeout=true;
	for(int i=0; i<6; )
     58c:	06 30       	cpi	r16, 0x06	; 6
     58e:	11 05       	cpc	r17, r1
     590:	0c f4       	brge	.+2      	; 0x594 <_ZN5pulse11receiveCodeEv+0xaa>
     592:	c0 cf       	rjmp	.-128    	; 0x514 <_ZN5pulse11receiveCodeEv+0x2a>
						}
				}
		}else ;					//do nothing if it was not a valid data
	}
	return 1;
}
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	ff 90       	pop	r15
     5a0:	ef 90       	pop	r14
     5a2:	df 90       	pop	r13
     5a4:	cf 90       	pop	r12
     5a6:	08 95       	ret

000005a8 <_ZN5pulse14decodeToDitDahEv>:
*extracts dit and dah from the morsePulses array and stores in  DitDah array
*returns true if successful (only if error checking) else false
*absense of errorChecking strictly calculates on based on (tDit+tDah)/2
**********************************************/
bool pulse::decodeToDitDah()
{
     5a8:	2f 92       	push	r2
     5aa:	3f 92       	push	r3
     5ac:	4f 92       	push	r4
     5ae:	5f 92       	push	r5
     5b0:	6f 92       	push	r6
     5b2:	7f 92       	push	r7
     5b4:	8f 92       	push	r8
     5b6:	9f 92       	push	r9
     5b8:	af 92       	push	r10
     5ba:	bf 92       	push	r11
     5bc:	cf 92       	push	r12
     5be:	df 92       	push	r13
     5c0:	ef 92       	push	r14
     5c2:	ff 92       	push	r15
     5c4:	0f 93       	push	r16
     5c6:	1f 93       	push	r17
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
	
	//find number of morse pulses
	int i=0;
	for(i=0; i<6; i++) DitDah[i] = 0;		//make  all previous data to zero
     5cc:	fc 01       	movw	r30, r24
     5ce:	e5 5a       	subi	r30, 0xA5	; 165
     5d0:	ff 4f       	sbci	r31, 0xFF	; 255
     5d2:	10 82       	st	Z, r1
     5d4:	31 96       	adiw	r30, 0x01	; 1
     5d6:	10 82       	st	Z, r1
     5d8:	31 96       	adiw	r30, 0x01	; 1
     5da:	10 82       	st	Z, r1
     5dc:	31 96       	adiw	r30, 0x01	; 1
     5de:	10 82       	st	Z, r1
     5e0:	31 96       	adiw	r30, 0x01	; 1
     5e2:	10 82       	st	Z, r1
     5e4:	31 96       	adiw	r30, 0x01	; 1
     5e6:	10 82       	st	Z, r1
	for( i=0;morsePulses[i].ifData!=0;i++);
     5e8:	ec 01       	movw	r28, r24
     5ea:	29 8d       	ldd	r18, Y+25	; 0x19
     5ec:	21 11       	cpse	r18, r1
     5ee:	1a c0       	rjmp	.+52     	; 0x624 <_ZN5pulse14decodeToDitDahEv+0x7c>
     5f0:	fc 01       	movw	r30, r24
     5f2:	dc 01       	movw	r26, r24
     5f4:	a5 5a       	subi	r26, 0xA5	; 165
     5f6:	bf 4f       	sbci	r27, 0xFF	; 255
*extracts dit and dah from the morsePulses array and stores in  DitDah array
*returns true if successful (only if error checking) else false
*absense of errorChecking strictly calculates on based on (tDit+tDah)/2
**********************************************/
bool pulse::decodeToDitDah()
{
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
		{
			DitDah[j]=0;
			continue;
		}
		else{
				if(errorCheck)
     5fc:	bc 01       	movw	r22, r24
     5fe:	6f 58       	subi	r22, 0x8F	; 143
     600:	7f 4f       	sbci	r23, 0xFF	; 255
					{
					unsigned long timeWidth (morsePulses[j].startTime-morsePulses[j-1].stopTime) ;		//finding time distance betn next pulse falling and previous pulse rising
					if(!((timeWidth>tDit/2) && ( timeWidth <tDah/2) ))return false;
					}
				}
				if( absolute(morsePulses[j].pulseWidthTime - tDah )<tolerance )							//its a dah
     602:	8c 01       	movw	r16, r24
     604:	01 59       	subi	r16, 0x91	; 145
     606:	1f 4f       	sbci	r17, 0xFF	; 255
     608:	ac 01       	movw	r20, r24
     60a:	45 59       	subi	r20, 0x95	; 149
     60c:	5f 4f       	sbci	r21, 0xFF	; 255
				{
					DitDah[j]=3;
				}
				else if(absolute(morsePulses[j].pulseWidthTime-tDit)<tolerance)							//its a dit
     60e:	5c 01       	movw	r10, r24
     610:	d9 e6       	ldi	r29, 0x69	; 105
     612:	ad 0e       	add	r10, r29
     614:	b1 1c       	adc	r11, r1
				{
					DitDah[j]=1;
     616:	88 24       	eor	r8, r8
     618:	83 94       	inc	r8
					if(!((timeWidth>tDit/2) && ( timeWidth <tDah/2) ))return false;
					}
				}
				if( absolute(morsePulses[j].pulseWidthTime - tDah )<tolerance )							//its a dah
				{
					DitDah[j]=3;
     61a:	0f 2e       	mov	r0, r31
     61c:	f3 e0       	ldi	r31, 0x03	; 3
     61e:	9f 2e       	mov	r9, r31
     620:	f0 2d       	mov	r31, r0
     622:	0b c0       	rjmp	.+22     	; 0x63a <_ZN5pulse14decodeToDitDahEv+0x92>
     624:	9c 01       	movw	r18, r24
     626:	2a 5d       	subi	r18, 0xDA	; 218
     628:	3f 4f       	sbci	r19, 0xFF	; 255
     62a:	23 5f       	subi	r18, 0xF3	; 243
     62c:	3f 4f       	sbci	r19, 0xFF	; 255
     62e:	f9 01       	movw	r30, r18
     630:	3d 97       	sbiw	r30, 0x0d	; 13
{
	
	//find number of morse pulses
	int i=0;
	for(i=0; i<6; i++) DitDah[i] = 0;		//make  all previous data to zero
	for( i=0;morsePulses[i].ifData!=0;i++);
     632:	40 81       	ld	r20, Z
     634:	41 11       	cpse	r20, r1
     636:	f9 cf       	rjmp	.-14     	; 0x62a <_ZN5pulse14decodeToDitDahEv+0x82>
     638:	db cf       	rjmp	.-74     	; 0x5f0 <_ZN5pulse14decodeToDitDahEv+0x48>
     63a:	1f 01       	movw	r2, r30
	int numberOfPulses=i;
	for(int j=0;j<6;j++)
	{
		if(morsePulses[j].ifData==0)		//just to be safe
     63c:	81 8d       	ldd	r24, Z+25	; 0x19
     63e:	81 11       	cpse	r24, r1
     640:	02 c0       	rjmp	.+4      	; 0x646 <_ZN5pulse14decodeToDitDahEv+0x9e>
		{
			DitDah[j]=0;
     642:	1c 92       	st	X, r1
			continue;
     644:	55 c0       	rjmp	.+170    	; 0x6f0 <_ZN5pulse14decodeToDitDahEv+0x148>
		}
		else{
				if(errorCheck)
     646:	eb 01       	movw	r28, r22
     648:	88 81       	ld	r24, Y
     64a:	88 23       	and	r24, r24
     64c:	49 f1       	breq	.+82     	; 0x6a0 <_ZN5pulse14decodeToDitDahEv+0xf8>
				{
					if(j>0)			//if not the first pulse
     64e:	12 16       	cp	r1, r18
     650:	13 06       	cpc	r1, r19
     652:	34 f5       	brge	.+76     	; 0x6a0 <_ZN5pulse14decodeToDitDahEv+0xf8>
					{
					unsigned long timeWidth (morsePulses[j].startTime-morsePulses[j-1].stopTime) ;		//finding time distance betn next pulse falling and previous pulse rising
     654:	c5 84       	ldd	r12, Z+13	; 0x0d
     656:	d6 84       	ldd	r13, Z+14	; 0x0e
     658:	e7 84       	ldd	r14, Z+15	; 0x0f
     65a:	f0 88       	ldd	r15, Z+16	; 0x10
     65c:	44 80       	ldd	r4, Z+4	; 0x04
     65e:	55 80       	ldd	r5, Z+5	; 0x05
     660:	66 80       	ldd	r6, Z+6	; 0x06
     662:	77 80       	ldd	r7, Z+7	; 0x07
     664:	c4 18       	sub	r12, r4
     666:	d5 08       	sbc	r13, r5
     668:	e6 08       	sbc	r14, r6
     66a:	f7 08       	sbc	r15, r7
					if(!((timeWidth>tDit/2) && ( timeWidth <tDah/2) ))return false;
     66c:	e5 01       	movw	r28, r10
     66e:	88 81       	ld	r24, Y
     670:	99 81       	ldd	r25, Y+1	; 0x01
     672:	96 95       	lsr	r25
     674:	87 95       	ror	r24
     676:	2c 01       	movw	r4, r24
     678:	61 2c       	mov	r6, r1
     67a:	71 2c       	mov	r7, r1
     67c:	4c 14       	cp	r4, r12
     67e:	5d 04       	cpc	r5, r13
     680:	6e 04       	cpc	r6, r14
     682:	7f 04       	cpc	r7, r15
     684:	f0 f5       	brcc	.+124    	; 0x702 <_ZN5pulse14decodeToDitDahEv+0x15a>
     686:	ea 01       	movw	r28, r20
     688:	88 81       	ld	r24, Y
     68a:	99 81       	ldd	r25, Y+1	; 0x01
     68c:	96 95       	lsr	r25
     68e:	87 95       	ror	r24
     690:	2c 01       	movw	r4, r24
     692:	61 2c       	mov	r6, r1
     694:	71 2c       	mov	r7, r1
     696:	c4 14       	cp	r12, r4
     698:	d5 04       	cpc	r13, r5
     69a:	e6 04       	cpc	r14, r6
     69c:	f7 04       	cpc	r15, r7
     69e:	98 f5       	brcc	.+102    	; 0x706 <_ZN5pulse14decodeToDitDahEv+0x15e>
					}
				}
				if( absolute(morsePulses[j].pulseWidthTime - tDah )<tolerance )							//its a dah
     6a0:	e1 01       	movw	r28, r2
     6a2:	ef 88       	ldd	r14, Y+23	; 0x17
     6a4:	f8 8c       	ldd	r15, Y+24	; 0x18
     6a6:	e8 01       	movw	r28, r16
     6a8:	68 80       	ld	r6, Y
     6aa:	79 80       	ldd	r7, Y+1	; 0x01
     6ac:	ea 01       	movw	r28, r20
     6ae:	88 81       	ld	r24, Y
     6b0:	99 81       	ldd	r25, Y+1	; 0x01
     6b2:	67 01       	movw	r12, r14
     6b4:	c8 1a       	sub	r12, r24
     6b6:	d9 0a       	sbc	r13, r25
*unsigned int pulse::absolute(int x)
*return absolute value of an integer
*********************************/
unsigned int pulse::absolute(int x)
{
	return (  (x>=0)?x:(-1)*x   );
     6b8:	c6 01       	movw	r24, r12
     6ba:	99 23       	and	r25, r25
     6bc:	24 f4       	brge	.+8      	; 0x6c6 <_ZN5pulse14decodeToDitDahEv+0x11e>
     6be:	88 27       	eor	r24, r24
     6c0:	99 27       	eor	r25, r25
     6c2:	8c 19       	sub	r24, r12
     6c4:	9d 09       	sbc	r25, r13
					{
					unsigned long timeWidth (morsePulses[j].startTime-morsePulses[j-1].stopTime) ;		//finding time distance betn next pulse falling and previous pulse rising
					if(!((timeWidth>tDit/2) && ( timeWidth <tDah/2) ))return false;
					}
				}
				if( absolute(morsePulses[j].pulseWidthTime - tDah )<tolerance )							//its a dah
     6c6:	86 15       	cp	r24, r6
     6c8:	97 05       	cpc	r25, r7
     6ca:	10 f4       	brcc	.+4      	; 0x6d0 <_ZN5pulse14decodeToDitDahEv+0x128>
				{
					DitDah[j]=3;
     6cc:	9c 92       	st	X, r9
     6ce:	10 c0       	rjmp	.+32     	; 0x6f0 <_ZN5pulse14decodeToDitDahEv+0x148>
				}
				else if(absolute(morsePulses[j].pulseWidthTime-tDit)<tolerance)							//its a dit
     6d0:	e5 01       	movw	r28, r10
     6d2:	88 81       	ld	r24, Y
     6d4:	99 81       	ldd	r25, Y+1	; 0x01
     6d6:	e8 1a       	sub	r14, r24
     6d8:	f9 0a       	sbc	r15, r25
*unsigned int pulse::absolute(int x)
*return absolute value of an integer
*********************************/
unsigned int pulse::absolute(int x)
{
	return (  (x>=0)?x:(-1)*x   );
     6da:	c7 01       	movw	r24, r14
     6dc:	99 23       	and	r25, r25
     6de:	24 f4       	brge	.+8      	; 0x6e8 <_ZN5pulse14decodeToDitDahEv+0x140>
     6e0:	88 27       	eor	r24, r24
     6e2:	99 27       	eor	r25, r25
     6e4:	8e 19       	sub	r24, r14
     6e6:	9f 09       	sbc	r25, r15
				}
				if( absolute(morsePulses[j].pulseWidthTime - tDah )<tolerance )							//its a dah
				{
					DitDah[j]=3;
				}
				else if(absolute(morsePulses[j].pulseWidthTime-tDit)<tolerance)							//its a dit
     6e8:	86 15       	cp	r24, r6
     6ea:	97 05       	cpc	r25, r7
     6ec:	70 f4       	brcc	.+28     	; 0x70a <_ZN5pulse14decodeToDitDahEv+0x162>
				{
					DitDah[j]=1;
     6ee:	8c 92       	st	X, r8
	//find number of morse pulses
	int i=0;
	for(i=0; i<6; i++) DitDah[i] = 0;		//make  all previous data to zero
	for( i=0;morsePulses[i].ifData!=0;i++);
	int numberOfPulses=i;
	for(int j=0;j<6;j++)
     6f0:	2f 5f       	subi	r18, 0xFF	; 255
     6f2:	3f 4f       	sbci	r19, 0xFF	; 255
     6f4:	3d 96       	adiw	r30, 0x0d	; 13
     6f6:	11 96       	adiw	r26, 0x01	; 1
     6f8:	26 30       	cpi	r18, 0x06	; 6
     6fa:	31 05       	cpc	r19, r1
     6fc:	09 f0       	breq	.+2      	; 0x700 <_ZN5pulse14decodeToDitDahEv+0x158>
     6fe:	9d cf       	rjmp	.-198    	; 0x63a <_ZN5pulse14decodeToDitDahEv+0x92>
     700:	06 c0       	rjmp	.+12     	; 0x70e <_ZN5pulse14decodeToDitDahEv+0x166>
				if(errorCheck)
				{
					if(j>0)			//if not the first pulse
					{
					unsigned long timeWidth (morsePulses[j].startTime-morsePulses[j-1].stopTime) ;		//finding time distance betn next pulse falling and previous pulse rising
					if(!((timeWidth>tDit/2) && ( timeWidth <tDah/2) ))return false;
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	05 c0       	rjmp	.+10     	; 0x710 <_ZN5pulse14decodeToDitDahEv+0x168>
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	03 c0       	rjmp	.+6      	; 0x710 <_ZN5pulse14decodeToDitDahEv+0x168>
				}
				else if(absolute(morsePulses[j].pulseWidthTime-tDit)<tolerance)							//its a dit
				{
					DitDah[j]=1;
				}else{
					return false;
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	01 c0       	rjmp	.+2      	; 0x710 <_ZN5pulse14decodeToDitDahEv+0x168>
				}
			}
	}
	return true;
     70e:	81 e0       	ldi	r24, 0x01	; 1
}
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	0f 91       	pop	r16
     718:	ff 90       	pop	r15
     71a:	ef 90       	pop	r14
     71c:	df 90       	pop	r13
     71e:	cf 90       	pop	r12
     720:	bf 90       	pop	r11
     722:	af 90       	pop	r10
     724:	9f 90       	pop	r9
     726:	8f 90       	pop	r8
     728:	7f 90       	pop	r7
     72a:	6f 90       	pop	r6
     72c:	5f 90       	pop	r5
     72e:	4f 90       	pop	r4
     730:	3f 90       	pop	r3
     732:	2f 90       	pop	r2
     734:	08 95       	ret

00000736 <_ZN5pulse14getDecodedDataEPc>:
/************************************************************************/
/* void pulse::getDecodedData(char *buffer)
/* input : pointer to a  buffer for storing decoded output              */
/************************************************************************/
void pulse::getDecodedData(char *buffer)
{
     736:	dc 01       	movw	r26, r24
     738:	a5 5a       	subi	r26, 0xA5	; 165
     73a:	bf 4f       	sbci	r27, 0xFF	; 255
     73c:	e6 2f       	mov	r30, r22
     73e:	f7 2f       	mov	r31, r23
	for(int i=0;i<6;i++)buffer[i]=DitDah[i]+0x30;
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	8d 91       	ld	r24, X+
     746:	80 5d       	subi	r24, 0xD0	; 208
     748:	81 93       	st	Z+, r24
     74a:	2f 5f       	subi	r18, 0xFF	; 255
     74c:	3f 4f       	sbci	r19, 0xFF	; 255
     74e:	26 30       	cpi	r18, 0x06	; 6
     750:	31 05       	cpc	r19, r1
     752:	c1 f7       	brne	.-16     	; 0x744 <_ZN5pulse14getDecodedDataEPc+0xe>
}
     754:	08 95       	ret

00000756 <main>:
#include "pulse.h"
#include "systime.h"
#include "lcd.h"
#include "uart0.h"
int main(void)
{
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
     75e:	c9 5a       	subi	r28, 0xA9	; 169
     760:	d1 09       	sbc	r29, r1
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	f8 94       	cli
     766:	de bf       	out	0x3e, r29	; 62
     768:	0f be       	out	0x3f, r0	; 63
     76a:	cd bf       	out	0x3d, r28	; 61
	LCD lcd;
     76c:	ce 01       	movw	r24, r28
     76e:	8d 58       	subi	r24, 0x8D	; 141
     770:	9f 4f       	sbci	r25, 0xFF	; 255
     772:	63 dd       	rcall	.-1338   	; 0x23a <_ZN3LCDC1Ev>
	pulse code;
     774:	ce 01       	movw	r24, r28
     776:	01 96       	adiw	r24, 0x01	; 1
     778:	c8 dd       	rcall	.-1136   	; 0x30a <_ZN5pulseC1Ev>
	uart0 serial(57600);
     77a:	40 e0       	ldi	r20, 0x00	; 0
     77c:	51 ee       	ldi	r21, 0xE1	; 225
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	ce 01       	movw	r24, r28
     784:	8a 55       	subi	r24, 0x5A	; 90
     786:	9f 4f       	sbci	r25, 0xFF	; 255
     788:	f0 d0       	rcall	.+480    	; 0x96a <_ZN5uart0C1Em>
	lcd.print(":)");
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	72 e0       	ldi	r23, 0x02	; 2
     78e:	ce 01       	movw	r24, r28
     790:	8d 58       	subi	r24, 0x8D	; 141
     792:	9f 4f       	sbci	r25, 0xFF	; 255
     794:	85 dd       	rcall	.-1270   	; 0x2a0 <_ZN3LCD5printEPc>
	serial.printStr("Initialised\r\n");
     796:	63 e0       	ldi	r22, 0x03	; 3
     798:	72 e0       	ldi	r23, 0x02	; 2
     79a:	ce 01       	movw	r24, r28
     79c:	8a 55       	subi	r24, 0x5A	; 90
     79e:	9f 4f       	sbci	r25, 0xFF	; 255
     7a0:	15 d1       	rcall	.+554    	; 0x9cc <_ZN5uart08printStrEPKc>
	systime::sysTimeInit();
     7a2:	ab d0       	rcall	.+342    	; 0x8fa <_ZN7systime11sysTimeInitEv>
	char data[7]="EEEEEE";	
     7a4:	87 e0       	ldi	r24, 0x07	; 7
     7a6:	ef e1       	ldi	r30, 0x1F	; 31
     7a8:	f2 e0       	ldi	r31, 0x02	; 2
     7aa:	de 01       	movw	r26, r28
     7ac:	a1 56       	subi	r26, 0x61	; 97
     7ae:	bf 4f       	sbci	r27, 0xFF	; 255
     7b0:	01 90       	ld	r0, Z+
     7b2:	0d 92       	st	X+, r0
     7b4:	8a 95       	dec	r24
     7b6:	e1 f7       	brne	.-8      	; 0x7b0 <main+0x5a>
	char buffer [20];
	DDRJ=0xAA;
     7b8:	8a ea       	ldi	r24, 0xAA	; 170
     7ba:	80 93 04 01 	sts	0x0104, r24
		 if(isValid>0)
		 {
			 
		 lcd.cursor(2,10);
		 lcd.print("Ok");
		 sprintf(buffer,"T:%lu",systime::getSysTime());
     7be:	0f 2e       	mov	r0, r31
     7c0:	f4 e1       	ldi	r31, 0x14	; 20
     7c2:	ef 2e       	mov	r14, r31
     7c4:	f2 e0       	ldi	r31, 0x02	; 2
     7c6:	ff 2e       	mov	r15, r31
     7c8:	f0 2d       	mov	r31, r0
     7ca:	8e 01       	movw	r16, r28
     7cc:	05 57       	subi	r16, 0x75	; 117
     7ce:	1f 4f       	sbci	r17, 0xFF	; 255
	char buffer [20];
	DDRJ=0xAA;
    while(1)
    {
		char  isValid;
         if(code.receiveCode()>0)
     7d0:	ce 01       	movw	r24, r28
     7d2:	01 96       	adiw	r24, 0x01	; 1
     7d4:	8a de       	rcall	.-748    	; 0x4ea <_ZN5pulse11receiveCodeEv>
		 {
			
			 isValid=0;
		 }
		 
		  isValid=code.decodeToDitDah();
     7d6:	ce 01       	movw	r24, r28
     7d8:	01 96       	adiw	r24, 0x01	; 1
     7da:	e6 de       	rcall	.-564    	; 0x5a8 <_ZN5pulse14decodeToDitDahEv>
     7dc:	d8 2e       	mov	r13, r24
		 code.getDecodedData(data);
     7de:	be 01       	movw	r22, r28
     7e0:	61 56       	subi	r22, 0x61	; 97
     7e2:	7f 4f       	sbci	r23, 0xFF	; 255
     7e4:	ce 01       	movw	r24, r28
     7e6:	01 96       	adiw	r24, 0x01	; 1
     7e8:	a6 df       	rcall	.-180    	; 0x736 <_ZN5pulse14getDecodedDataEPc>
		 if(isValid>0)
     7ea:	dd 20       	and	r13, r13
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <main+0x9a>
     7ee:	53 c0       	rjmp	.+166    	; 0x896 <main+0x140>
		 {
			 
		 lcd.cursor(2,10);
     7f0:	4a e0       	ldi	r20, 0x0A	; 10
     7f2:	62 e0       	ldi	r22, 0x02	; 2
     7f4:	ce 01       	movw	r24, r28
     7f6:	8d 58       	subi	r24, 0x8D	; 141
     7f8:	9f 4f       	sbci	r25, 0xFF	; 255
     7fa:	66 dd       	rcall	.-1332   	; 0x2c8 <_ZN3LCD6cursorEcc>
		 lcd.print("Ok");
     7fc:	61 e1       	ldi	r22, 0x11	; 17
     7fe:	72 e0       	ldi	r23, 0x02	; 2
     800:	ce 01       	movw	r24, r28
     802:	8d 58       	subi	r24, 0x8D	; 141
     804:	9f 4f       	sbci	r25, 0xFF	; 255
     806:	4c dd       	rcall	.-1384   	; 0x2a0 <_ZN3LCD5printEPc>
		 sprintf(buffer,"T:%lu",systime::getSysTime());
     808:	a7 d0       	rcall	.+334    	; 0x958 <_ZN7systime10getSysTimeEv>
     80a:	9f 93       	push	r25
     80c:	8f 93       	push	r24
     80e:	7f 93       	push	r23
     810:	6f 93       	push	r22
     812:	ff 92       	push	r15
     814:	ef 92       	push	r14
     816:	1f 93       	push	r17
     818:	0f 93       	push	r16
     81a:	2b d2       	rcall	.+1110   	; 0xc72 <sprintf>
		 data[6]=0;
     81c:	cb 55       	subi	r28, 0x5B	; 91
     81e:	df 4f       	sbci	r29, 0xFF	; 255
     820:	18 82       	st	Y, r1
     822:	c5 5a       	subi	r28, 0xA5	; 165
     824:	d0 40       	sbci	r29, 0x00	; 0
		 serial.printStr(data);
     826:	be 01       	movw	r22, r28
     828:	61 56       	subi	r22, 0x61	; 97
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	ce 01       	movw	r24, r28
     82e:	8a 55       	subi	r24, 0x5A	; 90
     830:	9f 4f       	sbci	r25, 0xFF	; 255
     832:	cc d0       	rcall	.+408    	; 0x9cc <_ZN5uart08printStrEPKc>
		 serial.printStr("\t");
     834:	6a e1       	ldi	r22, 0x1A	; 26
     836:	72 e0       	ldi	r23, 0x02	; 2
     838:	ce 01       	movw	r24, r28
     83a:	8a 55       	subi	r24, 0x5A	; 90
     83c:	9f 4f       	sbci	r25, 0xFF	; 255
     83e:	c6 d0       	rcall	.+396    	; 0x9cc <_ZN5uart08printStrEPKc>
		 serial.printStr(buffer);
     840:	b8 01       	movw	r22, r16
     842:	ce 01       	movw	r24, r28
     844:	8a 55       	subi	r24, 0x5A	; 90
     846:	9f 4f       	sbci	r25, 0xFF	; 255
     848:	c1 d0       	rcall	.+386    	; 0x9cc <_ZN5uart08printStrEPKc>
		 serial.write(0x0d);
     84a:	6d e0       	ldi	r22, 0x0D	; 13
     84c:	ce 01       	movw	r24, r28
     84e:	8a 55       	subi	r24, 0x5A	; 90
     850:	9f 4f       	sbci	r25, 0xFF	; 255
     852:	b4 d0       	rcall	.+360    	; 0x9bc <_ZN5uart05writeEh>
		 serial.write(0x0a);
     854:	6a e0       	ldi	r22, 0x0A	; 10
     856:	ce 01       	movw	r24, r28
     858:	8a 55       	subi	r24, 0x5A	; 90
     85a:	9f 4f       	sbci	r25, 0xFF	; 255
     85c:	af d0       	rcall	.+350    	; 0x9bc <_ZN5uart05writeEh>
		 lcd.home();
     85e:	ce 01       	movw	r24, r28
     860:	8d 58       	subi	r24, 0x8D	; 141
     862:	9f 4f       	sbci	r25, 0xFF	; 255
     864:	1a dd       	rcall	.-1484   	; 0x29a <_ZN3LCD4homeEv>
		 lcd.print(data);
     866:	be 01       	movw	r22, r28
     868:	61 56       	subi	r22, 0x61	; 97
     86a:	7f 4f       	sbci	r23, 0xFF	; 255
     86c:	ce 01       	movw	r24, r28
     86e:	8d 58       	subi	r24, 0x8D	; 141
     870:	9f 4f       	sbci	r25, 0xFF	; 255
     872:	16 dd       	rcall	.-1492   	; 0x2a0 <_ZN3LCD5printEPc>
		 lcd.cursor(2,1);
     874:	41 e0       	ldi	r20, 0x01	; 1
     876:	62 e0       	ldi	r22, 0x02	; 2
     878:	ce 01       	movw	r24, r28
     87a:	8d 58       	subi	r24, 0x8D	; 141
     87c:	9f 4f       	sbci	r25, 0xFF	; 255
     87e:	24 dd       	rcall	.-1464   	; 0x2c8 <_ZN3LCD6cursorEcc>
		 lcd.print(buffer);
     880:	b8 01       	movw	r22, r16
     882:	ce 01       	movw	r24, r28
     884:	8d 58       	subi	r24, 0x8D	; 141
     886:	9f 4f       	sbci	r25, 0xFF	; 255
     888:	0b dd       	rcall	.-1514   	; 0x2a0 <_ZN3LCD5printEPc>
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	f8 94       	cli
     88e:	de bf       	out	0x3e, r29	; 62
     890:	0f be       	out	0x3f, r0	; 63
     892:	cd bf       	out	0x3d, r28	; 61
     894:	9d cf       	rjmp	.-198    	; 0x7d0 <main+0x7a>
		 }else{
			  lcd.cursor(2,10);
     896:	4a e0       	ldi	r20, 0x0A	; 10
     898:	62 e0       	ldi	r22, 0x02	; 2
     89a:	ce 01       	movw	r24, r28
     89c:	8d 58       	subi	r24, 0x8D	; 141
     89e:	9f 4f       	sbci	r25, 0xFF	; 255
     8a0:	13 dd       	rcall	.-1498   	; 0x2c8 <_ZN3LCD6cursorEcc>
			  lcd.print("Er");
     8a2:	6c e1       	ldi	r22, 0x1C	; 28
     8a4:	72 e0       	ldi	r23, 0x02	; 2
     8a6:	ce 01       	movw	r24, r28
     8a8:	8d 58       	subi	r24, 0x8D	; 141
     8aa:	9f 4f       	sbci	r25, 0xFF	; 255
     8ac:	f9 dc       	rcall	.-1550   	; 0x2a0 <_ZN3LCD5printEPc>
     8ae:	90 cf       	rjmp	.-224    	; 0x7d0 <main+0x7a>

000008b0 <__vector_35>:
//OUTPUT	: number of timer3 overflows

unsigned long getOverflows()		
{
	return overflows;	
}
     8b0:	1f 92       	push	r1
     8b2:	0f 92       	push	r0
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	0f 92       	push	r0
     8b8:	11 24       	eor	r1, r1
     8ba:	8f 93       	push	r24
     8bc:	9f 93       	push	r25
     8be:	af 93       	push	r26
     8c0:	bf 93       	push	r27
     8c2:	80 91 26 02 	lds	r24, 0x0226
     8c6:	90 91 27 02 	lds	r25, 0x0227
     8ca:	a0 91 28 02 	lds	r26, 0x0228
     8ce:	b0 91 29 02 	lds	r27, 0x0229
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	a1 1d       	adc	r26, r1
     8d6:	b1 1d       	adc	r27, r1
     8d8:	80 93 26 02 	sts	0x0226, r24
     8dc:	90 93 27 02 	sts	0x0227, r25
     8e0:	a0 93 28 02 	sts	0x0228, r26
     8e4:	b0 93 29 02 	sts	0x0229, r27
     8e8:	bf 91       	pop	r27
     8ea:	af 91       	pop	r26
     8ec:	9f 91       	pop	r25
     8ee:	8f 91       	pop	r24
     8f0:	0f 90       	pop	r0
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	0f 90       	pop	r0
     8f6:	1f 90       	pop	r1
     8f8:	18 95       	reti

000008fa <_ZN7systime11sysTimeInitEv>:
//OUTPUT	: NONE
//	Initialises the Timer3 with prescaler of 1024 sync to system clock
void sysTimeInit()
{
	
	cli();							//disable interrupts
     8fa:	f8 94       	cli
	TCCR3A=0;
     8fc:	10 92 90 00 	sts	0x0090, r1
	TCCR3B=(1<<CS32)|(1<<CS30);		//use prescaler of 1024
     900:	85 e0       	ldi	r24, 0x05	; 5
     902:	80 93 91 00 	sts	0x0091, r24
									//counting clock is now F_OSC/1024
									//corresponding to 69.44 uS on 14.7456 MHz
	TCCR3C=0;
     906:	10 92 92 00 	sts	0x0092, r1
	TIMSK3=1<<TOIE3;				// Enable timer overflow interrupt
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	80 93 71 00 	sts	0x0071, r24
	overflows=0;
     910:	10 92 26 02 	sts	0x0226, r1
     914:	10 92 27 02 	sts	0x0227, r1
     918:	10 92 28 02 	sts	0x0228, r1
     91c:	10 92 29 02 	sts	0x0229, r1
	TCNT3=0;						//clear timer3 counter value
     920:	10 92 95 00 	sts	0x0095, r1
     924:	10 92 94 00 	sts	0x0094, r1
	sei();							//Enable interrupts	
     928:	78 94       	sei
     92a:	08 95       	ret

0000092c <_ZN7systime13getSysTimeRawEv>:
//FUNCTION  : getSysTimeRaw()
//INPUT		: NONE
//OUTPUT	: returns time ticks (raw counter values with overflows) after initialisation of sysTime
unsigned long  getSysTimeRaw()			//returns the raw countervalue
{
	unsigned long temptime=TCNT3;					//get counter value at this state
     92c:	20 91 94 00 	lds	r18, 0x0094
     930:	30 91 95 00 	lds	r19, 0x0095
	return overflows*65536+temptime;				
     934:	80 91 26 02 	lds	r24, 0x0226
     938:	90 91 27 02 	lds	r25, 0x0227
     93c:	a0 91 28 02 	lds	r26, 0x0228
     940:	b0 91 29 02 	lds	r27, 0x0229
     944:	dc 01       	movw	r26, r24
     946:	99 27       	eor	r25, r25
     948:	88 27       	eor	r24, r24
     94a:	bc 01       	movw	r22, r24
     94c:	cd 01       	movw	r24, r26
     94e:	62 0f       	add	r22, r18
     950:	73 1f       	adc	r23, r19
     952:	81 1d       	adc	r24, r1
     954:	91 1d       	adc	r25, r1
}
     956:	08 95       	ret

00000958 <_ZN7systime10getSysTimeEv>:
//FUNCTION  : getSysTime()
//INPUT		: NONE
//OUTPUT	: returns time in milli Seconds after initialisatin of sysTime
unsigned long getSysTime()		
{
	return (unsigned long)(getSysTimeRaw()*0.06944);
     958:	e9 df       	rcall	.-46     	; 0x92c <_ZN7systime13getSysTimeRawEv>
     95a:	78 d0       	rcall	.+240    	; 0xa4c <__floatunsisf>
     95c:	2f e8       	ldi	r18, 0x8F	; 143
     95e:	36 e3       	ldi	r19, 0x36	; 54
     960:	4e e8       	ldi	r20, 0x8E	; 142
     962:	5d e3       	ldi	r21, 0x3D	; 61
     964:	d9 d0       	rcall	.+434    	; 0xb18 <__mulsf3>
     966:	46 c0       	rjmp	.+140    	; 0x9f4 <__fixunssfsi>
}
     968:	08 95       	ret

0000096a <_ZN5uart0C1Em>:

unsigned char uart0::read(void)
{
	while(!(UCSR0A & (1<<RXC0)));		//wait for data to be received
	return UDR0;
}
     96a:	cf 92       	push	r12
     96c:	df 92       	push	r13
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	ec 01       	movw	r28, r24
     978:	6a 01       	movw	r12, r20
     97a:	7b 01       	movw	r14, r22
     97c:	69 9a       	sbi	0x0d, 1	; 13
     97e:	68 98       	cbi	0x0d, 0	; 13
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	70 e1       	ldi	r23, 0x10	; 16
     984:	8e e0       	ldi	r24, 0x0E	; 14
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	a7 01       	movw	r20, r14
     98a:	96 01       	movw	r18, r12
     98c:	50 d1       	rcall	.+672    	; 0xc2e <__udivmodsi4>
     98e:	21 50       	subi	r18, 0x01	; 1
     990:	31 09       	sbc	r19, r1
     992:	30 93 c5 00 	sts	0x00C5, r19
     996:	20 93 c4 00 	sts	0x00C4, r18
     99a:	88 e1       	ldi	r24, 0x18	; 24
     99c:	80 93 c1 00 	sts	0x00C1, r24
     9a0:	86 e0       	ldi	r24, 0x06	; 6
     9a2:	80 93 c2 00 	sts	0x00C2, r24
     9a6:	c8 82       	st	Y, r12
     9a8:	d9 82       	std	Y+1, r13	; 0x01
     9aa:	ea 82       	std	Y+2, r14	; 0x02
     9ac:	fb 82       	std	Y+3, r15	; 0x03
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	ff 90       	pop	r15
     9b4:	ef 90       	pop	r14
     9b6:	df 90       	pop	r13
     9b8:	cf 90       	pop	r12
     9ba:	08 95       	ret

000009bc <_ZN5uart05writeEh>:
     9bc:	e0 ec       	ldi	r30, 0xC0	; 192
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	80 81       	ld	r24, Z
     9c2:	85 ff       	sbrs	r24, 5
     9c4:	fd cf       	rjmp	.-6      	; 0x9c0 <_ZN5uart05writeEh+0x4>
     9c6:	60 93 c6 00 	sts	0x00C6, r22
     9ca:	08 95       	ret

000009cc <_ZN5uart08printStrEPKc>:

void uart0::printStr(const char * str)
{
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	8c 01       	movw	r16, r24
     9d6:	eb 01       	movw	r28, r22
	while(*str)
     9d8:	68 81       	ld	r22, Y
     9da:	66 23       	and	r22, r22
     9dc:	31 f0       	breq	.+12     	; 0x9ea <_ZN5uart08printStrEPKc+0x1e>
     9de:	21 96       	adiw	r28, 0x01	; 1
	{
		write(*str++);
     9e0:	c8 01       	movw	r24, r16
     9e2:	ec df       	rcall	.-40     	; 0x9bc <_ZN5uart05writeEh>
	return UDR0;
}

void uart0::printStr(const char * str)
{
	while(*str)
     9e4:	69 91       	ld	r22, Y+
     9e6:	61 11       	cpse	r22, r1
     9e8:	fb cf       	rjmp	.-10     	; 0x9e0 <_ZN5uart08printStrEPKc+0x14>
	{
		write(*str++);
	}
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	08 95       	ret

000009f4 <__fixunssfsi>:
     9f4:	70 d0       	rcall	.+224    	; 0xad6 <__fp_splitA>
     9f6:	88 f0       	brcs	.+34     	; 0xa1a <__fixunssfsi+0x26>
     9f8:	9f 57       	subi	r25, 0x7F	; 127
     9fa:	90 f0       	brcs	.+36     	; 0xa20 <__fixunssfsi+0x2c>
     9fc:	b9 2f       	mov	r27, r25
     9fe:	99 27       	eor	r25, r25
     a00:	b7 51       	subi	r27, 0x17	; 23
     a02:	a0 f0       	brcs	.+40     	; 0xa2c <__fixunssfsi+0x38>
     a04:	d1 f0       	breq	.+52     	; 0xa3a <__fixunssfsi+0x46>
     a06:	66 0f       	add	r22, r22
     a08:	77 1f       	adc	r23, r23
     a0a:	88 1f       	adc	r24, r24
     a0c:	99 1f       	adc	r25, r25
     a0e:	1a f0       	brmi	.+6      	; 0xa16 <__fixunssfsi+0x22>
     a10:	ba 95       	dec	r27
     a12:	c9 f7       	brne	.-14     	; 0xa06 <__fixunssfsi+0x12>
     a14:	12 c0       	rjmp	.+36     	; 0xa3a <__fixunssfsi+0x46>
     a16:	b1 30       	cpi	r27, 0x01	; 1
     a18:	81 f0       	breq	.+32     	; 0xa3a <__fixunssfsi+0x46>
     a1a:	77 d0       	rcall	.+238    	; 0xb0a <__fp_zero>
     a1c:	b1 e0       	ldi	r27, 0x01	; 1
     a1e:	08 95       	ret
     a20:	74 c0       	rjmp	.+232    	; 0xb0a <__fp_zero>
     a22:	67 2f       	mov	r22, r23
     a24:	78 2f       	mov	r23, r24
     a26:	88 27       	eor	r24, r24
     a28:	b8 5f       	subi	r27, 0xF8	; 248
     a2a:	39 f0       	breq	.+14     	; 0xa3a <__fixunssfsi+0x46>
     a2c:	b9 3f       	cpi	r27, 0xF9	; 249
     a2e:	cc f3       	brlt	.-14     	; 0xa22 <__fixunssfsi+0x2e>
     a30:	86 95       	lsr	r24
     a32:	77 95       	ror	r23
     a34:	67 95       	ror	r22
     a36:	b3 95       	inc	r27
     a38:	d9 f7       	brne	.-10     	; 0xa30 <__fixunssfsi+0x3c>
     a3a:	3e f4       	brtc	.+14     	; 0xa4a <__fixunssfsi+0x56>
     a3c:	90 95       	com	r25
     a3e:	80 95       	com	r24
     a40:	70 95       	com	r23
     a42:	61 95       	neg	r22
     a44:	7f 4f       	sbci	r23, 0xFF	; 255
     a46:	8f 4f       	sbci	r24, 0xFF	; 255
     a48:	9f 4f       	sbci	r25, 0xFF	; 255
     a4a:	08 95       	ret

00000a4c <__floatunsisf>:
     a4c:	e8 94       	clt
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__floatsisf+0x12>

00000a50 <__floatsisf>:
     a50:	97 fb       	bst	r25, 7
     a52:	3e f4       	brtc	.+14     	; 0xa62 <__floatsisf+0x12>
     a54:	90 95       	com	r25
     a56:	80 95       	com	r24
     a58:	70 95       	com	r23
     a5a:	61 95       	neg	r22
     a5c:	7f 4f       	sbci	r23, 0xFF	; 255
     a5e:	8f 4f       	sbci	r24, 0xFF	; 255
     a60:	9f 4f       	sbci	r25, 0xFF	; 255
     a62:	99 23       	and	r25, r25
     a64:	a9 f0       	breq	.+42     	; 0xa90 <__floatsisf+0x40>
     a66:	f9 2f       	mov	r31, r25
     a68:	96 e9       	ldi	r25, 0x96	; 150
     a6a:	bb 27       	eor	r27, r27
     a6c:	93 95       	inc	r25
     a6e:	f6 95       	lsr	r31
     a70:	87 95       	ror	r24
     a72:	77 95       	ror	r23
     a74:	67 95       	ror	r22
     a76:	b7 95       	ror	r27
     a78:	f1 11       	cpse	r31, r1
     a7a:	f8 cf       	rjmp	.-16     	; 0xa6c <__floatsisf+0x1c>
     a7c:	fa f4       	brpl	.+62     	; 0xabc <__floatsisf+0x6c>
     a7e:	bb 0f       	add	r27, r27
     a80:	11 f4       	brne	.+4      	; 0xa86 <__floatsisf+0x36>
     a82:	60 ff       	sbrs	r22, 0
     a84:	1b c0       	rjmp	.+54     	; 0xabc <__floatsisf+0x6c>
     a86:	6f 5f       	subi	r22, 0xFF	; 255
     a88:	7f 4f       	sbci	r23, 0xFF	; 255
     a8a:	8f 4f       	sbci	r24, 0xFF	; 255
     a8c:	9f 4f       	sbci	r25, 0xFF	; 255
     a8e:	16 c0       	rjmp	.+44     	; 0xabc <__floatsisf+0x6c>
     a90:	88 23       	and	r24, r24
     a92:	11 f0       	breq	.+4      	; 0xa98 <__floatsisf+0x48>
     a94:	96 e9       	ldi	r25, 0x96	; 150
     a96:	11 c0       	rjmp	.+34     	; 0xaba <__floatsisf+0x6a>
     a98:	77 23       	and	r23, r23
     a9a:	21 f0       	breq	.+8      	; 0xaa4 <__floatsisf+0x54>
     a9c:	9e e8       	ldi	r25, 0x8E	; 142
     a9e:	87 2f       	mov	r24, r23
     aa0:	76 2f       	mov	r23, r22
     aa2:	05 c0       	rjmp	.+10     	; 0xaae <__floatsisf+0x5e>
     aa4:	66 23       	and	r22, r22
     aa6:	71 f0       	breq	.+28     	; 0xac4 <__floatsisf+0x74>
     aa8:	96 e8       	ldi	r25, 0x86	; 134
     aaa:	86 2f       	mov	r24, r22
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	2a f0       	brmi	.+10     	; 0xabc <__floatsisf+0x6c>
     ab2:	9a 95       	dec	r25
     ab4:	66 0f       	add	r22, r22
     ab6:	77 1f       	adc	r23, r23
     ab8:	88 1f       	adc	r24, r24
     aba:	da f7       	brpl	.-10     	; 0xab2 <__floatsisf+0x62>
     abc:	88 0f       	add	r24, r24
     abe:	96 95       	lsr	r25
     ac0:	87 95       	ror	r24
     ac2:	97 f9       	bld	r25, 7
     ac4:	08 95       	ret

00000ac6 <__fp_split3>:
     ac6:	57 fd       	sbrc	r21, 7
     ac8:	90 58       	subi	r25, 0x80	; 128
     aca:	44 0f       	add	r20, r20
     acc:	55 1f       	adc	r21, r21
     ace:	59 f0       	breq	.+22     	; 0xae6 <__fp_splitA+0x10>
     ad0:	5f 3f       	cpi	r21, 0xFF	; 255
     ad2:	71 f0       	breq	.+28     	; 0xaf0 <__fp_splitA+0x1a>
     ad4:	47 95       	ror	r20

00000ad6 <__fp_splitA>:
     ad6:	88 0f       	add	r24, r24
     ad8:	97 fb       	bst	r25, 7
     ada:	99 1f       	adc	r25, r25
     adc:	61 f0       	breq	.+24     	; 0xaf6 <__fp_splitA+0x20>
     ade:	9f 3f       	cpi	r25, 0xFF	; 255
     ae0:	79 f0       	breq	.+30     	; 0xb00 <__fp_splitA+0x2a>
     ae2:	87 95       	ror	r24
     ae4:	08 95       	ret
     ae6:	12 16       	cp	r1, r18
     ae8:	13 06       	cpc	r1, r19
     aea:	14 06       	cpc	r1, r20
     aec:	55 1f       	adc	r21, r21
     aee:	f2 cf       	rjmp	.-28     	; 0xad4 <__fp_split3+0xe>
     af0:	46 95       	lsr	r20
     af2:	f1 df       	rcall	.-30     	; 0xad6 <__fp_splitA>
     af4:	08 c0       	rjmp	.+16     	; 0xb06 <__fp_splitA+0x30>
     af6:	16 16       	cp	r1, r22
     af8:	17 06       	cpc	r1, r23
     afa:	18 06       	cpc	r1, r24
     afc:	99 1f       	adc	r25, r25
     afe:	f1 cf       	rjmp	.-30     	; 0xae2 <__fp_splitA+0xc>
     b00:	86 95       	lsr	r24
     b02:	71 05       	cpc	r23, r1
     b04:	61 05       	cpc	r22, r1
     b06:	08 94       	sec
     b08:	08 95       	ret

00000b0a <__fp_zero>:
     b0a:	e8 94       	clt

00000b0c <__fp_szero>:
     b0c:	bb 27       	eor	r27, r27
     b0e:	66 27       	eor	r22, r22
     b10:	77 27       	eor	r23, r23
     b12:	cb 01       	movw	r24, r22
     b14:	97 f9       	bld	r25, 7
     b16:	08 95       	ret

00000b18 <__mulsf3>:
     b18:	0b d0       	rcall	.+22     	; 0xb30 <__mulsf3x>
     b1a:	78 c0       	rjmp	.+240    	; 0xc0c <__fp_round>
     b1c:	69 d0       	rcall	.+210    	; 0xbf0 <__fp_pscA>
     b1e:	28 f0       	brcs	.+10     	; 0xb2a <__mulsf3+0x12>
     b20:	6e d0       	rcall	.+220    	; 0xbfe <__fp_pscB>
     b22:	18 f0       	brcs	.+6      	; 0xb2a <__mulsf3+0x12>
     b24:	95 23       	and	r25, r21
     b26:	09 f0       	breq	.+2      	; 0xb2a <__mulsf3+0x12>
     b28:	5a c0       	rjmp	.+180    	; 0xbde <__fp_inf>
     b2a:	5f c0       	rjmp	.+190    	; 0xbea <__fp_nan>
     b2c:	11 24       	eor	r1, r1
     b2e:	ee cf       	rjmp	.-36     	; 0xb0c <__fp_szero>

00000b30 <__mulsf3x>:
     b30:	ca df       	rcall	.-108    	; 0xac6 <__fp_split3>
     b32:	a0 f3       	brcs	.-24     	; 0xb1c <__mulsf3+0x4>

00000b34 <__mulsf3_pse>:
     b34:	95 9f       	mul	r25, r21
     b36:	d1 f3       	breq	.-12     	; 0xb2c <__mulsf3+0x14>
     b38:	95 0f       	add	r25, r21
     b3a:	50 e0       	ldi	r21, 0x00	; 0
     b3c:	55 1f       	adc	r21, r21
     b3e:	62 9f       	mul	r22, r18
     b40:	f0 01       	movw	r30, r0
     b42:	72 9f       	mul	r23, r18
     b44:	bb 27       	eor	r27, r27
     b46:	f0 0d       	add	r31, r0
     b48:	b1 1d       	adc	r27, r1
     b4a:	63 9f       	mul	r22, r19
     b4c:	aa 27       	eor	r26, r26
     b4e:	f0 0d       	add	r31, r0
     b50:	b1 1d       	adc	r27, r1
     b52:	aa 1f       	adc	r26, r26
     b54:	64 9f       	mul	r22, r20
     b56:	66 27       	eor	r22, r22
     b58:	b0 0d       	add	r27, r0
     b5a:	a1 1d       	adc	r26, r1
     b5c:	66 1f       	adc	r22, r22
     b5e:	82 9f       	mul	r24, r18
     b60:	22 27       	eor	r18, r18
     b62:	b0 0d       	add	r27, r0
     b64:	a1 1d       	adc	r26, r1
     b66:	62 1f       	adc	r22, r18
     b68:	73 9f       	mul	r23, r19
     b6a:	b0 0d       	add	r27, r0
     b6c:	a1 1d       	adc	r26, r1
     b6e:	62 1f       	adc	r22, r18
     b70:	83 9f       	mul	r24, r19
     b72:	a0 0d       	add	r26, r0
     b74:	61 1d       	adc	r22, r1
     b76:	22 1f       	adc	r18, r18
     b78:	74 9f       	mul	r23, r20
     b7a:	33 27       	eor	r19, r19
     b7c:	a0 0d       	add	r26, r0
     b7e:	61 1d       	adc	r22, r1
     b80:	23 1f       	adc	r18, r19
     b82:	84 9f       	mul	r24, r20
     b84:	60 0d       	add	r22, r0
     b86:	21 1d       	adc	r18, r1
     b88:	82 2f       	mov	r24, r18
     b8a:	76 2f       	mov	r23, r22
     b8c:	6a 2f       	mov	r22, r26
     b8e:	11 24       	eor	r1, r1
     b90:	9f 57       	subi	r25, 0x7F	; 127
     b92:	50 40       	sbci	r21, 0x00	; 0
     b94:	8a f0       	brmi	.+34     	; 0xbb8 <__mulsf3_pse+0x84>
     b96:	e1 f0       	breq	.+56     	; 0xbd0 <__mulsf3_pse+0x9c>
     b98:	88 23       	and	r24, r24
     b9a:	4a f0       	brmi	.+18     	; 0xbae <__mulsf3_pse+0x7a>
     b9c:	ee 0f       	add	r30, r30
     b9e:	ff 1f       	adc	r31, r31
     ba0:	bb 1f       	adc	r27, r27
     ba2:	66 1f       	adc	r22, r22
     ba4:	77 1f       	adc	r23, r23
     ba6:	88 1f       	adc	r24, r24
     ba8:	91 50       	subi	r25, 0x01	; 1
     baa:	50 40       	sbci	r21, 0x00	; 0
     bac:	a9 f7       	brne	.-22     	; 0xb98 <__mulsf3_pse+0x64>
     bae:	9e 3f       	cpi	r25, 0xFE	; 254
     bb0:	51 05       	cpc	r21, r1
     bb2:	70 f0       	brcs	.+28     	; 0xbd0 <__mulsf3_pse+0x9c>
     bb4:	14 c0       	rjmp	.+40     	; 0xbde <__fp_inf>
     bb6:	aa cf       	rjmp	.-172    	; 0xb0c <__fp_szero>
     bb8:	5f 3f       	cpi	r21, 0xFF	; 255
     bba:	ec f3       	brlt	.-6      	; 0xbb6 <__mulsf3_pse+0x82>
     bbc:	98 3e       	cpi	r25, 0xE8	; 232
     bbe:	dc f3       	brlt	.-10     	; 0xbb6 <__mulsf3_pse+0x82>
     bc0:	86 95       	lsr	r24
     bc2:	77 95       	ror	r23
     bc4:	67 95       	ror	r22
     bc6:	b7 95       	ror	r27
     bc8:	f7 95       	ror	r31
     bca:	e7 95       	ror	r30
     bcc:	9f 5f       	subi	r25, 0xFF	; 255
     bce:	c1 f7       	brne	.-16     	; 0xbc0 <__mulsf3_pse+0x8c>
     bd0:	fe 2b       	or	r31, r30
     bd2:	88 0f       	add	r24, r24
     bd4:	91 1d       	adc	r25, r1
     bd6:	96 95       	lsr	r25
     bd8:	87 95       	ror	r24
     bda:	97 f9       	bld	r25, 7
     bdc:	08 95       	ret

00000bde <__fp_inf>:
     bde:	97 f9       	bld	r25, 7
     be0:	9f 67       	ori	r25, 0x7F	; 127
     be2:	80 e8       	ldi	r24, 0x80	; 128
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	60 e0       	ldi	r22, 0x00	; 0
     be8:	08 95       	ret

00000bea <__fp_nan>:
     bea:	9f ef       	ldi	r25, 0xFF	; 255
     bec:	80 ec       	ldi	r24, 0xC0	; 192
     bee:	08 95       	ret

00000bf0 <__fp_pscA>:
     bf0:	00 24       	eor	r0, r0
     bf2:	0a 94       	dec	r0
     bf4:	16 16       	cp	r1, r22
     bf6:	17 06       	cpc	r1, r23
     bf8:	18 06       	cpc	r1, r24
     bfa:	09 06       	cpc	r0, r25
     bfc:	08 95       	ret

00000bfe <__fp_pscB>:
     bfe:	00 24       	eor	r0, r0
     c00:	0a 94       	dec	r0
     c02:	12 16       	cp	r1, r18
     c04:	13 06       	cpc	r1, r19
     c06:	14 06       	cpc	r1, r20
     c08:	05 06       	cpc	r0, r21
     c0a:	08 95       	ret

00000c0c <__fp_round>:
     c0c:	09 2e       	mov	r0, r25
     c0e:	03 94       	inc	r0
     c10:	00 0c       	add	r0, r0
     c12:	11 f4       	brne	.+4      	; 0xc18 <__fp_round+0xc>
     c14:	88 23       	and	r24, r24
     c16:	52 f0       	brmi	.+20     	; 0xc2c <__fp_round+0x20>
     c18:	bb 0f       	add	r27, r27
     c1a:	40 f4       	brcc	.+16     	; 0xc2c <__fp_round+0x20>
     c1c:	bf 2b       	or	r27, r31
     c1e:	11 f4       	brne	.+4      	; 0xc24 <__fp_round+0x18>
     c20:	60 ff       	sbrs	r22, 0
     c22:	04 c0       	rjmp	.+8      	; 0xc2c <__fp_round+0x20>
     c24:	6f 5f       	subi	r22, 0xFF	; 255
     c26:	7f 4f       	sbci	r23, 0xFF	; 255
     c28:	8f 4f       	sbci	r24, 0xFF	; 255
     c2a:	9f 4f       	sbci	r25, 0xFF	; 255
     c2c:	08 95       	ret

00000c2e <__udivmodsi4>:
     c2e:	a1 e2       	ldi	r26, 0x21	; 33
     c30:	1a 2e       	mov	r1, r26
     c32:	aa 1b       	sub	r26, r26
     c34:	bb 1b       	sub	r27, r27
     c36:	fd 01       	movw	r30, r26
     c38:	0d c0       	rjmp	.+26     	; 0xc54 <__udivmodsi4_ep>

00000c3a <__udivmodsi4_loop>:
     c3a:	aa 1f       	adc	r26, r26
     c3c:	bb 1f       	adc	r27, r27
     c3e:	ee 1f       	adc	r30, r30
     c40:	ff 1f       	adc	r31, r31
     c42:	a2 17       	cp	r26, r18
     c44:	b3 07       	cpc	r27, r19
     c46:	e4 07       	cpc	r30, r20
     c48:	f5 07       	cpc	r31, r21
     c4a:	20 f0       	brcs	.+8      	; 0xc54 <__udivmodsi4_ep>
     c4c:	a2 1b       	sub	r26, r18
     c4e:	b3 0b       	sbc	r27, r19
     c50:	e4 0b       	sbc	r30, r20
     c52:	f5 0b       	sbc	r31, r21

00000c54 <__udivmodsi4_ep>:
     c54:	66 1f       	adc	r22, r22
     c56:	77 1f       	adc	r23, r23
     c58:	88 1f       	adc	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	1a 94       	dec	r1
     c5e:	69 f7       	brne	.-38     	; 0xc3a <__udivmodsi4_loop>
     c60:	60 95       	com	r22
     c62:	70 95       	com	r23
     c64:	80 95       	com	r24
     c66:	90 95       	com	r25
     c68:	9b 01       	movw	r18, r22
     c6a:	ac 01       	movw	r20, r24
     c6c:	bd 01       	movw	r22, r26
     c6e:	cf 01       	movw	r24, r30
     c70:	08 95       	ret

00000c72 <sprintf>:
     c72:	0f 93       	push	r16
     c74:	1f 93       	push	r17
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
     c7e:	2e 97       	sbiw	r28, 0x0e	; 14
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	f8 94       	cli
     c84:	de bf       	out	0x3e, r29	; 62
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	cd bf       	out	0x3d, r28	; 61
     c8a:	0e 89       	ldd	r16, Y+22	; 0x16
     c8c:	1f 89       	ldd	r17, Y+23	; 0x17
     c8e:	86 e0       	ldi	r24, 0x06	; 6
     c90:	8c 83       	std	Y+4, r24	; 0x04
     c92:	1a 83       	std	Y+2, r17	; 0x02
     c94:	09 83       	std	Y+1, r16	; 0x01
     c96:	8f ef       	ldi	r24, 0xFF	; 255
     c98:	9f e7       	ldi	r25, 0x7F	; 127
     c9a:	9e 83       	std	Y+6, r25	; 0x06
     c9c:	8d 83       	std	Y+5, r24	; 0x05
     c9e:	ae 01       	movw	r20, r28
     ca0:	46 5e       	subi	r20, 0xE6	; 230
     ca2:	5f 4f       	sbci	r21, 0xFF	; 255
     ca4:	68 8d       	ldd	r22, Y+24	; 0x18
     ca6:	79 8d       	ldd	r23, Y+25	; 0x19
     ca8:	ce 01       	movw	r24, r28
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	10 d0       	rcall	.+32     	; 0xcce <vfprintf>
     cae:	ef 81       	ldd	r30, Y+7	; 0x07
     cb0:	f8 85       	ldd	r31, Y+8	; 0x08
     cb2:	e0 0f       	add	r30, r16
     cb4:	f1 1f       	adc	r31, r17
     cb6:	10 82       	st	Z, r1
     cb8:	2e 96       	adiw	r28, 0x0e	; 14
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	f8 94       	cli
     cbe:	de bf       	out	0x3e, r29	; 62
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	1f 91       	pop	r17
     cca:	0f 91       	pop	r16
     ccc:	08 95       	ret

00000cce <vfprintf>:
     cce:	2f 92       	push	r2
     cd0:	3f 92       	push	r3
     cd2:	4f 92       	push	r4
     cd4:	5f 92       	push	r5
     cd6:	6f 92       	push	r6
     cd8:	7f 92       	push	r7
     cda:	8f 92       	push	r8
     cdc:	9f 92       	push	r9
     cde:	af 92       	push	r10
     ce0:	bf 92       	push	r11
     ce2:	cf 92       	push	r12
     ce4:	df 92       	push	r13
     ce6:	ef 92       	push	r14
     ce8:	ff 92       	push	r15
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	2c 97       	sbiw	r28, 0x0c	; 12
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	7c 01       	movw	r14, r24
     d04:	6b 01       	movw	r12, r22
     d06:	8a 01       	movw	r16, r20
     d08:	fc 01       	movw	r30, r24
     d0a:	17 82       	std	Z+7, r1	; 0x07
     d0c:	16 82       	std	Z+6, r1	; 0x06
     d0e:	83 81       	ldd	r24, Z+3	; 0x03
     d10:	81 ff       	sbrs	r24, 1
     d12:	b0 c1       	rjmp	.+864    	; 0x1074 <vfprintf+0x3a6>
     d14:	ce 01       	movw	r24, r28
     d16:	01 96       	adiw	r24, 0x01	; 1
     d18:	4c 01       	movw	r8, r24
     d1a:	f7 01       	movw	r30, r14
     d1c:	93 81       	ldd	r25, Z+3	; 0x03
     d1e:	f6 01       	movw	r30, r12
     d20:	93 fd       	sbrc	r25, 3
     d22:	85 91       	lpm	r24, Z+
     d24:	93 ff       	sbrs	r25, 3
     d26:	81 91       	ld	r24, Z+
     d28:	6f 01       	movw	r12, r30
     d2a:	88 23       	and	r24, r24
     d2c:	09 f4       	brne	.+2      	; 0xd30 <vfprintf+0x62>
     d2e:	9e c1       	rjmp	.+828    	; 0x106c <vfprintf+0x39e>
     d30:	85 32       	cpi	r24, 0x25	; 37
     d32:	39 f4       	brne	.+14     	; 0xd42 <vfprintf+0x74>
     d34:	93 fd       	sbrc	r25, 3
     d36:	85 91       	lpm	r24, Z+
     d38:	93 ff       	sbrs	r25, 3
     d3a:	81 91       	ld	r24, Z+
     d3c:	6f 01       	movw	r12, r30
     d3e:	85 32       	cpi	r24, 0x25	; 37
     d40:	21 f4       	brne	.+8      	; 0xd4a <vfprintf+0x7c>
     d42:	b7 01       	movw	r22, r14
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	c7 d1       	rcall	.+910    	; 0x10d6 <fputc>
     d48:	e8 cf       	rjmp	.-48     	; 0xd1a <vfprintf+0x4c>
     d4a:	51 2c       	mov	r5, r1
     d4c:	31 2c       	mov	r3, r1
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	20 32       	cpi	r18, 0x20	; 32
     d52:	a0 f4       	brcc	.+40     	; 0xd7c <vfprintf+0xae>
     d54:	8b 32       	cpi	r24, 0x2B	; 43
     d56:	69 f0       	breq	.+26     	; 0xd72 <vfprintf+0xa4>
     d58:	30 f4       	brcc	.+12     	; 0xd66 <vfprintf+0x98>
     d5a:	80 32       	cpi	r24, 0x20	; 32
     d5c:	59 f0       	breq	.+22     	; 0xd74 <vfprintf+0xa6>
     d5e:	83 32       	cpi	r24, 0x23	; 35
     d60:	69 f4       	brne	.+26     	; 0xd7c <vfprintf+0xae>
     d62:	20 61       	ori	r18, 0x10	; 16
     d64:	2c c0       	rjmp	.+88     	; 0xdbe <vfprintf+0xf0>
     d66:	8d 32       	cpi	r24, 0x2D	; 45
     d68:	39 f0       	breq	.+14     	; 0xd78 <vfprintf+0xaa>
     d6a:	80 33       	cpi	r24, 0x30	; 48
     d6c:	39 f4       	brne	.+14     	; 0xd7c <vfprintf+0xae>
     d6e:	21 60       	ori	r18, 0x01	; 1
     d70:	26 c0       	rjmp	.+76     	; 0xdbe <vfprintf+0xf0>
     d72:	22 60       	ori	r18, 0x02	; 2
     d74:	24 60       	ori	r18, 0x04	; 4
     d76:	23 c0       	rjmp	.+70     	; 0xdbe <vfprintf+0xf0>
     d78:	28 60       	ori	r18, 0x08	; 8
     d7a:	21 c0       	rjmp	.+66     	; 0xdbe <vfprintf+0xf0>
     d7c:	27 fd       	sbrc	r18, 7
     d7e:	27 c0       	rjmp	.+78     	; 0xdce <vfprintf+0x100>
     d80:	30 ed       	ldi	r19, 0xD0	; 208
     d82:	38 0f       	add	r19, r24
     d84:	3a 30       	cpi	r19, 0x0A	; 10
     d86:	78 f4       	brcc	.+30     	; 0xda6 <vfprintf+0xd8>
     d88:	26 ff       	sbrs	r18, 6
     d8a:	06 c0       	rjmp	.+12     	; 0xd98 <vfprintf+0xca>
     d8c:	fa e0       	ldi	r31, 0x0A	; 10
     d8e:	5f 9e       	mul	r5, r31
     d90:	30 0d       	add	r19, r0
     d92:	11 24       	eor	r1, r1
     d94:	53 2e       	mov	r5, r19
     d96:	13 c0       	rjmp	.+38     	; 0xdbe <vfprintf+0xf0>
     d98:	8a e0       	ldi	r24, 0x0A	; 10
     d9a:	38 9e       	mul	r3, r24
     d9c:	30 0d       	add	r19, r0
     d9e:	11 24       	eor	r1, r1
     da0:	33 2e       	mov	r3, r19
     da2:	20 62       	ori	r18, 0x20	; 32
     da4:	0c c0       	rjmp	.+24     	; 0xdbe <vfprintf+0xf0>
     da6:	8e 32       	cpi	r24, 0x2E	; 46
     da8:	21 f4       	brne	.+8      	; 0xdb2 <vfprintf+0xe4>
     daa:	26 fd       	sbrc	r18, 6
     dac:	5f c1       	rjmp	.+702    	; 0x106c <vfprintf+0x39e>
     dae:	20 64       	ori	r18, 0x40	; 64
     db0:	06 c0       	rjmp	.+12     	; 0xdbe <vfprintf+0xf0>
     db2:	8c 36       	cpi	r24, 0x6C	; 108
     db4:	11 f4       	brne	.+4      	; 0xdba <vfprintf+0xec>
     db6:	20 68       	ori	r18, 0x80	; 128
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <vfprintf+0xf0>
     dba:	88 36       	cpi	r24, 0x68	; 104
     dbc:	41 f4       	brne	.+16     	; 0xdce <vfprintf+0x100>
     dbe:	f6 01       	movw	r30, r12
     dc0:	93 fd       	sbrc	r25, 3
     dc2:	85 91       	lpm	r24, Z+
     dc4:	93 ff       	sbrs	r25, 3
     dc6:	81 91       	ld	r24, Z+
     dc8:	6f 01       	movw	r12, r30
     dca:	81 11       	cpse	r24, r1
     dcc:	c1 cf       	rjmp	.-126    	; 0xd50 <vfprintf+0x82>
     dce:	98 2f       	mov	r25, r24
     dd0:	9f 7d       	andi	r25, 0xDF	; 223
     dd2:	95 54       	subi	r25, 0x45	; 69
     dd4:	93 30       	cpi	r25, 0x03	; 3
     dd6:	28 f4       	brcc	.+10     	; 0xde2 <vfprintf+0x114>
     dd8:	0c 5f       	subi	r16, 0xFC	; 252
     dda:	1f 4f       	sbci	r17, 0xFF	; 255
     ddc:	ff e3       	ldi	r31, 0x3F	; 63
     dde:	f9 83       	std	Y+1, r31	; 0x01
     de0:	0d c0       	rjmp	.+26     	; 0xdfc <vfprintf+0x12e>
     de2:	83 36       	cpi	r24, 0x63	; 99
     de4:	31 f0       	breq	.+12     	; 0xdf2 <vfprintf+0x124>
     de6:	83 37       	cpi	r24, 0x73	; 115
     de8:	71 f0       	breq	.+28     	; 0xe06 <vfprintf+0x138>
     dea:	83 35       	cpi	r24, 0x53	; 83
     dec:	09 f0       	breq	.+2      	; 0xdf0 <vfprintf+0x122>
     dee:	57 c0       	rjmp	.+174    	; 0xe9e <vfprintf+0x1d0>
     df0:	21 c0       	rjmp	.+66     	; 0xe34 <vfprintf+0x166>
     df2:	f8 01       	movw	r30, r16
     df4:	80 81       	ld	r24, Z
     df6:	89 83       	std	Y+1, r24	; 0x01
     df8:	0e 5f       	subi	r16, 0xFE	; 254
     dfa:	1f 4f       	sbci	r17, 0xFF	; 255
     dfc:	44 24       	eor	r4, r4
     dfe:	43 94       	inc	r4
     e00:	51 2c       	mov	r5, r1
     e02:	54 01       	movw	r10, r8
     e04:	14 c0       	rjmp	.+40     	; 0xe2e <vfprintf+0x160>
     e06:	38 01       	movw	r6, r16
     e08:	f2 e0       	ldi	r31, 0x02	; 2
     e0a:	6f 0e       	add	r6, r31
     e0c:	71 1c       	adc	r7, r1
     e0e:	f8 01       	movw	r30, r16
     e10:	a0 80       	ld	r10, Z
     e12:	b1 80       	ldd	r11, Z+1	; 0x01
     e14:	26 ff       	sbrs	r18, 6
     e16:	03 c0       	rjmp	.+6      	; 0xe1e <vfprintf+0x150>
     e18:	65 2d       	mov	r22, r5
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <vfprintf+0x154>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	c5 01       	movw	r24, r10
     e24:	2c 87       	std	Y+12, r18	; 0x0c
     e26:	4c d1       	rcall	.+664    	; 0x10c0 <strnlen>
     e28:	2c 01       	movw	r4, r24
     e2a:	83 01       	movw	r16, r6
     e2c:	2c 85       	ldd	r18, Y+12	; 0x0c
     e2e:	2f 77       	andi	r18, 0x7F	; 127
     e30:	22 2e       	mov	r2, r18
     e32:	16 c0       	rjmp	.+44     	; 0xe60 <vfprintf+0x192>
     e34:	38 01       	movw	r6, r16
     e36:	f2 e0       	ldi	r31, 0x02	; 2
     e38:	6f 0e       	add	r6, r31
     e3a:	71 1c       	adc	r7, r1
     e3c:	f8 01       	movw	r30, r16
     e3e:	a0 80       	ld	r10, Z
     e40:	b1 80       	ldd	r11, Z+1	; 0x01
     e42:	26 ff       	sbrs	r18, 6
     e44:	03 c0       	rjmp	.+6      	; 0xe4c <vfprintf+0x17e>
     e46:	65 2d       	mov	r22, r5
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <vfprintf+0x182>
     e4c:	6f ef       	ldi	r22, 0xFF	; 255
     e4e:	7f ef       	ldi	r23, 0xFF	; 255
     e50:	c5 01       	movw	r24, r10
     e52:	2c 87       	std	Y+12, r18	; 0x0c
     e54:	2a d1       	rcall	.+596    	; 0x10aa <strnlen_P>
     e56:	2c 01       	movw	r4, r24
     e58:	2c 85       	ldd	r18, Y+12	; 0x0c
     e5a:	20 68       	ori	r18, 0x80	; 128
     e5c:	22 2e       	mov	r2, r18
     e5e:	83 01       	movw	r16, r6
     e60:	23 fc       	sbrc	r2, 3
     e62:	19 c0       	rjmp	.+50     	; 0xe96 <vfprintf+0x1c8>
     e64:	83 2d       	mov	r24, r3
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	48 16       	cp	r4, r24
     e6a:	59 06       	cpc	r5, r25
     e6c:	a0 f4       	brcc	.+40     	; 0xe96 <vfprintf+0x1c8>
     e6e:	b7 01       	movw	r22, r14
     e70:	80 e2       	ldi	r24, 0x20	; 32
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	30 d1       	rcall	.+608    	; 0x10d6 <fputc>
     e76:	3a 94       	dec	r3
     e78:	f5 cf       	rjmp	.-22     	; 0xe64 <vfprintf+0x196>
     e7a:	f5 01       	movw	r30, r10
     e7c:	27 fc       	sbrc	r2, 7
     e7e:	85 91       	lpm	r24, Z+
     e80:	27 fe       	sbrs	r2, 7
     e82:	81 91       	ld	r24, Z+
     e84:	5f 01       	movw	r10, r30
     e86:	b7 01       	movw	r22, r14
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	25 d1       	rcall	.+586    	; 0x10d6 <fputc>
     e8c:	31 10       	cpse	r3, r1
     e8e:	3a 94       	dec	r3
     e90:	f1 e0       	ldi	r31, 0x01	; 1
     e92:	4f 1a       	sub	r4, r31
     e94:	51 08       	sbc	r5, r1
     e96:	41 14       	cp	r4, r1
     e98:	51 04       	cpc	r5, r1
     e9a:	79 f7       	brne	.-34     	; 0xe7a <vfprintf+0x1ac>
     e9c:	de c0       	rjmp	.+444    	; 0x105a <vfprintf+0x38c>
     e9e:	84 36       	cpi	r24, 0x64	; 100
     ea0:	11 f0       	breq	.+4      	; 0xea6 <vfprintf+0x1d8>
     ea2:	89 36       	cpi	r24, 0x69	; 105
     ea4:	31 f5       	brne	.+76     	; 0xef2 <vfprintf+0x224>
     ea6:	f8 01       	movw	r30, r16
     ea8:	27 ff       	sbrs	r18, 7
     eaa:	07 c0       	rjmp	.+14     	; 0xeba <vfprintf+0x1ec>
     eac:	60 81       	ld	r22, Z
     eae:	71 81       	ldd	r23, Z+1	; 0x01
     eb0:	82 81       	ldd	r24, Z+2	; 0x02
     eb2:	93 81       	ldd	r25, Z+3	; 0x03
     eb4:	0c 5f       	subi	r16, 0xFC	; 252
     eb6:	1f 4f       	sbci	r17, 0xFF	; 255
     eb8:	08 c0       	rjmp	.+16     	; 0xeca <vfprintf+0x1fc>
     eba:	60 81       	ld	r22, Z
     ebc:	71 81       	ldd	r23, Z+1	; 0x01
     ebe:	88 27       	eor	r24, r24
     ec0:	77 fd       	sbrc	r23, 7
     ec2:	80 95       	com	r24
     ec4:	98 2f       	mov	r25, r24
     ec6:	0e 5f       	subi	r16, 0xFE	; 254
     ec8:	1f 4f       	sbci	r17, 0xFF	; 255
     eca:	2f 76       	andi	r18, 0x6F	; 111
     ecc:	b2 2e       	mov	r11, r18
     ece:	97 ff       	sbrs	r25, 7
     ed0:	09 c0       	rjmp	.+18     	; 0xee4 <vfprintf+0x216>
     ed2:	90 95       	com	r25
     ed4:	80 95       	com	r24
     ed6:	70 95       	com	r23
     ed8:	61 95       	neg	r22
     eda:	7f 4f       	sbci	r23, 0xFF	; 255
     edc:	8f 4f       	sbci	r24, 0xFF	; 255
     ede:	9f 4f       	sbci	r25, 0xFF	; 255
     ee0:	20 68       	ori	r18, 0x80	; 128
     ee2:	b2 2e       	mov	r11, r18
     ee4:	2a e0       	ldi	r18, 0x0A	; 10
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	a4 01       	movw	r20, r8
     eea:	27 d1       	rcall	.+590    	; 0x113a <__ultoa_invert>
     eec:	a8 2e       	mov	r10, r24
     eee:	a8 18       	sub	r10, r8
     ef0:	43 c0       	rjmp	.+134    	; 0xf78 <vfprintf+0x2aa>
     ef2:	85 37       	cpi	r24, 0x75	; 117
     ef4:	29 f4       	brne	.+10     	; 0xf00 <vfprintf+0x232>
     ef6:	2f 7e       	andi	r18, 0xEF	; 239
     ef8:	b2 2e       	mov	r11, r18
     efa:	2a e0       	ldi	r18, 0x0A	; 10
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	25 c0       	rjmp	.+74     	; 0xf4a <vfprintf+0x27c>
     f00:	f2 2f       	mov	r31, r18
     f02:	f9 7f       	andi	r31, 0xF9	; 249
     f04:	bf 2e       	mov	r11, r31
     f06:	8f 36       	cpi	r24, 0x6F	; 111
     f08:	c1 f0       	breq	.+48     	; 0xf3a <vfprintf+0x26c>
     f0a:	18 f4       	brcc	.+6      	; 0xf12 <vfprintf+0x244>
     f0c:	88 35       	cpi	r24, 0x58	; 88
     f0e:	79 f0       	breq	.+30     	; 0xf2e <vfprintf+0x260>
     f10:	ad c0       	rjmp	.+346    	; 0x106c <vfprintf+0x39e>
     f12:	80 37       	cpi	r24, 0x70	; 112
     f14:	19 f0       	breq	.+6      	; 0xf1c <vfprintf+0x24e>
     f16:	88 37       	cpi	r24, 0x78	; 120
     f18:	21 f0       	breq	.+8      	; 0xf22 <vfprintf+0x254>
     f1a:	a8 c0       	rjmp	.+336    	; 0x106c <vfprintf+0x39e>
     f1c:	2f 2f       	mov	r18, r31
     f1e:	20 61       	ori	r18, 0x10	; 16
     f20:	b2 2e       	mov	r11, r18
     f22:	b4 fe       	sbrs	r11, 4
     f24:	0d c0       	rjmp	.+26     	; 0xf40 <vfprintf+0x272>
     f26:	8b 2d       	mov	r24, r11
     f28:	84 60       	ori	r24, 0x04	; 4
     f2a:	b8 2e       	mov	r11, r24
     f2c:	09 c0       	rjmp	.+18     	; 0xf40 <vfprintf+0x272>
     f2e:	24 ff       	sbrs	r18, 4
     f30:	0a c0       	rjmp	.+20     	; 0xf46 <vfprintf+0x278>
     f32:	9f 2f       	mov	r25, r31
     f34:	96 60       	ori	r25, 0x06	; 6
     f36:	b9 2e       	mov	r11, r25
     f38:	06 c0       	rjmp	.+12     	; 0xf46 <vfprintf+0x278>
     f3a:	28 e0       	ldi	r18, 0x08	; 8
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	05 c0       	rjmp	.+10     	; 0xf4a <vfprintf+0x27c>
     f40:	20 e1       	ldi	r18, 0x10	; 16
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <vfprintf+0x27c>
     f46:	20 e1       	ldi	r18, 0x10	; 16
     f48:	32 e0       	ldi	r19, 0x02	; 2
     f4a:	f8 01       	movw	r30, r16
     f4c:	b7 fe       	sbrs	r11, 7
     f4e:	07 c0       	rjmp	.+14     	; 0xf5e <vfprintf+0x290>
     f50:	60 81       	ld	r22, Z
     f52:	71 81       	ldd	r23, Z+1	; 0x01
     f54:	82 81       	ldd	r24, Z+2	; 0x02
     f56:	93 81       	ldd	r25, Z+3	; 0x03
     f58:	0c 5f       	subi	r16, 0xFC	; 252
     f5a:	1f 4f       	sbci	r17, 0xFF	; 255
     f5c:	06 c0       	rjmp	.+12     	; 0xf6a <vfprintf+0x29c>
     f5e:	60 81       	ld	r22, Z
     f60:	71 81       	ldd	r23, Z+1	; 0x01
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 5f       	subi	r16, 0xFE	; 254
     f68:	1f 4f       	sbci	r17, 0xFF	; 255
     f6a:	a4 01       	movw	r20, r8
     f6c:	e6 d0       	rcall	.+460    	; 0x113a <__ultoa_invert>
     f6e:	a8 2e       	mov	r10, r24
     f70:	a8 18       	sub	r10, r8
     f72:	fb 2d       	mov	r31, r11
     f74:	ff 77       	andi	r31, 0x7F	; 127
     f76:	bf 2e       	mov	r11, r31
     f78:	b6 fe       	sbrs	r11, 6
     f7a:	0b c0       	rjmp	.+22     	; 0xf92 <vfprintf+0x2c4>
     f7c:	2b 2d       	mov	r18, r11
     f7e:	2e 7f       	andi	r18, 0xFE	; 254
     f80:	a5 14       	cp	r10, r5
     f82:	50 f4       	brcc	.+20     	; 0xf98 <vfprintf+0x2ca>
     f84:	b4 fe       	sbrs	r11, 4
     f86:	0a c0       	rjmp	.+20     	; 0xf9c <vfprintf+0x2ce>
     f88:	b2 fc       	sbrc	r11, 2
     f8a:	08 c0       	rjmp	.+16     	; 0xf9c <vfprintf+0x2ce>
     f8c:	2b 2d       	mov	r18, r11
     f8e:	2e 7e       	andi	r18, 0xEE	; 238
     f90:	05 c0       	rjmp	.+10     	; 0xf9c <vfprintf+0x2ce>
     f92:	7a 2c       	mov	r7, r10
     f94:	2b 2d       	mov	r18, r11
     f96:	03 c0       	rjmp	.+6      	; 0xf9e <vfprintf+0x2d0>
     f98:	7a 2c       	mov	r7, r10
     f9a:	01 c0       	rjmp	.+2      	; 0xf9e <vfprintf+0x2d0>
     f9c:	75 2c       	mov	r7, r5
     f9e:	24 ff       	sbrs	r18, 4
     fa0:	0d c0       	rjmp	.+26     	; 0xfbc <vfprintf+0x2ee>
     fa2:	fe 01       	movw	r30, r28
     fa4:	ea 0d       	add	r30, r10
     fa6:	f1 1d       	adc	r31, r1
     fa8:	80 81       	ld	r24, Z
     faa:	80 33       	cpi	r24, 0x30	; 48
     fac:	11 f4       	brne	.+4      	; 0xfb2 <vfprintf+0x2e4>
     fae:	29 7e       	andi	r18, 0xE9	; 233
     fb0:	09 c0       	rjmp	.+18     	; 0xfc4 <vfprintf+0x2f6>
     fb2:	22 ff       	sbrs	r18, 2
     fb4:	06 c0       	rjmp	.+12     	; 0xfc2 <vfprintf+0x2f4>
     fb6:	73 94       	inc	r7
     fb8:	73 94       	inc	r7
     fba:	04 c0       	rjmp	.+8      	; 0xfc4 <vfprintf+0x2f6>
     fbc:	82 2f       	mov	r24, r18
     fbe:	86 78       	andi	r24, 0x86	; 134
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <vfprintf+0x2f6>
     fc2:	73 94       	inc	r7
     fc4:	23 fd       	sbrc	r18, 3
     fc6:	12 c0       	rjmp	.+36     	; 0xfec <vfprintf+0x31e>
     fc8:	20 ff       	sbrs	r18, 0
     fca:	06 c0       	rjmp	.+12     	; 0xfd8 <vfprintf+0x30a>
     fcc:	5a 2c       	mov	r5, r10
     fce:	73 14       	cp	r7, r3
     fd0:	18 f4       	brcc	.+6      	; 0xfd8 <vfprintf+0x30a>
     fd2:	53 0c       	add	r5, r3
     fd4:	57 18       	sub	r5, r7
     fd6:	73 2c       	mov	r7, r3
     fd8:	73 14       	cp	r7, r3
     fda:	60 f4       	brcc	.+24     	; 0xff4 <vfprintf+0x326>
     fdc:	b7 01       	movw	r22, r14
     fde:	80 e2       	ldi	r24, 0x20	; 32
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	2c 87       	std	Y+12, r18	; 0x0c
     fe4:	78 d0       	rcall	.+240    	; 0x10d6 <fputc>
     fe6:	73 94       	inc	r7
     fe8:	2c 85       	ldd	r18, Y+12	; 0x0c
     fea:	f6 cf       	rjmp	.-20     	; 0xfd8 <vfprintf+0x30a>
     fec:	73 14       	cp	r7, r3
     fee:	10 f4       	brcc	.+4      	; 0xff4 <vfprintf+0x326>
     ff0:	37 18       	sub	r3, r7
     ff2:	01 c0       	rjmp	.+2      	; 0xff6 <vfprintf+0x328>
     ff4:	31 2c       	mov	r3, r1
     ff6:	24 ff       	sbrs	r18, 4
     ff8:	11 c0       	rjmp	.+34     	; 0x101c <vfprintf+0x34e>
     ffa:	b7 01       	movw	r22, r14
     ffc:	80 e3       	ldi	r24, 0x30	; 48
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	2c 87       	std	Y+12, r18	; 0x0c
    1002:	69 d0       	rcall	.+210    	; 0x10d6 <fputc>
    1004:	2c 85       	ldd	r18, Y+12	; 0x0c
    1006:	22 ff       	sbrs	r18, 2
    1008:	16 c0       	rjmp	.+44     	; 0x1036 <vfprintf+0x368>
    100a:	21 ff       	sbrs	r18, 1
    100c:	03 c0       	rjmp	.+6      	; 0x1014 <vfprintf+0x346>
    100e:	88 e5       	ldi	r24, 0x58	; 88
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <vfprintf+0x34a>
    1014:	88 e7       	ldi	r24, 0x78	; 120
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	b7 01       	movw	r22, r14
    101a:	0c c0       	rjmp	.+24     	; 0x1034 <vfprintf+0x366>
    101c:	82 2f       	mov	r24, r18
    101e:	86 78       	andi	r24, 0x86	; 134
    1020:	51 f0       	breq	.+20     	; 0x1036 <vfprintf+0x368>
    1022:	21 fd       	sbrc	r18, 1
    1024:	02 c0       	rjmp	.+4      	; 0x102a <vfprintf+0x35c>
    1026:	80 e2       	ldi	r24, 0x20	; 32
    1028:	01 c0       	rjmp	.+2      	; 0x102c <vfprintf+0x35e>
    102a:	8b e2       	ldi	r24, 0x2B	; 43
    102c:	27 fd       	sbrc	r18, 7
    102e:	8d e2       	ldi	r24, 0x2D	; 45
    1030:	b7 01       	movw	r22, r14
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	50 d0       	rcall	.+160    	; 0x10d6 <fputc>
    1036:	a5 14       	cp	r10, r5
    1038:	30 f4       	brcc	.+12     	; 0x1046 <vfprintf+0x378>
    103a:	b7 01       	movw	r22, r14
    103c:	80 e3       	ldi	r24, 0x30	; 48
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	4a d0       	rcall	.+148    	; 0x10d6 <fputc>
    1042:	5a 94       	dec	r5
    1044:	f8 cf       	rjmp	.-16     	; 0x1036 <vfprintf+0x368>
    1046:	aa 94       	dec	r10
    1048:	f4 01       	movw	r30, r8
    104a:	ea 0d       	add	r30, r10
    104c:	f1 1d       	adc	r31, r1
    104e:	80 81       	ld	r24, Z
    1050:	b7 01       	movw	r22, r14
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	40 d0       	rcall	.+128    	; 0x10d6 <fputc>
    1056:	a1 10       	cpse	r10, r1
    1058:	f6 cf       	rjmp	.-20     	; 0x1046 <vfprintf+0x378>
    105a:	33 20       	and	r3, r3
    105c:	09 f4       	brne	.+2      	; 0x1060 <vfprintf+0x392>
    105e:	5d ce       	rjmp	.-838    	; 0xd1a <vfprintf+0x4c>
    1060:	b7 01       	movw	r22, r14
    1062:	80 e2       	ldi	r24, 0x20	; 32
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	37 d0       	rcall	.+110    	; 0x10d6 <fputc>
    1068:	3a 94       	dec	r3
    106a:	f7 cf       	rjmp	.-18     	; 0x105a <vfprintf+0x38c>
    106c:	f7 01       	movw	r30, r14
    106e:	86 81       	ldd	r24, Z+6	; 0x06
    1070:	97 81       	ldd	r25, Z+7	; 0x07
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <vfprintf+0x3aa>
    1074:	8f ef       	ldi	r24, 0xFF	; 255
    1076:	9f ef       	ldi	r25, 0xFF	; 255
    1078:	2c 96       	adiw	r28, 0x0c	; 12
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	ff 90       	pop	r15
    108e:	ef 90       	pop	r14
    1090:	df 90       	pop	r13
    1092:	cf 90       	pop	r12
    1094:	bf 90       	pop	r11
    1096:	af 90       	pop	r10
    1098:	9f 90       	pop	r9
    109a:	8f 90       	pop	r8
    109c:	7f 90       	pop	r7
    109e:	6f 90       	pop	r6
    10a0:	5f 90       	pop	r5
    10a2:	4f 90       	pop	r4
    10a4:	3f 90       	pop	r3
    10a6:	2f 90       	pop	r2
    10a8:	08 95       	ret

000010aa <strnlen_P>:
    10aa:	fc 01       	movw	r30, r24
    10ac:	05 90       	lpm	r0, Z+
    10ae:	61 50       	subi	r22, 0x01	; 1
    10b0:	70 40       	sbci	r23, 0x00	; 0
    10b2:	01 10       	cpse	r0, r1
    10b4:	d8 f7       	brcc	.-10     	; 0x10ac <strnlen_P+0x2>
    10b6:	80 95       	com	r24
    10b8:	90 95       	com	r25
    10ba:	8e 0f       	add	r24, r30
    10bc:	9f 1f       	adc	r25, r31
    10be:	08 95       	ret

000010c0 <strnlen>:
    10c0:	fc 01       	movw	r30, r24
    10c2:	61 50       	subi	r22, 0x01	; 1
    10c4:	70 40       	sbci	r23, 0x00	; 0
    10c6:	01 90       	ld	r0, Z+
    10c8:	01 10       	cpse	r0, r1
    10ca:	d8 f7       	brcc	.-10     	; 0x10c2 <strnlen+0x2>
    10cc:	80 95       	com	r24
    10ce:	90 95       	com	r25
    10d0:	8e 0f       	add	r24, r30
    10d2:	9f 1f       	adc	r25, r31
    10d4:	08 95       	ret

000010d6 <fputc>:
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	18 2f       	mov	r17, r24
    10e0:	09 2f       	mov	r16, r25
    10e2:	eb 01       	movw	r28, r22
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	81 fd       	sbrc	r24, 1
    10e8:	03 c0       	rjmp	.+6      	; 0x10f0 <fputc+0x1a>
    10ea:	8f ef       	ldi	r24, 0xFF	; 255
    10ec:	9f ef       	ldi	r25, 0xFF	; 255
    10ee:	20 c0       	rjmp	.+64     	; 0x1130 <fputc+0x5a>
    10f0:	82 ff       	sbrs	r24, 2
    10f2:	10 c0       	rjmp	.+32     	; 0x1114 <fputc+0x3e>
    10f4:	4e 81       	ldd	r20, Y+6	; 0x06
    10f6:	5f 81       	ldd	r21, Y+7	; 0x07
    10f8:	2c 81       	ldd	r18, Y+4	; 0x04
    10fa:	3d 81       	ldd	r19, Y+5	; 0x05
    10fc:	42 17       	cp	r20, r18
    10fe:	53 07       	cpc	r21, r19
    1100:	7c f4       	brge	.+30     	; 0x1120 <fputc+0x4a>
    1102:	e8 81       	ld	r30, Y
    1104:	f9 81       	ldd	r31, Y+1	; 0x01
    1106:	9f 01       	movw	r18, r30
    1108:	2f 5f       	subi	r18, 0xFF	; 255
    110a:	3f 4f       	sbci	r19, 0xFF	; 255
    110c:	39 83       	std	Y+1, r19	; 0x01
    110e:	28 83       	st	Y, r18
    1110:	10 83       	st	Z, r17
    1112:	06 c0       	rjmp	.+12     	; 0x1120 <fputc+0x4a>
    1114:	e8 85       	ldd	r30, Y+8	; 0x08
    1116:	f9 85       	ldd	r31, Y+9	; 0x09
    1118:	81 2f       	mov	r24, r17
    111a:	19 95       	eicall
    111c:	89 2b       	or	r24, r25
    111e:	29 f7       	brne	.-54     	; 0x10ea <fputc+0x14>
    1120:	2e 81       	ldd	r18, Y+6	; 0x06
    1122:	3f 81       	ldd	r19, Y+7	; 0x07
    1124:	2f 5f       	subi	r18, 0xFF	; 255
    1126:	3f 4f       	sbci	r19, 0xFF	; 255
    1128:	3f 83       	std	Y+7, r19	; 0x07
    112a:	2e 83       	std	Y+6, r18	; 0x06
    112c:	81 2f       	mov	r24, r17
    112e:	90 2f       	mov	r25, r16
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	08 95       	ret

0000113a <__ultoa_invert>:
    113a:	fa 01       	movw	r30, r20
    113c:	aa 27       	eor	r26, r26
    113e:	28 30       	cpi	r18, 0x08	; 8
    1140:	51 f1       	breq	.+84     	; 0x1196 <__ultoa_invert+0x5c>
    1142:	20 31       	cpi	r18, 0x10	; 16
    1144:	81 f1       	breq	.+96     	; 0x11a6 <__ultoa_invert+0x6c>
    1146:	e8 94       	clt
    1148:	6f 93       	push	r22
    114a:	6e 7f       	andi	r22, 0xFE	; 254
    114c:	6e 5f       	subi	r22, 0xFE	; 254
    114e:	7f 4f       	sbci	r23, 0xFF	; 255
    1150:	8f 4f       	sbci	r24, 0xFF	; 255
    1152:	9f 4f       	sbci	r25, 0xFF	; 255
    1154:	af 4f       	sbci	r26, 0xFF	; 255
    1156:	b1 e0       	ldi	r27, 0x01	; 1
    1158:	3e d0       	rcall	.+124    	; 0x11d6 <__ultoa_invert+0x9c>
    115a:	b4 e0       	ldi	r27, 0x04	; 4
    115c:	3c d0       	rcall	.+120    	; 0x11d6 <__ultoa_invert+0x9c>
    115e:	67 0f       	add	r22, r23
    1160:	78 1f       	adc	r23, r24
    1162:	89 1f       	adc	r24, r25
    1164:	9a 1f       	adc	r25, r26
    1166:	a1 1d       	adc	r26, r1
    1168:	68 0f       	add	r22, r24
    116a:	79 1f       	adc	r23, r25
    116c:	8a 1f       	adc	r24, r26
    116e:	91 1d       	adc	r25, r1
    1170:	a1 1d       	adc	r26, r1
    1172:	6a 0f       	add	r22, r26
    1174:	71 1d       	adc	r23, r1
    1176:	81 1d       	adc	r24, r1
    1178:	91 1d       	adc	r25, r1
    117a:	a1 1d       	adc	r26, r1
    117c:	20 d0       	rcall	.+64     	; 0x11be <__ultoa_invert+0x84>
    117e:	09 f4       	brne	.+2      	; 0x1182 <__ultoa_invert+0x48>
    1180:	68 94       	set
    1182:	3f 91       	pop	r19
    1184:	2a e0       	ldi	r18, 0x0A	; 10
    1186:	26 9f       	mul	r18, r22
    1188:	11 24       	eor	r1, r1
    118a:	30 19       	sub	r19, r0
    118c:	30 5d       	subi	r19, 0xD0	; 208
    118e:	31 93       	st	Z+, r19
    1190:	de f6       	brtc	.-74     	; 0x1148 <__ultoa_invert+0xe>
    1192:	cf 01       	movw	r24, r30
    1194:	08 95       	ret
    1196:	46 2f       	mov	r20, r22
    1198:	47 70       	andi	r20, 0x07	; 7
    119a:	40 5d       	subi	r20, 0xD0	; 208
    119c:	41 93       	st	Z+, r20
    119e:	b3 e0       	ldi	r27, 0x03	; 3
    11a0:	0f d0       	rcall	.+30     	; 0x11c0 <__ultoa_invert+0x86>
    11a2:	c9 f7       	brne	.-14     	; 0x1196 <__ultoa_invert+0x5c>
    11a4:	f6 cf       	rjmp	.-20     	; 0x1192 <__ultoa_invert+0x58>
    11a6:	46 2f       	mov	r20, r22
    11a8:	4f 70       	andi	r20, 0x0F	; 15
    11aa:	40 5d       	subi	r20, 0xD0	; 208
    11ac:	4a 33       	cpi	r20, 0x3A	; 58
    11ae:	18 f0       	brcs	.+6      	; 0x11b6 <__ultoa_invert+0x7c>
    11b0:	49 5d       	subi	r20, 0xD9	; 217
    11b2:	31 fd       	sbrc	r19, 1
    11b4:	40 52       	subi	r20, 0x20	; 32
    11b6:	41 93       	st	Z+, r20
    11b8:	02 d0       	rcall	.+4      	; 0x11be <__ultoa_invert+0x84>
    11ba:	a9 f7       	brne	.-22     	; 0x11a6 <__ultoa_invert+0x6c>
    11bc:	ea cf       	rjmp	.-44     	; 0x1192 <__ultoa_invert+0x58>
    11be:	b4 e0       	ldi	r27, 0x04	; 4
    11c0:	a6 95       	lsr	r26
    11c2:	97 95       	ror	r25
    11c4:	87 95       	ror	r24
    11c6:	77 95       	ror	r23
    11c8:	67 95       	ror	r22
    11ca:	ba 95       	dec	r27
    11cc:	c9 f7       	brne	.-14     	; 0x11c0 <__ultoa_invert+0x86>
    11ce:	00 97       	sbiw	r24, 0x00	; 0
    11d0:	61 05       	cpc	r22, r1
    11d2:	71 05       	cpc	r23, r1
    11d4:	08 95       	ret
    11d6:	9b 01       	movw	r18, r22
    11d8:	ac 01       	movw	r20, r24
    11da:	0a 2e       	mov	r0, r26
    11dc:	06 94       	lsr	r0
    11de:	57 95       	ror	r21
    11e0:	47 95       	ror	r20
    11e2:	37 95       	ror	r19
    11e4:	27 95       	ror	r18
    11e6:	ba 95       	dec	r27
    11e8:	c9 f7       	brne	.-14     	; 0x11dc <__ultoa_invert+0xa2>
    11ea:	62 0f       	add	r22, r18
    11ec:	73 1f       	adc	r23, r19
    11ee:	84 1f       	adc	r24, r20
    11f0:	95 1f       	adc	r25, r21
    11f2:	a0 1d       	adc	r26, r0
    11f4:	08 95       	ret

000011f6 <_exit>:
    11f6:	f8 94       	cli

000011f8 <__stop_program>:
    11f8:	ff cf       	rjmp	.-2      	; 0x11f8 <__stop_program>
