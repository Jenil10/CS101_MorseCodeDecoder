
MorseCodeDecoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800200  00001846  000018da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001846  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800264  00800264  0000193e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000193e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002b0  00000000  00000000  0000199a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000032fe  00000000  00000000  00001c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000123f  00000000  00000000  00004f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a5c  00000000  00000000  00006187  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000067c  00000000  00000000  00007be4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000aff  00000000  00000000  00008260  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001e76  00000000  00000000  00008d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002c8  00000000  00000000  0000abd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	cb c0       	rjmp	.+406    	; 0x198 <__ctors_end>
       2:	00 00       	nop
       4:	e9 c0       	rjmp	.+466    	; 0x1d8 <__bad_interrupt>
       6:	00 00       	nop
       8:	e7 c0       	rjmp	.+462    	; 0x1d8 <__bad_interrupt>
       a:	00 00       	nop
       c:	e5 c0       	rjmp	.+458    	; 0x1d8 <__bad_interrupt>
       e:	00 00       	nop
      10:	e3 c0       	rjmp	.+454    	; 0x1d8 <__bad_interrupt>
      12:	00 00       	nop
      14:	e1 c0       	rjmp	.+450    	; 0x1d8 <__bad_interrupt>
      16:	00 00       	nop
      18:	df c0       	rjmp	.+446    	; 0x1d8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	dd c0       	rjmp	.+442    	; 0x1d8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	db c0       	rjmp	.+438    	; 0x1d8 <__bad_interrupt>
      22:	00 00       	nop
      24:	d9 c0       	rjmp	.+434    	; 0x1d8 <__bad_interrupt>
      26:	00 00       	nop
      28:	d7 c0       	rjmp	.+430    	; 0x1d8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d5 c0       	rjmp	.+426    	; 0x1d8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d3 c0       	rjmp	.+422    	; 0x1d8 <__bad_interrupt>
      32:	00 00       	nop
      34:	d1 c0       	rjmp	.+418    	; 0x1d8 <__bad_interrupt>
      36:	00 00       	nop
      38:	cf c0       	rjmp	.+414    	; 0x1d8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	cd c0       	rjmp	.+410    	; 0x1d8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	cb c0       	rjmp	.+406    	; 0x1d8 <__bad_interrupt>
      42:	00 00       	nop
      44:	c9 c0       	rjmp	.+402    	; 0x1d8 <__bad_interrupt>
      46:	00 00       	nop
      48:	c7 c0       	rjmp	.+398    	; 0x1d8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c5 c0       	rjmp	.+394    	; 0x1d8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c3 c0       	rjmp	.+390    	; 0x1d8 <__bad_interrupt>
      52:	00 00       	nop
      54:	c1 c0       	rjmp	.+386    	; 0x1d8 <__bad_interrupt>
      56:	00 00       	nop
      58:	bf c0       	rjmp	.+382    	; 0x1d8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	bd c0       	rjmp	.+378    	; 0x1d8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	bb c0       	rjmp	.+374    	; 0x1d8 <__bad_interrupt>
      62:	00 00       	nop
      64:	b9 c0       	rjmp	.+370    	; 0x1d8 <__bad_interrupt>
      66:	00 00       	nop
      68:	b7 c0       	rjmp	.+366    	; 0x1d8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b5 c0       	rjmp	.+362    	; 0x1d8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b3 c0       	rjmp	.+358    	; 0x1d8 <__bad_interrupt>
      72:	00 00       	nop
      74:	b1 c0       	rjmp	.+354    	; 0x1d8 <__bad_interrupt>
      76:	00 00       	nop
      78:	af c0       	rjmp	.+350    	; 0x1d8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ad c0       	rjmp	.+346    	; 0x1d8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ab c0       	rjmp	.+342    	; 0x1d8 <__bad_interrupt>
      82:	00 00       	nop
      84:	a9 c0       	rjmp	.+338    	; 0x1d8 <__bad_interrupt>
      86:	00 00       	nop
      88:	a7 c0       	rjmp	.+334    	; 0x1d8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b c7       	rjmp	.+3670   	; 0xee4 <__vector_35>
      8e:	00 00       	nop
      90:	a3 c0       	rjmp	.+326    	; 0x1d8 <__bad_interrupt>
      92:	00 00       	nop
      94:	a1 c0       	rjmp	.+322    	; 0x1d8 <__bad_interrupt>
      96:	00 00       	nop
      98:	9f c0       	rjmp	.+318    	; 0x1d8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	9d c0       	rjmp	.+314    	; 0x1d8 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	9b c0       	rjmp	.+310    	; 0x1d8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	99 c0       	rjmp	.+306    	; 0x1d8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	97 c0       	rjmp	.+302    	; 0x1d8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	95 c0       	rjmp	.+298    	; 0x1d8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	93 c0       	rjmp	.+294    	; 0x1d8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	91 c0       	rjmp	.+290    	; 0x1d8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	8f c0       	rjmp	.+286    	; 0x1d8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	8d c0       	rjmp	.+282    	; 0x1d8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	8b c0       	rjmp	.+278    	; 0x1d8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	89 c0       	rjmp	.+274    	; 0x1d8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	87 c0       	rjmp	.+270    	; 0x1d8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	85 c0       	rjmp	.+266    	; 0x1d8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	83 c0       	rjmp	.+262    	; 0x1d8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	81 c0       	rjmp	.+258    	; 0x1d8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	7f c0       	rjmp	.+254    	; 0x1d8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	7d c0       	rjmp	.+250    	; 0x1d8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	7b c0       	rjmp	.+246    	; 0x1d8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	43 02       	muls	r20, r19
      e6:	af 03       	fmulsu	r18, r23
      e8:	af 03       	fmulsu	r18, r23
      ea:	af 03       	fmulsu	r18, r23
      ec:	af 03       	fmulsu	r18, r23
      ee:	af 03       	fmulsu	r18, r23
      f0:	af 03       	fmulsu	r18, r23
      f2:	af 03       	fmulsu	r18, r23
      f4:	af 03       	fmulsu	r18, r23
      f6:	af 03       	fmulsu	r18, r23
      f8:	af 03       	fmulsu	r18, r23
      fa:	af 03       	fmulsu	r18, r23
      fc:	8e 03       	fmulsu	r16, r22
      fe:	af 03       	fmulsu	r18, r23
     100:	83 03       	fmuls	r16, r19
     102:	af 03       	fmulsu	r18, r23
     104:	21 03       	mulsu	r18, r17
     106:	2a 03       	fmul	r18, r18
     108:	34 03       	mulsu	r19, r20
     10a:	3e 03       	fmul	r19, r22
     10c:	48 03       	fmul	r20, r16
     10e:	52 03       	mulsu	r21, r18
     110:	5b 03       	fmul	r21, r19
     112:	65 03       	mulsu	r22, r21
     114:	6f 03       	fmul	r22, r23
     116:	79 03       	fmul	r23, r17
     118:	99 03       	fmulsu	r17, r17
     11a:	af 03       	fmulsu	r18, r23
     11c:	af 03       	fmulsu	r18, r23
     11e:	af 03       	fmulsu	r18, r23
     120:	af 03       	fmulsu	r18, r23
     122:	a4 03       	fmuls	r18, r20
     124:	af 03       	fmulsu	r18, r23
     126:	54 02       	muls	r21, r20
     128:	5b 02       	muls	r21, r27
     12a:	64 02       	muls	r22, r20
     12c:	6d 02       	muls	r22, r29
     12e:	75 02       	muls	r23, r21
     130:	7a 02       	muls	r23, r26
     132:	83 02       	muls	r24, r19
     134:	8b 02       	muls	r24, r27
     136:	93 02       	muls	r25, r19
     138:	99 02       	muls	r25, r25
     13a:	a2 02       	muls	r26, r18
     13c:	aa 02       	muls	r26, r26
     13e:	b3 02       	muls	r27, r19
     140:	b9 02       	muls	r27, r25
     142:	c0 02       	muls	r28, r16
     144:	c7 02       	muls	r28, r23
     146:	d0 02       	muls	r29, r16
     148:	d9 02       	muls	r29, r25
     14a:	e1 02       	muls	r30, r17
     14c:	e8 02       	muls	r30, r24
     14e:	ed 02       	muls	r30, r29
     150:	f5 02       	muls	r31, r21
     152:	fe 02       	muls	r31, r30
     154:	06 03       	mulsu	r16, r22
     156:	af 03       	fmulsu	r18, r23
     158:	18 03       	fmul	r17, r16
     15a:	af 03       	fmulsu	r18, r23
     15c:	af 03       	fmulsu	r18, r23
     15e:	af 03       	fmulsu	r18, r23
     160:	af 03       	fmulsu	r18, r23
     162:	af 03       	fmulsu	r18, r23
     164:	af 03       	fmulsu	r18, r23
     166:	af 03       	fmulsu	r18, r23
     168:	af 03       	fmulsu	r18, r23
     16a:	af 03       	fmulsu	r18, r23
     16c:	af 03       	fmulsu	r18, r23
     16e:	af 03       	fmulsu	r18, r23
     170:	af 03       	fmulsu	r18, r23
     172:	af 03       	fmulsu	r18, r23
     174:	af 03       	fmulsu	r18, r23
     176:	af 03       	fmulsu	r18, r23
     178:	af 03       	fmulsu	r18, r23
     17a:	af 03       	fmulsu	r18, r23
     17c:	af 03       	fmulsu	r18, r23
     17e:	af 03       	fmulsu	r18, r23
     180:	af 03       	fmulsu	r18, r23
     182:	af 03       	fmulsu	r18, r23
     184:	af 03       	fmulsu	r18, r23
     186:	af 03       	fmulsu	r18, r23
     188:	af 03       	fmulsu	r18, r23
     18a:	af 03       	fmulsu	r18, r23
     18c:	af 03       	fmulsu	r18, r23
     18e:	af 03       	fmulsu	r18, r23
     190:	af 03       	fmulsu	r18, r23
     192:	af 03       	fmulsu	r18, r23
     194:	af 03       	fmulsu	r18, r23
     196:	0f 03       	fmul	r16, r23

00000198 <__ctors_end>:
     198:	11 24       	eor	r1, r1
     19a:	1f be       	out	0x3f, r1	; 63
     19c:	cf ef       	ldi	r28, 0xFF	; 255
     19e:	d1 e2       	ldi	r29, 0x21	; 33
     1a0:	de bf       	out	0x3e, r29	; 62
     1a2:	cd bf       	out	0x3d, r28	; 61
     1a4:	00 e0       	ldi	r16, 0x00	; 0
     1a6:	0c bf       	out	0x3c, r16	; 60

000001a8 <__do_copy_data>:
     1a8:	12 e0       	ldi	r17, 0x02	; 2
     1aa:	a0 e0       	ldi	r26, 0x00	; 0
     1ac:	b2 e0       	ldi	r27, 0x02	; 2
     1ae:	e6 e4       	ldi	r30, 0x46	; 70
     1b0:	f8 e1       	ldi	r31, 0x18	; 24
     1b2:	00 e0       	ldi	r16, 0x00	; 0
     1b4:	0b bf       	out	0x3b, r16	; 59
     1b6:	02 c0       	rjmp	.+4      	; 0x1bc <__do_copy_data+0x14>
     1b8:	07 90       	elpm	r0, Z+
     1ba:	0d 92       	st	X+, r0
     1bc:	a4 36       	cpi	r26, 0x64	; 100
     1be:	b1 07       	cpc	r27, r17
     1c0:	d9 f7       	brne	.-10     	; 0x1b8 <__do_copy_data+0x10>

000001c2 <__do_clear_bss>:
     1c2:	22 e0       	ldi	r18, 0x02	; 2
     1c4:	a4 e6       	ldi	r26, 0x64	; 100
     1c6:	b2 e0       	ldi	r27, 0x02	; 2
     1c8:	01 c0       	rjmp	.+2      	; 0x1cc <.do_clear_bss_start>

000001ca <.do_clear_bss_loop>:
     1ca:	1d 92       	st	X+, r1

000001cc <.do_clear_bss_start>:
     1cc:	a8 36       	cpi	r26, 0x68	; 104
     1ce:	b2 07       	cpc	r27, r18
     1d0:	e1 f7       	brne	.-8      	; 0x1ca <.do_clear_bss_loop>
     1d2:	a5 d5       	rcall	.+2890   	; 0xd1e <main>
     1d4:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <_exit>

000001d8 <__bad_interrupt>:
     1d8:	13 cf       	rjmp	.-474    	; 0x0 <__vectors>

000001da <_ZN3LCD10portConfigEv>:
	cursor(row,col);
	
	i--;
	for(i=i;i>=0;i--)writeChar(buffer[i]);
	for( i=0;i<5;i++)writeChar(' ');
}
     1da:	87 b1       	in	r24, 0x07	; 7
     1dc:	87 6f       	ori	r24, 0xF7	; 247
     1de:	87 b9       	out	0x07, r24	; 7
     1e0:	88 b1       	in	r24, 0x08	; 8
     1e2:	80 78       	andi	r24, 0x80	; 128
     1e4:	88 b9       	out	0x08, r24	; 8
     1e6:	08 95       	ret

000001e8 <_ZN3LCD7set4bitEv>:
     1e8:	86 e6       	ldi	r24, 0x66	; 102
     1ea:	9e e0       	ldi	r25, 0x0E	; 14
     1ec:	01 97       	sbiw	r24, 0x01	; 1
     1ee:	f1 f7       	brne	.-4      	; 0x1ec <_ZN3LCD7set4bitEv+0x4>
     1f0:	00 00       	nop
     1f2:	40 98       	cbi	0x08, 0	; 8
     1f4:	41 98       	cbi	0x08, 1	; 8
     1f6:	80 e3       	ldi	r24, 0x30	; 48
     1f8:	88 b9       	out	0x08, r24	; 8
     1fa:	42 9a       	sbi	0x08, 2	; 8
     1fc:	8f ef       	ldi	r24, 0xFF	; 255
     1fe:	97 e4       	ldi	r25, 0x47	; 71
     200:	01 97       	sbiw	r24, 0x01	; 1
     202:	f1 f7       	brne	.-4      	; 0x200 <_ZN3LCD7set4bitEv+0x18>
     204:	00 c0       	rjmp	.+0      	; 0x206 <_ZN3LCD7set4bitEv+0x1e>
     206:	00 00       	nop
     208:	42 98       	cbi	0x08, 2	; 8
     20a:	86 e6       	ldi	r24, 0x66	; 102
     20c:	9e e0       	ldi	r25, 0x0E	; 14
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	f1 f7       	brne	.-4      	; 0x20e <_ZN3LCD7set4bitEv+0x26>
     212:	00 00       	nop
     214:	40 98       	cbi	0x08, 0	; 8
     216:	41 98       	cbi	0x08, 1	; 8
     218:	80 e3       	ldi	r24, 0x30	; 48
     21a:	88 b9       	out	0x08, r24	; 8
     21c:	42 9a       	sbi	0x08, 2	; 8
     21e:	8f ef       	ldi	r24, 0xFF	; 255
     220:	97 e4       	ldi	r25, 0x47	; 71
     222:	01 97       	sbiw	r24, 0x01	; 1
     224:	f1 f7       	brne	.-4      	; 0x222 <_ZN3LCD7set4bitEv+0x3a>
     226:	00 c0       	rjmp	.+0      	; 0x228 <_ZN3LCD7set4bitEv+0x40>
     228:	00 00       	nop
     22a:	42 98       	cbi	0x08, 2	; 8
     22c:	86 e6       	ldi	r24, 0x66	; 102
     22e:	9e e0       	ldi	r25, 0x0E	; 14
     230:	01 97       	sbiw	r24, 0x01	; 1
     232:	f1 f7       	brne	.-4      	; 0x230 <_ZN3LCD7set4bitEv+0x48>
     234:	00 00       	nop
     236:	40 98       	cbi	0x08, 0	; 8
     238:	41 98       	cbi	0x08, 1	; 8
     23a:	80 e3       	ldi	r24, 0x30	; 48
     23c:	88 b9       	out	0x08, r24	; 8
     23e:	42 9a       	sbi	0x08, 2	; 8
     240:	8f ef       	ldi	r24, 0xFF	; 255
     242:	97 e4       	ldi	r25, 0x47	; 71
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <_ZN3LCD7set4bitEv+0x5c>
     248:	00 c0       	rjmp	.+0      	; 0x24a <_ZN3LCD7set4bitEv+0x62>
     24a:	00 00       	nop
     24c:	42 98       	cbi	0x08, 2	; 8
     24e:	86 e6       	ldi	r24, 0x66	; 102
     250:	9e e0       	ldi	r25, 0x0E	; 14
     252:	01 97       	sbiw	r24, 0x01	; 1
     254:	f1 f7       	brne	.-4      	; 0x252 <_ZN3LCD7set4bitEv+0x6a>
     256:	00 00       	nop
     258:	40 98       	cbi	0x08, 0	; 8
     25a:	41 98       	cbi	0x08, 1	; 8
     25c:	80 e2       	ldi	r24, 0x20	; 32
     25e:	88 b9       	out	0x08, r24	; 8
     260:	42 9a       	sbi	0x08, 2	; 8
     262:	86 e6       	ldi	r24, 0x66	; 102
     264:	9e e0       	ldi	r25, 0x0E	; 14
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <_ZN3LCD7set4bitEv+0x7e>
     26a:	00 00       	nop
     26c:	42 98       	cbi	0x08, 2	; 8
     26e:	08 95       	ret

00000270 <_ZN3LCD12writeCommandEh>:
     270:	88 b1       	in	r24, 0x08	; 8
     272:	8f 70       	andi	r24, 0x0F	; 15
     274:	88 b9       	out	0x08, r24	; 8
     276:	88 b1       	in	r24, 0x08	; 8
     278:	96 2f       	mov	r25, r22
     27a:	90 7f       	andi	r25, 0xF0	; 240
     27c:	89 2b       	or	r24, r25
     27e:	88 b9       	out	0x08, r24	; 8
     280:	40 98       	cbi	0x08, 0	; 8
     282:	41 98       	cbi	0x08, 1	; 8
     284:	42 9a       	sbi	0x08, 2	; 8
     286:	8f ef       	ldi	r24, 0xFF	; 255
     288:	97 e4       	ldi	r25, 0x47	; 71
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	f1 f7       	brne	.-4      	; 0x28a <_ZN3LCD12writeCommandEh+0x1a>
     28e:	00 c0       	rjmp	.+0      	; 0x290 <_ZN3LCD12writeCommandEh+0x20>
     290:	00 00       	nop
     292:	42 98       	cbi	0x08, 2	; 8
     294:	88 b1       	in	r24, 0x08	; 8
     296:	8f 70       	andi	r24, 0x0F	; 15
     298:	88 b9       	out	0x08, r24	; 8
     29a:	88 b1       	in	r24, 0x08	; 8
     29c:	62 95       	swap	r22
     29e:	60 7f       	andi	r22, 0xF0	; 240
     2a0:	68 2b       	or	r22, r24
     2a2:	68 b9       	out	0x08, r22	; 8
     2a4:	40 98       	cbi	0x08, 0	; 8
     2a6:	41 98       	cbi	0x08, 1	; 8
     2a8:	42 9a       	sbi	0x08, 2	; 8
     2aa:	8f ef       	ldi	r24, 0xFF	; 255
     2ac:	97 e4       	ldi	r25, 0x47	; 71
     2ae:	01 97       	sbiw	r24, 0x01	; 1
     2b0:	f1 f7       	brne	.-4      	; 0x2ae <_ZN3LCD12writeCommandEh+0x3e>
     2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <_ZN3LCD12writeCommandEh+0x44>
     2b4:	00 00       	nop
     2b6:	42 98       	cbi	0x08, 2	; 8
     2b8:	08 95       	ret

000002ba <_ZN3LCD4initEv>:
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	ec 01       	movw	r28, r24
     2c0:	86 e6       	ldi	r24, 0x66	; 102
     2c2:	9e e0       	ldi	r25, 0x0E	; 14
     2c4:	01 97       	sbiw	r24, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <_ZN3LCD4initEv+0xa>
     2c8:	00 00       	nop
     2ca:	68 e2       	ldi	r22, 0x28	; 40
     2cc:	ce 01       	movw	r24, r28
     2ce:	d0 df       	rcall	.-96     	; 0x270 <_ZN3LCD12writeCommandEh>
     2d0:	61 e0       	ldi	r22, 0x01	; 1
     2d2:	ce 01       	movw	r24, r28
     2d4:	cd df       	rcall	.-102    	; 0x270 <_ZN3LCD12writeCommandEh>
     2d6:	66 e0       	ldi	r22, 0x06	; 6
     2d8:	ce 01       	movw	r24, r28
     2da:	ca df       	rcall	.-108    	; 0x270 <_ZN3LCD12writeCommandEh>
     2dc:	6e e0       	ldi	r22, 0x0E	; 14
     2de:	ce 01       	movw	r24, r28
     2e0:	c7 df       	rcall	.-114    	; 0x270 <_ZN3LCD12writeCommandEh>
     2e2:	60 e8       	ldi	r22, 0x80	; 128
     2e4:	ce 01       	movw	r24, r28
     2e6:	c4 df       	rcall	.-120    	; 0x270 <_ZN3LCD12writeCommandEh>
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <_ZN3LCDC1Ev>:
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	ec 01       	movw	r28, r24
     2f4:	72 df       	rcall	.-284    	; 0x1da <_ZN3LCD10portConfigEv>
     2f6:	ce 01       	movw	r24, r28
     2f8:	77 df       	rcall	.-274    	; 0x1e8 <_ZN3LCD7set4bitEv>
     2fa:	ce 01       	movw	r24, r28
     2fc:	de df       	rcall	.-68     	; 0x2ba <_ZN3LCD4initEv>
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <_ZN3LCD9writeCharEc>:
     304:	88 b1       	in	r24, 0x08	; 8
     306:	8f 70       	andi	r24, 0x0F	; 15
     308:	88 b9       	out	0x08, r24	; 8
     30a:	88 b1       	in	r24, 0x08	; 8
     30c:	96 2f       	mov	r25, r22
     30e:	90 7f       	andi	r25, 0xF0	; 240
     310:	89 2b       	or	r24, r25
     312:	88 b9       	out	0x08, r24	; 8
     314:	40 9a       	sbi	0x08, 0	; 8
     316:	41 98       	cbi	0x08, 1	; 8
     318:	42 9a       	sbi	0x08, 2	; 8
     31a:	8f ef       	ldi	r24, 0xFF	; 255
     31c:	97 e4       	ldi	r25, 0x47	; 71
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	f1 f7       	brne	.-4      	; 0x31e <_ZN3LCD9writeCharEc+0x1a>
     322:	00 c0       	rjmp	.+0      	; 0x324 <_ZN3LCD9writeCharEc+0x20>
     324:	00 00       	nop
     326:	42 98       	cbi	0x08, 2	; 8
     328:	88 b1       	in	r24, 0x08	; 8
     32a:	8f 70       	andi	r24, 0x0F	; 15
     32c:	88 b9       	out	0x08, r24	; 8
     32e:	88 b1       	in	r24, 0x08	; 8
     330:	62 95       	swap	r22
     332:	60 7f       	andi	r22, 0xF0	; 240
     334:	68 2b       	or	r22, r24
     336:	68 b9       	out	0x08, r22	; 8
     338:	40 9a       	sbi	0x08, 0	; 8
     33a:	41 98       	cbi	0x08, 1	; 8
     33c:	42 9a       	sbi	0x08, 2	; 8
     33e:	8f ef       	ldi	r24, 0xFF	; 255
     340:	97 e4       	ldi	r25, 0x47	; 71
     342:	01 97       	sbiw	r24, 0x01	; 1
     344:	f1 f7       	brne	.-4      	; 0x342 <_ZN3LCD9writeCharEc+0x3e>
     346:	00 c0       	rjmp	.+0      	; 0x348 <_ZN3LCD9writeCharEc+0x44>
     348:	00 00       	nop
     34a:	42 98       	cbi	0x08, 2	; 8
     34c:	08 95       	ret

0000034e <_ZN3LCD4homeEv>:
     34e:	60 e8       	ldi	r22, 0x80	; 128
     350:	8f cf       	rjmp	.-226    	; 0x270 <_ZN3LCD12writeCommandEh>
     352:	08 95       	ret

00000354 <_ZN3LCD5printEPc>:
     354:	0f 93       	push	r16
     356:	1f 93       	push	r17
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	8c 01       	movw	r16, r24
     35e:	eb 01       	movw	r28, r22
     360:	68 81       	ld	r22, Y
     362:	66 23       	and	r22, r22
     364:	31 f0       	breq	.+12     	; 0x372 <_ZN3LCD5printEPc+0x1e>
     366:	21 96       	adiw	r28, 0x01	; 1
     368:	c8 01       	movw	r24, r16
     36a:	cc df       	rcall	.-104    	; 0x304 <_ZN3LCD9writeCharEc>
     36c:	69 91       	ld	r22, Y+
     36e:	61 11       	cpse	r22, r1
     370:	fb cf       	rjmp	.-10     	; 0x368 <_ZN3LCD5printEPc+0x14>
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	08 95       	ret

0000037c <_ZN3LCD5printEPKc>:
     37c:	eb cf       	rjmp	.-42     	; 0x354 <_ZN3LCD5printEPc>
     37e:	08 95       	ret

00000380 <_ZN3LCD6cursorEcc>:
     380:	62 30       	cpi	r22, 0x02	; 2
     382:	69 f0       	breq	.+26     	; 0x39e <_ZN3LCD6cursorEcc+0x1e>
     384:	18 f4       	brcc	.+6      	; 0x38c <_ZN3LCD6cursorEcc+0xc>
     386:	61 30       	cpi	r22, 0x01	; 1
     388:	31 f0       	breq	.+12     	; 0x396 <_ZN3LCD6cursorEcc+0x16>
     38a:	15 c0       	rjmp	.+42     	; 0x3b6 <_ZN3LCD6cursorEcc+0x36>
     38c:	63 30       	cpi	r22, 0x03	; 3
     38e:	59 f0       	breq	.+22     	; 0x3a6 <_ZN3LCD6cursorEcc+0x26>
     390:	64 30       	cpi	r22, 0x04	; 4
     392:	69 f0       	breq	.+26     	; 0x3ae <_ZN3LCD6cursorEcc+0x2e>
     394:	10 c0       	rjmp	.+32     	; 0x3b6 <_ZN3LCD6cursorEcc+0x36>
     396:	6f e7       	ldi	r22, 0x7F	; 127
     398:	64 0f       	add	r22, r20
     39a:	6a cf       	rjmp	.-300    	; 0x270 <_ZN3LCD12writeCommandEh>
     39c:	08 95       	ret
     39e:	6f eb       	ldi	r22, 0xBF	; 191
     3a0:	64 0f       	add	r22, r20
     3a2:	66 cf       	rjmp	.-308    	; 0x270 <_ZN3LCD12writeCommandEh>
     3a4:	08 95       	ret
     3a6:	63 e9       	ldi	r22, 0x93	; 147
     3a8:	64 0f       	add	r22, r20
     3aa:	62 cf       	rjmp	.-316    	; 0x270 <_ZN3LCD12writeCommandEh>
     3ac:	08 95       	ret
     3ae:	63 ed       	ldi	r22, 0xD3	; 211
     3b0:	64 0f       	add	r22, r20
     3b2:	5e cf       	rjmp	.-324    	; 0x270 <_ZN3LCD12writeCommandEh>
     3b4:	08 95       	ret
     3b6:	61 11       	cpse	r22, r1
     3b8:	03 c0       	rjmp	.+6      	; 0x3c0 <_ZN3LCD6cursorEcc+0x40>
     3ba:	41 11       	cpse	r20, r1
     3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <_ZN3LCD6cursorEcc+0x40>
     3be:	c7 cf       	rjmp	.-114    	; 0x34e <_ZN3LCD4homeEv>
     3c0:	08 95       	ret

000003c2 <_ZN3LCD5printEc>:
void LCD::print(char c)
{
	writeChar(c);
     3c2:	a0 cf       	rjmp	.-192    	; 0x304 <_ZN3LCD9writeCharEc>
     3c4:	08 95       	ret

000003c6 <_ZN11morsebuzzer15buzzerPinConfigEv>:
	timeofdit=t;
	buzzerPinConfig();
}
void morsebuzzer::buzzerPinConfig()
{
	DDRC|=0x08;
     3c6:	3b 9a       	sbi	0x07, 3	; 7
	PORTC&=~0x08;		//set it initially low
     3c8:	43 98       	cbi	0x08, 3	; 8
     3ca:	08 95       	ret

000003cc <_ZN11morsebuzzerC1Ei>:
//between two consecutive letters : 3*dit time
//between two consecutive words	: 7*dit time

morsebuzzer::morsebuzzer (int t)
{
	timeofdit=t;
     3cc:	fc 01       	movw	r30, r24
     3ce:	71 83       	std	Z+1, r23	; 0x01
     3d0:	60 83       	st	Z, r22
	buzzerPinConfig();
     3d2:	f9 cf       	rjmp	.-14     	; 0x3c6 <_ZN11morsebuzzer15buzzerPinConfigEv>
     3d4:	08 95       	ret

000003d6 <_ZN11morsebuzzer8buzzerOnEv>:
		buzzerOff();
		delay(timeofdit);
}
void morsebuzzer::buzzerOn()
{
	PORTC|=0x08;		//set buzzer on 
     3d6:	43 9a       	sbi	0x08, 3	; 8
     3d8:	08 95       	ret

000003da <_ZN11morsebuzzer9buzzerOffEv>:
}
void morsebuzzer::buzzerOff()
{
	PORTC&=~0x08;	//set buzzer off
     3da:	43 98       	cbi	0x08, 3	; 8
     3dc:	08 95       	ret

000003de <_ZN11morsebuzzer5delayEi>:
}
void morsebuzzer::delay(int time_ms)
{
	while(time_ms--)
     3de:	61 15       	cp	r22, r1
     3e0:	71 05       	cpc	r23, r1
     3e2:	51 f0       	breq	.+20     	; 0x3f8 <_ZN11morsebuzzer5delayEi+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3e4:	86 e6       	ldi	r24, 0x66	; 102
     3e6:	9e e0       	ldi	r25, 0x0E	; 14
     3e8:	01 97       	sbiw	r24, 0x01	; 1
     3ea:	f1 f7       	brne	.-4      	; 0x3e8 <_ZN11morsebuzzer5delayEi+0xa>
     3ec:	00 00       	nop
     3ee:	61 50       	subi	r22, 0x01	; 1
     3f0:	71 09       	sbc	r23, r1
     3f2:	61 15       	cp	r22, r1
     3f4:	71 05       	cpc	r23, r1
     3f6:	b1 f7       	brne	.-20     	; 0x3e4 <_ZN11morsebuzzer5delayEi+0x6>
     3f8:	08 95       	ret

000003fa <_ZN11morsebuzzer11transmitDitEv>:
void morsebuzzer::morseTransmit(const char * str)
{
	morseTransmit((char*)str);
}
void morsebuzzer::transmitDit()
{
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	ec 01       	movw	r28, r24
	buzzerOn();
     400:	ea df       	rcall	.-44     	; 0x3d6 <_ZN11morsebuzzer8buzzerOnEv>
	delay(timeofdit);
     402:	68 81       	ld	r22, Y
     404:	79 81       	ldd	r23, Y+1	; 0x01
     406:	ce 01       	movw	r24, r28
     408:	ea df       	rcall	.-44     	; 0x3de <_ZN11morsebuzzer5delayEi>
	buzzerOff();
     40a:	ce 01       	movw	r24, r28
     40c:	e6 df       	rcall	.-52     	; 0x3da <_ZN11morsebuzzer9buzzerOffEv>
	delay(timeofdit);
     40e:	68 81       	ld	r22, Y
     410:	79 81       	ldd	r23, Y+1	; 0x01
     412:	ce 01       	movw	r24, r28
     414:	e4 df       	rcall	.-56     	; 0x3de <_ZN11morsebuzzer5delayEi>
	
}
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	08 95       	ret

0000041c <_ZN11morsebuzzer11transmitDahEv>:
void morsebuzzer::transmitDah()
{
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	ec 01       	movw	r28, r24
		buzzerOn();
     422:	d9 df       	rcall	.-78     	; 0x3d6 <_ZN11morsebuzzer8buzzerOnEv>
		delay(3*timeofdit);
     424:	88 81       	ld	r24, Y
     426:	99 81       	ldd	r25, Y+1	; 0x01
     428:	bc 01       	movw	r22, r24
     42a:	66 0f       	add	r22, r22
     42c:	77 1f       	adc	r23, r23
     42e:	68 0f       	add	r22, r24
     430:	79 1f       	adc	r23, r25
     432:	ce 01       	movw	r24, r28
     434:	d4 df       	rcall	.-88     	; 0x3de <_ZN11morsebuzzer5delayEi>
		buzzerOff();
     436:	ce 01       	movw	r24, r28
     438:	d0 df       	rcall	.-96     	; 0x3da <_ZN11morsebuzzer9buzzerOffEv>
		delay(timeofdit);
     43a:	68 81       	ld	r22, Y
     43c:	79 81       	ldd	r23, Y+1	; 0x01
     43e:	ce 01       	movw	r24, r28
     440:	ce df       	rcall	.-100    	; 0x3de <_ZN11morsebuzzer5delayEi>
}
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	08 95       	ret

00000448 <_ZN11morsebuzzer13morseTransmitEc>:
	PORTC&=~0x08;		//set it initially low
}


void morsebuzzer::morseTransmit(char data)
{
     448:	af 92       	push	r10
     44a:	bf 92       	push	r11
     44c:	cf 92       	push	r12
     44e:	df 92       	push	r13
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	cd b7       	in	r28, 0x3d	; 61
     45e:	de b7       	in	r29, 0x3e	; 62
     460:	27 97       	sbiw	r28, 0x07	; 7
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	f8 94       	cli
     466:	de bf       	out	0x3e, r29	; 62
     468:	0f be       	out	0x3f, r0	; 63
     46a:	cd bf       	out	0x3d, r28	; 61
     46c:	5c 01       	movw	r10, r24
	char str1[7];
    int j=0;
	
		
		switch(toupper(data))
     46e:	86 2f       	mov	r24, r22
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	1d d7       	rcall	.+3642   	; 0x12ae <toupper>
     474:	80 97       	sbiw	r24, 0x20	; 32
     476:	8a 35       	cpi	r24, 0x5A	; 90
     478:	91 05       	cpc	r25, r1
     47a:	08 f0       	brcs	.+2      	; 0x47e <_ZN11morsebuzzer13morseTransmitEc+0x36>
     47c:	70 c1       	rjmp	.+736    	; 0x75e <_ZN11morsebuzzer13morseTransmitEc+0x316>
     47e:	8e 58       	subi	r24, 0x8E	; 142
     480:	9f 4f       	sbci	r25, 0xFF	; 255
     482:	fc 01       	movw	r30, r24
     484:	0e c7       	rjmp	.+3612   	; 0x12a2 <__tablejump2__>
		{
			  case ' ':					//if space ie , 7 dits buzzer=>low
			  buzzerOff();
     486:	c5 01       	movw	r24, r10
     488:	a8 df       	rcall	.-176    	; 0x3da <_ZN11morsebuzzer9buzzerOffEv>
			  delay(timeofdit*7);
     48a:	f5 01       	movw	r30, r10
     48c:	80 81       	ld	r24, Z
     48e:	91 81       	ldd	r25, Z+1	; 0x01
     490:	bc 01       	movw	r22, r24
     492:	66 0f       	add	r22, r22
     494:	77 1f       	adc	r23, r23
     496:	66 0f       	add	r22, r22
     498:	77 1f       	adc	r23, r23
     49a:	66 0f       	add	r22, r22
     49c:	77 1f       	adc	r23, r23
     49e:	68 1b       	sub	r22, r24
     4a0:	79 0b       	sbc	r23, r25
     4a2:	c5 01       	movw	r24, r10
     4a4:	9c df       	rcall	.-200    	; 0x3de <_ZN11morsebuzzer5delayEi>
     4a6:	87 c1       	rjmp	.+782    	; 0x7b6 <_ZN11morsebuzzer13morseTransmitEc+0x36e>
			  return;					//return for end of transmission
			  case 'A':
			  str1[j++]='1';
     4a8:	81 e3       	ldi	r24, 0x31	; 49
     4aa:	89 83       	std	Y+1, r24	; 0x01
			  str1[j]='3';
     4ac:	83 e3       	ldi	r24, 0x33	; 51
     4ae:	8a 83       	std	Y+2, r24	; 0x02
			  case ' ':					//if space ie , 7 dits buzzer=>low
			  buzzerOff();
			  delay(timeofdit*7);
			  return;					//return for end of transmission
			  case 'A':
			  str1[j++]='1';
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     4b4:	72 c1       	rjmp	.+740    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'B':
			  str1[j++]='3';
     4b6:	83 e3       	ldi	r24, 0x33	; 51
     4b8:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     4ba:	81 e3       	ldi	r24, 0x31	; 49
     4bc:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
     4be:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='1';
     4c0:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case 'B':
			  str1[j++]='3';
			  str1[j++]='1';
			  str1[j++]='1';
     4c2:	83 e0       	ldi	r24, 0x03	; 3
     4c4:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     4c6:	69 c1       	rjmp	.+722    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'C':
			  str1[j++]='3';
     4c8:	93 e3       	ldi	r25, 0x33	; 51
     4ca:	99 83       	std	Y+1, r25	; 0x01
			  str1[j++]='1';
     4cc:	81 e3       	ldi	r24, 0x31	; 49
     4ce:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='3';
     4d0:	9b 83       	std	Y+3, r25	; 0x03
			  str1[j]='1';
     4d2:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case 'C':
			  str1[j++]='3';
			  str1[j++]='1';
			  str1[j++]='3';
     4d4:	83 e0       	ldi	r24, 0x03	; 3
     4d6:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     4d8:	60 c1       	rjmp	.+704    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'D':
			  str1[j++]='3';
     4da:	83 e3       	ldi	r24, 0x33	; 51
     4dc:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     4de:	81 e3       	ldi	r24, 0x31	; 49
     4e0:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j]='1';
     4e2:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='1';
			  break;
			  
			  case 'D':
			  str1[j++]='3';
			  str1[j++]='1';
     4e4:	82 e0       	ldi	r24, 0x02	; 2
     4e6:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     4e8:	58 c1       	rjmp	.+688    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'E':
			  str1[j]='1';
     4ea:	81 e3       	ldi	r24, 0x31	; 49
     4ec:	89 83       	std	Y+1, r24	; 0x01


void morsebuzzer::morseTransmit(char data)
{
	char str1[7];
    int j=0;
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
			  
			  case 'E':
			  str1[j]='1';
			  break;
     4f2:	53 c1       	rjmp	.+678    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'F':
			  str1[j++]='1';
     4f4:	81 e3       	ldi	r24, 0x31	; 49
     4f6:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     4f8:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='3';
     4fa:	93 e3       	ldi	r25, 0x33	; 51
     4fc:	9b 83       	std	Y+3, r25	; 0x03
			  str1[j]='1';
     4fe:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case 'F':
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='3';
     500:	83 e0       	ldi	r24, 0x03	; 3
     502:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     504:	4a c1       	rjmp	.+660    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'G':
			  str1[j++]='3';
     506:	83 e3       	ldi	r24, 0x33	; 51
     508:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     50a:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j]='1';
     50c:	81 e3       	ldi	r24, 0x31	; 49
     50e:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='1';
			  break;
			  
			  case 'G':
			  str1[j++]='3';
			  str1[j++]='3';
     510:	82 e0       	ldi	r24, 0x02	; 2
     512:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     514:	42 c1       	rjmp	.+644    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'H':
			  str1[j++]='1';
     516:	81 e3       	ldi	r24, 0x31	; 49
     518:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     51a:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
     51c:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='1';
     51e:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case 'H':
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='1';
     520:	83 e0       	ldi	r24, 0x03	; 3
     522:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     524:	3a c1       	rjmp	.+628    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'I':
			  str1[j++]='1';
     526:	81 e3       	ldi	r24, 0x31	; 49
     528:	89 83       	std	Y+1, r24	; 0x01
			  str1[j]='1';
     52a:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
			  str1[j]='1';
			  break;
			  
			  case 'I':
			  str1[j++]='1';
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     530:	34 c1       	rjmp	.+616    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'J':
			  str1[j++]='1';
     532:	81 e3       	ldi	r24, 0x31	; 49
     534:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     536:	83 e3       	ldi	r24, 0x33	; 51
     538:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='3';
     53a:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='3';
     53c:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case 'J':
			  str1[j++]='1';
			  str1[j++]='3';
			  str1[j++]='3';
     53e:	83 e0       	ldi	r24, 0x03	; 3
     540:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     542:	2b c1       	rjmp	.+598    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'K':
			  str1[j++]='3';
     544:	83 e3       	ldi	r24, 0x33	; 51
     546:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     548:	91 e3       	ldi	r25, 0x31	; 49
     54a:	9a 83       	std	Y+2, r25	; 0x02
			  str1[j]='3';
     54c:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='3';
			  break;
			  
			  case 'K':
			  str1[j++]='3';
			  str1[j++]='1';
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     552:	23 c1       	rjmp	.+582    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'L':
			  str1[j++]='1';
     554:	81 e3       	ldi	r24, 0x31	; 49
     556:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     558:	93 e3       	ldi	r25, 0x33	; 51
     55a:	9a 83       	std	Y+2, r25	; 0x02
			  str1[j++]='1';
     55c:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='1';
     55e:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case 'L':
			  str1[j++]='1';
			  str1[j++]='3';
			  str1[j++]='1';
     560:	83 e0       	ldi	r24, 0x03	; 3
     562:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     564:	1a c1       	rjmp	.+564    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'M':
			  str1[j++]='3';
     566:	83 e3       	ldi	r24, 0x33	; 51
     568:	89 83       	std	Y+1, r24	; 0x01
			  str1[j]='3';
     56a:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
			  str1[j]='1';
			  break;
			  
			  case 'M':
			  str1[j++]='3';
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     570:	14 c1       	rjmp	.+552    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'N':
			  str1[j++]='3';
     572:	83 e3       	ldi	r24, 0x33	; 51
     574:	89 83       	std	Y+1, r24	; 0x01
			  str1[j]='1';
     576:	81 e3       	ldi	r24, 0x31	; 49
     578:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='3';
			  str1[j]='3';
			  break;
			  
			  case 'N':
			  str1[j++]='3';
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     57e:	0d c1       	rjmp	.+538    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'O':
			  str1[j++]='3';
     580:	83 e3       	ldi	r24, 0x33	; 51
     582:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     584:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j]='3';
     586:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='1';
			  break;
			  
			  case 'O':
			  str1[j++]='3';
			  str1[j++]='3';
     588:	82 e0       	ldi	r24, 0x02	; 2
     58a:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     58c:	06 c1       	rjmp	.+524    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'P':
			  str1[j++]='1';
     58e:	81 e3       	ldi	r24, 0x31	; 49
     590:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     592:	93 e3       	ldi	r25, 0x33	; 51
     594:	9a 83       	std	Y+2, r25	; 0x02
			  str1[j++]='3';
     596:	9b 83       	std	Y+3, r25	; 0x03
			  str1[j]='1';
     598:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case 'P':
			  str1[j++]='1';
			  str1[j++]='3';
			  str1[j++]='3';
     59a:	83 e0       	ldi	r24, 0x03	; 3
     59c:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     59e:	fd c0       	rjmp	.+506    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'Q':
			  str1[j++]='3';
     5a0:	83 e3       	ldi	r24, 0x33	; 51
     5a2:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     5a4:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
     5a6:	91 e3       	ldi	r25, 0x31	; 49
     5a8:	9b 83       	std	Y+3, r25	; 0x03
			  str1[j]='3';
     5aa:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case 'Q':
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='1';
     5ac:	83 e0       	ldi	r24, 0x03	; 3
     5ae:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     5b0:	f4 c0       	rjmp	.+488    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'R':
			  str1[j++]='1';
     5b2:	81 e3       	ldi	r24, 0x31	; 49
     5b4:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     5b6:	93 e3       	ldi	r25, 0x33	; 51
     5b8:	9a 83       	std	Y+2, r25	; 0x02
			  str1[j]='1';
     5ba:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='3';
			  break;
			  
			  case 'R':
			  str1[j++]='1';
			  str1[j++]='3';
     5bc:	82 e0       	ldi	r24, 0x02	; 2
     5be:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     5c0:	ec c0       	rjmp	.+472    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'S':
			  str1[j++]='1';
     5c2:	81 e3       	ldi	r24, 0x31	; 49
     5c4:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     5c6:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j]='1';
     5c8:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='1';
			  break;
			  
			  case 'S':
			  str1[j++]='1';
			  str1[j++]='1';
     5ca:	82 e0       	ldi	r24, 0x02	; 2
     5cc:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     5ce:	e5 c0       	rjmp	.+458    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'T':
			  str1[j]='3';
     5d0:	83 e3       	ldi	r24, 0x33	; 51
     5d2:	89 83       	std	Y+1, r24	; 0x01


void morsebuzzer::morseTransmit(char data)
{
	char str1[7];
    int j=0;
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
			  
			  case 'T':
			  str1[j]='3';
			  break;
     5d8:	e0 c0       	rjmp	.+448    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'U':
			  str1[j++]='1';
     5da:	81 e3       	ldi	r24, 0x31	; 49
     5dc:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     5de:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j]='3';
     5e0:	83 e3       	ldi	r24, 0x33	; 51
     5e2:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='3';
			  break;
			  
			  case 'U':
			  str1[j++]='1';
			  str1[j++]='1';
     5e4:	82 e0       	ldi	r24, 0x02	; 2
     5e6:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     5e8:	d8 c0       	rjmp	.+432    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'V':
			  str1[j++]='1';
     5ea:	81 e3       	ldi	r24, 0x31	; 49
     5ec:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     5ee:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
     5f0:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='3';
     5f2:	83 e3       	ldi	r24, 0x33	; 51
     5f4:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case 'V':
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='1';
     5f6:	83 e0       	ldi	r24, 0x03	; 3
     5f8:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     5fa:	cf c0       	rjmp	.+414    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'W':
			  str1[j++]='1';
     5fc:	81 e3       	ldi	r24, 0x31	; 49
     5fe:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     600:	83 e3       	ldi	r24, 0x33	; 51
     602:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j]='3';
     604:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='3';
			  break;
			  
			  case 'W':
			  str1[j++]='1';
			  str1[j++]='3';
     606:	82 e0       	ldi	r24, 0x02	; 2
     608:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     60a:	c7 c0       	rjmp	.+398    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'X':
			  str1[j++]='3';
     60c:	83 e3       	ldi	r24, 0x33	; 51
     60e:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     610:	91 e3       	ldi	r25, 0x31	; 49
     612:	9a 83       	std	Y+2, r25	; 0x02
			  str1[j++]='1';
     614:	9b 83       	std	Y+3, r25	; 0x03
			  str1[j]='3';
     616:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case 'X':
			  str1[j++]='3';
			  str1[j++]='1';
			  str1[j++]='1';
     618:	83 e0       	ldi	r24, 0x03	; 3
     61a:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     61c:	be c0       	rjmp	.+380    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'y':
			  str1[j++]='3';
     61e:	83 e3       	ldi	r24, 0x33	; 51
     620:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     622:	91 e3       	ldi	r25, 0x31	; 49
     624:	9a 83       	std	Y+2, r25	; 0x02
			  str1[j++]='3';
     626:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='3';
     628:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case 'y':
			  str1[j++]='3';
			  str1[j++]='1';
			  str1[j++]='3';
     62a:	83 e0       	ldi	r24, 0x03	; 3
     62c:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     62e:	b5 c0       	rjmp	.+362    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case 'Z':
			  str1[j++]='3';
     630:	83 e3       	ldi	r24, 0x33	; 51
     632:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     634:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
     636:	81 e3       	ldi	r24, 0x31	; 49
     638:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j]='1';
     63a:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case 'Z':
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='1';
     63c:	83 e0       	ldi	r24, 0x03	; 3
     63e:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     640:	ac c0       	rjmp	.+344    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case '0':
			  str1[j++]='3';
     642:	83 e3       	ldi	r24, 0x33	; 51
     644:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     646:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='3';
     648:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j++]='3';
     64a:	8c 83       	std	Y+4, r24	; 0x04
			  str1[j]='3';
     64c:	8d 83       	std	Y+5, r24	; 0x05
			  
			  case '0':
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='3';
     64e:	84 e0       	ldi	r24, 0x04	; 4
     650:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     652:	a3 c0       	rjmp	.+326    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case '1':
			  str1[j++]='1';
     654:	81 e3       	ldi	r24, 0x31	; 49
     656:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     658:	83 e3       	ldi	r24, 0x33	; 51
     65a:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='3';
     65c:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j++]='3';
     65e:	8c 83       	std	Y+4, r24	; 0x04
			  str1[j]='3';
     660:	8d 83       	std	Y+5, r24	; 0x05
			  
			  case '1':
			  str1[j++]='1';
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='3';
     662:	84 e0       	ldi	r24, 0x04	; 4
     664:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     666:	99 c0       	rjmp	.+306    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case '2':
			  str1[j++]='1';
     668:	81 e3       	ldi	r24, 0x31	; 49
     66a:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     66c:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='3';
     66e:	83 e3       	ldi	r24, 0x33	; 51
     670:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j+1]='3';
     672:	8d 83       	std	Y+5, r24	; 0x05
			  str1[j]='3';
     674:	8c 83       	std	Y+4, r24	; 0x04
			  break;
			  
			  case '2':
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='3';
     676:	83 e0       	ldi	r24, 0x03	; 3
     678:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j+1]='3';
			  str1[j]='3';
			  break;
     67a:	8f c0       	rjmp	.+286    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case '3':
			  str1[j++]='1';
     67c:	81 e3       	ldi	r24, 0x31	; 49
     67e:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     680:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
     682:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j++]='3';
     684:	83 e3       	ldi	r24, 0x33	; 51
     686:	8c 83       	std	Y+4, r24	; 0x04
			  str1[j]='3';
     688:	8d 83       	std	Y+5, r24	; 0x05
			  
			  case '3':
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='3';
     68a:	84 e0       	ldi	r24, 0x04	; 4
     68c:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     68e:	85 c0       	rjmp	.+266    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  
			  case '4':
			  str1[j++]='1';
     690:	81 e3       	ldi	r24, 0x31	; 49
     692:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     694:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
     696:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j++]='1';
     698:	8c 83       	std	Y+4, r24	; 0x04
			  str1[j]='3';
     69a:	83 e3       	ldi	r24, 0x33	; 51
     69c:	8d 83       	std	Y+5, r24	; 0x05
			  
			  case '4':
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='1';
     69e:	84 e0       	ldi	r24, 0x04	; 4
     6a0:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     6a2:	7b c0       	rjmp	.+246    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case '5':
			  str1[j++]='1';
     6a4:	81 e3       	ldi	r24, 0x31	; 49
     6a6:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     6a8:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
     6aa:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j++]='1';
     6ac:	8c 83       	std	Y+4, r24	; 0x04
			  str1[j]='1';
     6ae:	8d 83       	std	Y+5, r24	; 0x05
			  
			  case '5':
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='1';
     6b0:	84 e0       	ldi	r24, 0x04	; 4
     6b2:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     6b4:	72 c0       	rjmp	.+228    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case '6':
			  str1[j++]='3';
     6b6:	83 e3       	ldi	r24, 0x33	; 51
     6b8:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     6ba:	81 e3       	ldi	r24, 0x31	; 49
     6bc:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
     6be:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j++]='1';
     6c0:	8c 83       	std	Y+4, r24	; 0x04
			  str1[j]='1';
     6c2:	8d 83       	std	Y+5, r24	; 0x05
			  
			  case '6':
			  str1[j++]='3';
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='1';
     6c4:	84 e0       	ldi	r24, 0x04	; 4
     6c6:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     6c8:	68 c0       	rjmp	.+208    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case '7':
			  str1[j++]='3';
     6ca:	83 e3       	ldi	r24, 0x33	; 51
     6cc:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     6ce:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
     6d0:	81 e3       	ldi	r24, 0x31	; 49
     6d2:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j++]='1';
     6d4:	8c 83       	std	Y+4, r24	; 0x04
			  str1[j]='1';
     6d6:	8d 83       	std	Y+5, r24	; 0x05
			  
			  case '7':
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='1';
			  str1[j++]='1';
     6d8:	84 e0       	ldi	r24, 0x04	; 4
     6da:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     6dc:	5e c0       	rjmp	.+188    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case '8':
			  str1[j++]='3';
     6de:	83 e3       	ldi	r24, 0x33	; 51
     6e0:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     6e2:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='3';
     6e4:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j++]='1';
     6e6:	81 e3       	ldi	r24, 0x31	; 49
     6e8:	8c 83       	std	Y+4, r24	; 0x04
			  str1[j]='1';
     6ea:	8d 83       	std	Y+5, r24	; 0x05
			  
			  case '8':
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='1';
     6ec:	84 e0       	ldi	r24, 0x04	; 4
     6ee:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     6f0:	54 c0       	rjmp	.+168    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case '9':
			  str1[j++]='3';
     6f2:	83 e3       	ldi	r24, 0x33	; 51
     6f4:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     6f6:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='3';
     6f8:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j++]='3';
     6fa:	8c 83       	std	Y+4, r24	; 0x04
			  str1[j]='1';
     6fc:	81 e3       	ldi	r24, 0x31	; 49
     6fe:	8d 83       	std	Y+5, r24	; 0x05
			  
			  case '9':
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='3';
     700:	84 e0       	ldi	r24, 0x04	; 4
     702:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     704:	4a c0       	rjmp	.+148    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case '.':
			  str1[j++]='1';
     706:	91 e3       	ldi	r25, 0x31	; 49
     708:	99 83       	std	Y+1, r25	; 0x01
			  str1[j++]='3';
     70a:	83 e3       	ldi	r24, 0x33	; 51
     70c:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
     70e:	9b 83       	std	Y+3, r25	; 0x03
			  str1[j++]='3';
     710:	8c 83       	std	Y+4, r24	; 0x04
			  str1[j++]='1';
     712:	9d 83       	std	Y+5, r25	; 0x05
			  str1[j]='3';
     714:	8e 83       	std	Y+6, r24	; 0x06
			  case '.':
			  str1[j++]='1';
			  str1[j++]='3';
			  str1[j++]='1';
			  str1[j++]='3';
			  str1[j++]='1';
     716:	85 e0       	ldi	r24, 0x05	; 5
     718:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     71a:	3f c0       	rjmp	.+126    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case ',':
			  str1[j++]='3';
     71c:	83 e3       	ldi	r24, 0x33	; 51
     71e:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     720:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='1';
     722:	91 e3       	ldi	r25, 0x31	; 49
     724:	9b 83       	std	Y+3, r25	; 0x03
			  str1[j++]='1';
     726:	9c 83       	std	Y+4, r25	; 0x04
			  str1[j++]='3';
     728:	8d 83       	std	Y+5, r24	; 0x05
			  str1[j]='3';
     72a:	8e 83       	std	Y+6, r24	; 0x06
			  case ',':
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='3';
     72c:	85 e0       	ldi	r24, 0x05	; 5
     72e:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='3';
			  break;
     730:	34 c0       	rjmp	.+104    	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case ':':
			  str1[j++]='3';
     732:	83 e3       	ldi	r24, 0x33	; 51
     734:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='3';
     736:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='3';
     738:	8b 83       	std	Y+3, r24	; 0x03
			  str1[j++]='1';
     73a:	81 e3       	ldi	r24, 0x31	; 49
     73c:	8c 83       	std	Y+4, r24	; 0x04
			  str1[j++]='1';
     73e:	8d 83       	std	Y+5, r24	; 0x05
			  str1[j]='1';
     740:	8e 83       	std	Y+6, r24	; 0x06
			  case ':':
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='1';
			  str1[j++]='1';
     742:	85 e0       	ldi	r24, 0x05	; 5
     744:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     746:	29 c0       	rjmp	.+82     	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  
			  case '?':
			  str1[j++]='1';
     748:	81 e3       	ldi	r24, 0x31	; 49
     74a:	89 83       	std	Y+1, r24	; 0x01
			  str1[j++]='1';
     74c:	8a 83       	std	Y+2, r24	; 0x02
			  str1[j++]='3';
     74e:	93 e3       	ldi	r25, 0x33	; 51
     750:	9b 83       	std	Y+3, r25	; 0x03
			  str1[j++]='3';
     752:	9c 83       	std	Y+4, r25	; 0x04
			  str1[j++]='1';
     754:	8d 83       	std	Y+5, r24	; 0x05
			  str1[j]='1';
     756:	8e 83       	std	Y+6, r24	; 0x06
			  case '?':
			  str1[j++]='1';
			  str1[j++]='1';
			  str1[j++]='3';
			  str1[j++]='3';
			  str1[j++]='1';
     758:	85 e0       	ldi	r24, 0x05	; 5
     75a:	90 e0       	ldi	r25, 0x00	; 0
			  str1[j]='1';
			  break;
     75c:	1e c0       	rjmp	.+60     	; 0x79a <_ZN11morsebuzzer13morseTransmitEc+0x352>
			  default:
			  break;
		}
	    j++;
	
	str1[j]='\0';
     75e:	1a 82       	std	Y+2, r1	; 0x02
			  break;
			  
			  default:
			  break;
		}
	    j++;
     760:	cc 24       	eor	r12, r12
     762:	c3 94       	inc	r12
     764:	d1 2c       	mov	r13, r1
     766:	21 c0       	rjmp	.+66     	; 0x7aa <_ZN11morsebuzzer13morseTransmitEc+0x362>
	
	str1[j]='\0';
	for(int i=0;i<j;i++)
	{
		if(str1[i]=='1')
     768:	f7 01       	movw	r30, r14
     76a:	81 91       	ld	r24, Z+
     76c:	7f 01       	movw	r14, r30
     76e:	81 33       	cpi	r24, 0x31	; 49
     770:	19 f4       	brne	.+6      	; 0x778 <_ZN11morsebuzzer13morseTransmitEc+0x330>
		{
		transmitDit();	
     772:	c5 01       	movw	r24, r10
     774:	42 de       	rcall	.-892    	; 0x3fa <_ZN11morsebuzzer11transmitDitEv>
     776:	04 c0       	rjmp	.+8      	; 0x780 <_ZN11morsebuzzer13morseTransmitEc+0x338>
		}
		else if(str1[i]=='3')
     778:	83 33       	cpi	r24, 0x33	; 51
     77a:	11 f4       	brne	.+4      	; 0x780 <_ZN11morsebuzzer13morseTransmitEc+0x338>
		{
		transmitDah();
     77c:	c5 01       	movw	r24, r10
     77e:	4e de       	rcall	.-868    	; 0x41c <_ZN11morsebuzzer11transmitDahEv>
			  break;
		}
	    j++;
	
	str1[j]='\0';
	for(int i=0;i<j;i++)
     780:	0f 5f       	subi	r16, 0xFF	; 255
     782:	1f 4f       	sbci	r17, 0xFF	; 255
     784:	0c 15       	cp	r16, r12
     786:	1d 05       	cpc	r17, r13
     788:	7c f3       	brlt	.-34     	; 0x768 <_ZN11morsebuzzer13morseTransmitEc+0x320>
		{
		transmitDah();
		}
		else continue;
	}
	delay(2*timeofdit);			//end of transmission
     78a:	f5 01       	movw	r30, r10
     78c:	60 81       	ld	r22, Z
     78e:	71 81       	ldd	r23, Z+1	; 0x01
     790:	66 0f       	add	r22, r22
     792:	77 1f       	adc	r23, r23
     794:	c5 01       	movw	r24, r10
     796:	23 de       	rcall	.-954    	; 0x3de <_ZN11morsebuzzer5delayEi>
     798:	0e c0       	rjmp	.+28     	; 0x7b6 <_ZN11morsebuzzer13morseTransmitEc+0x36e>
			  break;
			  
			  default:
			  break;
		}
	    j++;
     79a:	6c 01       	movw	r12, r24
     79c:	ff ef       	ldi	r31, 0xFF	; 255
     79e:	cf 1a       	sub	r12, r31
     7a0:	df 0a       	sbc	r13, r31
	
	str1[j]='\0';
     7a2:	fe 01       	movw	r30, r28
     7a4:	ec 0d       	add	r30, r12
     7a6:	fd 1d       	adc	r31, r13
     7a8:	11 82       	std	Z+1, r1	; 0x01
     7aa:	ce 01       	movw	r24, r28
     7ac:	01 96       	adiw	r24, 0x01	; 1
     7ae:	7c 01       	movw	r14, r24
	PORTC&=~0x08;		//set it initially low
}


void morsebuzzer::morseTransmit(char data)
{
     7b0:	00 e0       	ldi	r16, 0x00	; 0
     7b2:	10 e0       	ldi	r17, 0x00	; 0
     7b4:	d9 cf       	rjmp	.-78     	; 0x768 <_ZN11morsebuzzer13morseTransmitEc+0x320>
	transmitDah();
	transmitDah();
	delay(2*timeofdit);			//2*tDit because one dit time delay occured in transmit sequence =>>total 3*tDit between letters
	
	*/
}
     7b6:	27 96       	adiw	r28, 0x07	; 7
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	f8 94       	cli
     7bc:	de bf       	out	0x3e, r29	; 62
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	cd bf       	out	0x3d, r28	; 61
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	df 90       	pop	r13
     7d0:	cf 90       	pop	r12
     7d2:	bf 90       	pop	r11
     7d4:	af 90       	pop	r10
     7d6:	08 95       	ret

000007d8 <_ZN11morsebuzzer13morseTransmitEPc>:
void morsebuzzer::morseTransmit( char* str)
{
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	8c 01       	movw	r16, r24
     7e2:	eb 01       	movw	r28, r22
	while(*str)
     7e4:	68 81       	ld	r22, Y
     7e6:	66 23       	and	r22, r22
     7e8:	31 f0       	breq	.+12     	; 0x7f6 <_ZN11morsebuzzer13morseTransmitEPc+0x1e>
     7ea:	21 96       	adiw	r28, 0x01	; 1
	{
		morseTransmit((char)(*str));
     7ec:	c8 01       	movw	r24, r16
     7ee:	2c de       	rcall	.-936    	; 0x448 <_ZN11morsebuzzer13morseTransmitEc>
	
	*/
}
void morsebuzzer::morseTransmit( char* str)
{
	while(*str)
     7f0:	69 91       	ld	r22, Y+
     7f2:	61 11       	cpse	r22, r1
     7f4:	fb cf       	rjmp	.-10     	; 0x7ec <_ZN11morsebuzzer13morseTransmitEPc+0x14>
	{
		morseTransmit((char)(*str));
		str++;
	}
}
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	08 95       	ret

00000800 <_ZN11morsebuzzer13morseTransmitEPKc>:

void morsebuzzer::morseTransmit(const char * str)
{
	morseTransmit((char*)str);
     800:	eb cf       	rjmp	.-42     	; 0x7d8 <_ZN11morsebuzzer13morseTransmitEPc>
     802:	08 95       	ret

00000804 <_ZN7decoderC1Ev>:
 *  
 */ 

#include "morseToText.h"

decoder::decoder()
     804:	dc 01       	movw	r26, r24
     806:	8f e3       	ldi	r24, 0x3F	; 63
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	8d 93       	st	X+, r24
     80c:	9d 93       	st	X+, r25
     80e:	e0 e0       	ldi	r30, 0x00	; 0
     810:	f2 e0       	ldi	r31, 0x02	; 2
     812:	01 90       	ld	r0, Z+
     814:	0d 92       	st	X+, r0
     816:	8a 95       	dec	r24
     818:	e1 f7       	brne	.-8      	; 0x812 <_ZN7decoderC1Ev+0xe>
     81a:	08 95       	ret

0000081c <_ZN7decoder14decodeToLetterEPKc>:
		   else return character equivalent of current positon 
			after checking if it was not space and 
			                                              
*************************************************************************/
char decoder::decodeToLetter( const char * morseSequence)
{
     81c:	fb 01       	movw	r30, r22
	int index=0,dataPos=0;
	for(int i=0;i<7;i++)
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	30 e0       	ldi	r19, 0x00	; 0
			after checking if it was not space and 
			                                              
*************************************************************************/
char decoder::decodeToLetter( const char * morseSequence)
{
	int index=0,dataPos=0;
     822:	40 e0       	ldi	r20, 0x00	; 0
     824:	50 e0       	ldi	r21, 0x00	; 0
	for(int i=0;i<7;i++)
	{
		if(morseSequence[i]=='1')index=2*index+1;
     826:	61 91       	ld	r22, Z+
     828:	61 33       	cpi	r22, 0x31	; 49
     82a:	29 f4       	brne	.+10     	; 0x836 <_ZN7decoder14decodeToLetterEPKc+0x1a>
     82c:	44 0f       	add	r20, r20
     82e:	55 1f       	adc	r21, r21
     830:	4f 5f       	subi	r20, 0xFF	; 255
     832:	5f 4f       	sbci	r21, 0xFF	; 255
     834:	0c c0       	rjmp	.+24     	; 0x84e <_ZN7decoder14decodeToLetterEPKc+0x32>
		else 
		if(morseSequence[i]=='3')index=2*index+2;
     836:	63 33       	cpi	r22, 0x33	; 51
     838:	29 f4       	brne	.+10     	; 0x844 <_ZN7decoder14decodeToLetterEPKc+0x28>
     83a:	4f 5f       	subi	r20, 0xFF	; 255
     83c:	5f 4f       	sbci	r21, 0xFF	; 255
     83e:	44 0f       	add	r20, r20
     840:	55 1f       	adc	r21, r21
     842:	05 c0       	rjmp	.+10     	; 0x84e <_ZN7decoder14decodeToLetterEPKc+0x32>
		else											//end of morse sequence
		{
			return morseData[index];
     844:	fc 01       	movw	r30, r24
     846:	e4 0f       	add	r30, r20
     848:	f5 1f       	adc	r31, r21
     84a:	82 81       	ldd	r24, Z+2	; 0x02
     84c:	08 95       	ret
			                                              
*************************************************************************/
char decoder::decodeToLetter( const char * morseSequence)
{
	int index=0,dataPos=0;
	for(int i=0;i<7;i++)
     84e:	2f 5f       	subi	r18, 0xFF	; 255
     850:	3f 4f       	sbci	r19, 0xFF	; 255
     852:	27 30       	cpi	r18, 0x07	; 7
     854:	31 05       	cpc	r19, r1
     856:	39 f7       	brne	.-50     	; 0x826 <_ZN7decoder14decodeToLetterEPKc+0xa>
		else											//end of morse sequence
		{
			return morseData[index];
		}
	}
	return ' ';				//if still in case not NICE morseSequence
     858:	80 e2       	ldi	r24, 0x20	; 32
	
}
     85a:	08 95       	ret

0000085c <_ZN9Processor12motionConfigEv>:
	PORTA = 0x06;
}

void Processor::backward()
{
	PORTA = 0x09;
     85c:	81 b1       	in	r24, 0x01	; 1
     85e:	8f 60       	ori	r24, 0x0F	; 15
     860:	81 b9       	out	0x01, r24	; 1
     862:	82 b1       	in	r24, 0x02	; 2
     864:	12 b8       	out	0x02, r1	; 2
     866:	ea e0       	ldi	r30, 0x0A	; 10
     868:	f1 e0       	ldi	r31, 0x01	; 1
     86a:	80 81       	ld	r24, Z
     86c:	88 61       	ori	r24, 0x18	; 24
     86e:	80 83       	st	Z, r24
     870:	eb e0       	ldi	r30, 0x0B	; 11
     872:	f1 e0       	ldi	r31, 0x01	; 1
     874:	80 81       	ld	r24, Z
     876:	88 61       	ori	r24, 0x18	; 24
     878:	80 83       	st	Z, r24
     87a:	08 95       	ret

0000087c <_ZN9Processor16moveMotorForwardEv>:
	PORTA = 0x00;
}

void Processor::forward()
{
	PORTA = 0x06;
     87c:	86 e0       	ldi	r24, 0x06	; 6
     87e:	82 b9       	out	0x02, r24	; 2
     880:	2f ef       	ldi	r18, 0xFF	; 255
     882:	8f ef       	ldi	r24, 0xFF	; 255
     884:	99 e5       	ldi	r25, 0x59	; 89
     886:	21 50       	subi	r18, 0x01	; 1
     888:	80 40       	sbci	r24, 0x00	; 0
     88a:	90 40       	sbci	r25, 0x00	; 0
     88c:	e1 f7       	brne	.-8      	; 0x886 <_ZN9Processor16moveMotorForwardEv+0xa>
     88e:	00 c0       	rjmp	.+0      	; 0x890 <_ZN9Processor16moveMotorForwardEv+0x14>
     890:	00 00       	nop
	PORTL |= 0x18;
}

void Processor::motorStop()
{
	PORTA = 0x00;
     892:	12 b8       	out	0x02, r1	; 2
     894:	08 95       	ret

00000896 <_ZN9Processor17moveMotorBackwardEv>:
	PORTA = 0x06;
}

void Processor::backward()
{
	PORTA = 0x09;
     896:	89 e0       	ldi	r24, 0x09	; 9
     898:	82 b9       	out	0x02, r24	; 2
     89a:	2f ef       	ldi	r18, 0xFF	; 255
     89c:	8f ef       	ldi	r24, 0xFF	; 255
     89e:	99 e5       	ldi	r25, 0x59	; 89
     8a0:	21 50       	subi	r18, 0x01	; 1
     8a2:	80 40       	sbci	r24, 0x00	; 0
     8a4:	90 40       	sbci	r25, 0x00	; 0
     8a6:	e1 f7       	brne	.-8      	; 0x8a0 <_ZN9Processor17moveMotorBackwardEv+0xa>
     8a8:	00 c0       	rjmp	.+0      	; 0x8aa <_ZN9Processor17moveMotorBackwardEv+0x14>
     8aa:	00 00       	nop
	PORTL |= 0x18;
}

void Processor::motorStop()
{
	PORTA = 0x00;
     8ac:	12 b8       	out	0x02, r1	; 2
     8ae:	08 95       	ret

000008b0 <_ZN9Processor7processEc>:
#include "Processor.h"

int Processor::process(char decoded)
{
	
	if(decoded=='f')
     8b0:	66 36       	cpi	r22, 0x66	; 102
     8b2:	21 f4       	brne	.+8      	; 0x8bc <_ZN9Processor7processEc+0xc>
	{
		moveMotorForward();
     8b4:	e3 df       	rcall	.-58     	; 0x87c <_ZN9Processor16moveMotorForwardEv>
		return 0;
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	08 95       	ret
	}			
	if(decoded=='b')
     8bc:	62 36       	cpi	r22, 0x62	; 98
     8be:	21 f4       	brne	.+8      	; 0x8c8 <_ZN9Processor7processEc+0x18>
	{
		moveMotorBackward();
     8c0:	ea df       	rcall	.-44     	; 0x896 <_ZN9Processor17moveMotorBackwardEv>
		return 0;
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	08 95       	ret
	}			
	else
		return -1;		
     8c8:	8f ef       	ldi	r24, 0xFF	; 255
     8ca:	9f ef       	ldi	r25, 0xFF	; 255
}
     8cc:	08 95       	ret

000008ce <_ZN9ProcessorC1Ev>:
	motorStop();
	//_delay_ms(2000);
}
Processor::Processor()
{
	motionConfig();		//initialise the pins 
     8ce:	c6 cf       	rjmp	.-116    	; 0x85c <_ZN9Processor12motionConfigEv>
     8d0:	08 95       	ret

000008d2 <_ZN5pulseC1Ev>:
*initialises related variables
* default WPM, timeout, threshold time(min), max threshold time, errorchecking and tolerance to given value
************************************************************************/
pulse::pulse()
{
	pulseData.ifData=0;		//set validity of data to invalid
     8d2:	fc 01       	movw	r30, r24
     8d4:	14 86       	std	Z+12, r1	; 0x0c
	timeout=2;				//timeout in ms for getting pulse
     8d6:	ed 59       	subi	r30, 0x9D	; 157
     8d8:	ff 4f       	sbci	r31, 0xFF	; 255
     8da:	22 e0       	ldi	r18, 0x02	; 2
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	31 83       	std	Z+1, r19	; 0x01
     8e0:	20 83       	st	Z, r18
	wordsPerMinute=30;		//WPM of morse code
     8e2:	3a 96       	adiw	r30, 0x0a	; 10
     8e4:	2e e1       	ldi	r18, 0x1E	; 30
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	31 83       	std	Z+1, r19	; 0x01
     8ea:	20 83       	st	Z, r18
	tDit=1200/wordsPerMinute;	//calculates time of dits given WPM		
     8ec:	34 97       	sbiw	r30, 0x04	; 4
     8ee:	28 e2       	ldi	r18, 0x28	; 40
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	31 83       	std	Z+1, r19	; 0x01
     8f4:	20 83       	st	Z, r18
	tDah=3*tDit;				//calculates time of dahs from tDit
     8f6:	32 96       	adiw	r30, 0x02	; 2
     8f8:	28 e7       	ldi	r18, 0x78	; 120
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	31 83       	std	Z+1, r19	; 0x01
     8fe:	20 83       	st	Z, r18
	thresholdTime=tDit/2;		//used for removal of pulses of length less than it (in ms)	must be +ve assume tdit >20
     900:	36 97       	sbiw	r30, 0x06	; 6
     902:	24 e1       	ldi	r18, 0x14	; 20
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	31 83       	std	Z+1, r19	; 0x01
     908:	20 83       	st	Z, r18
	maxThresholdTime=(tDah*3)/2;	//used for removal of pulses of length more than it (in ms)	[threshold times doesn't account in errorCheck , removed in capture sequence]
     90a:	32 96       	adiw	r30, 0x02	; 2
     90c:	44 eb       	ldi	r20, 0xB4	; 180
     90e:	50 e0       	ldi	r21, 0x00	; 0
     910:	51 83       	std	Z+1, r21	; 0x01
     912:	40 83       	st	Z, r20
	errorCheck=true;			//for calculating error checks on received pulse data
     914:	3a 96       	adiw	r30, 0x0a	; 10
     916:	41 e0       	ldi	r20, 0x01	; 1
     918:	40 83       	st	Z, r20
	tolerance=20;				
     91a:	32 97       	sbiw	r30, 0x02	; 2
     91c:	31 83       	std	Z+1, r19	; 0x01
     91e:	20 83       	st	Z, r18
     920:	08 95       	ret

00000922 <_ZN5pulse4initEv>:
//pulse::init initialses the registers for counting the clock pulses on 
//T1 pin of mcu, 
void pulse::init(void)
{
	
	TCCR1A=0;		//not using any other mode
     922:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=(1<<CS12)|(1<<CS11); //set clock source as falling edge on T1 pin
     926:	86 e0       	ldi	r24, 0x06	; 6
     928:	80 93 81 00 	sts	0x0081, r24
	TCNT1=0;					//set initial value of counter to zero
     92c:	10 92 85 00 	sts	0x0085, r1
     930:	10 92 84 00 	sts	0x0084, r1
	OCR1A=0;					//not using other timer modules
     934:	10 92 89 00 	sts	0x0089, r1
     938:	10 92 88 00 	sts	0x0088, r1
	OCR1B=0;
     93c:	10 92 8b 00 	sts	0x008B, r1
     940:	10 92 8a 00 	sts	0x008A, r1
	ICR1=0;
     944:	10 92 87 00 	sts	0x0087, r1
     948:	10 92 86 00 	sts	0x0086, r1
	TIMSK1=0;					//not using interrupts for timer 1
     94c:	10 92 6f 00 	sts	0x006F, r1
	TIFR1=0;
     950:	16 ba       	out	0x16, r1	; 22
	DDRD&=~(1<<PD6);							//make T1 pin as input PD6
     952:	56 98       	cbi	0x0a, 6	; 10
     954:	08 95       	ret

00000956 <_ZN5pulse5delayEj>:
	}
	return 1;
}
void pulse::delay(unsigned int time_ms)
{
	while(time_ms--)_delay_ms(1);
     956:	61 15       	cp	r22, r1
     958:	71 05       	cpc	r23, r1
     95a:	51 f0       	breq	.+20     	; 0x970 <_ZN5pulse5delayEj+0x1a>
     95c:	86 e6       	ldi	r24, 0x66	; 102
     95e:	9e e0       	ldi	r25, 0x0E	; 14
     960:	01 97       	sbiw	r24, 0x01	; 1
     962:	f1 f7       	brne	.-4      	; 0x960 <_ZN5pulse5delayEj+0xa>
     964:	00 00       	nop
     966:	61 50       	subi	r22, 0x01	; 1
     968:	71 09       	sbc	r23, r1
     96a:	61 15       	cp	r22, r1
     96c:	71 05       	cpc	r23, r1
     96e:	b1 f7       	brne	.-20     	; 0x95c <_ZN5pulse5delayEj+0x6>
     970:	08 95       	ret

00000972 <_ZN9pulseInfo17setPulseWidthTimeEv>:
}

void pulseInfo::setPulseWidthTime()
{
     972:	fc 01       	movw	r30, r24
	pulseWidthTime=stopTime-startTime;
     974:	84 81       	ldd	r24, Z+4	; 0x04
     976:	95 81       	ldd	r25, Z+5	; 0x05
     978:	20 81       	ld	r18, Z
     97a:	31 81       	ldd	r19, Z+1	; 0x01
     97c:	82 1b       	sub	r24, r18
     97e:	93 0b       	sbc	r25, r19
     980:	93 87       	std	Z+11, r25	; 0x0b
     982:	82 87       	std	Z+10, r24	; 0x0a
     984:	08 95       	ret

00000986 <_ZN5pulse7captureEv>:
*check every 2 ms that counter is incremented or not
*if incremented continue to check
*else exit loop and save timer value as pulse count 
*********************************************************/
char pulse::capture()
{
     986:	4f 92       	push	r4
     988:	5f 92       	push	r5
     98a:	6f 92       	push	r6
     98c:	7f 92       	push	r7
     98e:	af 92       	push	r10
     990:	bf 92       	push	r11
     992:	cf 92       	push	r12
     994:	df 92       	push	r13
     996:	ef 92       	push	r14
     998:	ff 92       	push	r15
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	ec 01       	movw	r28, r24
	init();					//initialise registers for capture
     9a4:	be df       	rcall	.-132    	; 0x922 <_ZN5pulse4initEv>
	pulseData.numberOfEdges	= 0;		
     9a6:	19 86       	std	Y+9, r1	; 0x09
     9a8:	18 86       	std	Y+8, r1	; 0x08
	unsigned long temptime=systime::getSysTime();										//save time when it looks for a pulse 
     9aa:	f0 d2       	rcall	.+1504   	; 0xf8c <_ZN7systime10getSysTimeEv>
     9ac:	2b 01       	movw	r4, r22
     9ae:	3c 01       	movw	r6, r24
	while(TCNT1 == 0){
     9b0:	04 e8       	ldi	r16, 0x84	; 132
     9b2:	10 e0       	ldi	r17, 0x00	; 0
		if( (systime::getSysTime()-temptime)>(unsigned long)(1.5*tDit))					//check if sufficient time has passed after
     9b4:	5e 01       	movw	r10, r28
     9b6:	89 e6       	ldi	r24, 0x69	; 105
     9b8:	a8 0e       	add	r10, r24
     9ba:	b1 1c       	adc	r11, r1
char pulse::capture()
{
	init();					//initialise registers for capture
	pulseData.numberOfEdges	= 0;		
	unsigned long temptime=systime::getSysTime();										//save time when it looks for a pulse 
	while(TCNT1 == 0){
     9bc:	21 c0       	rjmp	.+66     	; 0xa00 <_ZN5pulse7captureEv+0x7a>
		if( (systime::getSysTime()-temptime)>(unsigned long)(1.5*tDit))					//check if sufficient time has passed after
     9be:	e6 d2       	rcall	.+1484   	; 0xf8c <_ZN7systime10getSysTimeEv>
     9c0:	6b 01       	movw	r12, r22
     9c2:	7c 01       	movw	r14, r24
     9c4:	c4 18       	sub	r12, r4
     9c6:	d5 08       	sbc	r13, r5
     9c8:	e6 08       	sbc	r14, r6
     9ca:	f7 08       	sbc	r15, r7
     9cc:	f5 01       	movw	r30, r10
     9ce:	60 81       	ld	r22, Z
     9d0:	71 81       	ldd	r23, Z+1	; 0x01
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	52 d3       	rcall	.+1700   	; 0x107c <__floatunsisf>
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	40 ec       	ldi	r20, 0xC0	; 192
     9de:	5f e3       	ldi	r21, 0x3F	; 63
     9e0:	b3 d3       	rcall	.+1894   	; 0x1148 <__mulsf3>
     9e2:	20 d3       	rcall	.+1600   	; 0x1024 <__fixunssfsi>
     9e4:	6c 15       	cp	r22, r12
     9e6:	7d 05       	cpc	r23, r13
     9e8:	8e 05       	cpc	r24, r14
     9ea:	9f 05       	cpc	r25, r15
     9ec:	48 f4       	brcc	.+18     	; 0xa00 <_ZN5pulse7captureEv+0x7a>
		{
			isDitTimeout=true;															//if yes setDitTimeout Bit
     9ee:	fe 01       	movw	r30, r28
     9f0:	ee 59       	subi	r30, 0x9E	; 158
     9f2:	ff 4f       	sbci	r31, 0xFF	; 255
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	80 83       	st	Z, r24
			flag=1;
     9f8:	cf 59       	subi	r28, 0x9F	; 159
     9fa:	df 4f       	sbci	r29, 0xFF	; 255
     9fc:	88 83       	st	Y, r24
			return flag;
     9fe:	4a c0       	rjmp	.+148    	; 0xa94 <_ZN5pulse7captureEv+0x10e>
char pulse::capture()
{
	init();					//initialise registers for capture
	pulseData.numberOfEdges	= 0;		
	unsigned long temptime=systime::getSysTime();										//save time when it looks for a pulse 
	while(TCNT1 == 0){
     a00:	f8 01       	movw	r30, r16
     a02:	80 81       	ld	r24, Z
     a04:	91 81       	ldd	r25, Z+1	; 0x01
     a06:	89 2b       	or	r24, r25
     a08:	d1 f2       	breq	.-76     	; 0x9be <_ZN5pulse7captureEv+0x38>
			flag=1;
			return flag;
		}
	};		//wait for first falling edge		//ie within timeout edge is detected
	
	pulseData.startTime=systime::getSysTime();	//save START TIME
     a0a:	c0 d2       	rcall	.+1408   	; 0xf8c <_ZN7systime10getSysTimeEv>
     a0c:	68 83       	st	Y, r22
     a0e:	79 83       	std	Y+1, r23	; 0x01
     a10:	8a 83       	std	Y+2, r24	; 0x02
     a12:	9b 83       	std	Y+3, r25	; 0x03
	isDitTimeout=false;
     a14:	fe 01       	movw	r30, r28
     a16:	ee 59       	subi	r30, 0x9E	; 158
     a18:	ff 4f       	sbci	r31, 0xFF	; 255
     a1a:	10 82       	st	Z, r1
	while(true)									
	{
		pulseData.numberOfEdges=TCNT1;
     a1c:	04 e8       	ldi	r16, 0x84	; 132
     a1e:	10 e0       	ldi	r17, 0x00	; 0
		delay(timeout);								///timeout value pulse edge timeoutSS
     a20:	7e 01       	movw	r14, r28
     a22:	f3 e6       	ldi	r31, 0x63	; 99
     a24:	ef 0e       	add	r14, r31
     a26:	f1 1c       	adc	r15, r1
	
	pulseData.startTime=systime::getSysTime();	//save START TIME
	isDitTimeout=false;
	while(true)									
	{
		pulseData.numberOfEdges=TCNT1;
     a28:	f8 01       	movw	r30, r16
     a2a:	80 81       	ld	r24, Z
     a2c:	91 81       	ldd	r25, Z+1	; 0x01
     a2e:	99 87       	std	Y+9, r25	; 0x09
     a30:	88 87       	std	Y+8, r24	; 0x08
		delay(timeout);								///timeout value pulse edge timeoutSS
     a32:	f7 01       	movw	r30, r14
     a34:	60 81       	ld	r22, Z
     a36:	71 81       	ldd	r23, Z+1	; 0x01
     a38:	ce 01       	movw	r24, r28
     a3a:	8d df       	rcall	.-230    	; 0x956 <_ZN5pulse5delayEj>
		if(pulseData.numberOfEdges == TCNT1)break;	//break only if counter value
     a3c:	f8 01       	movw	r30, r16
     a3e:	80 81       	ld	r24, Z
     a40:	91 81       	ldd	r25, Z+1	; 0x01
     a42:	28 85       	ldd	r18, Y+8	; 0x08
     a44:	39 85       	ldd	r19, Y+9	; 0x09
     a46:	28 17       	cp	r18, r24
     a48:	39 07       	cpc	r19, r25
     a4a:	71 f7       	brne	.-36     	; 0xa28 <_ZN5pulse7captureEv+0xa2>
													//does not changes within timeout
	}
	pulseData.stopTime=systime::getSysTime();		//save pulse STOP TIME
     a4c:	9f d2       	rcall	.+1342   	; 0xf8c <_ZN7systime10getSysTimeEv>
     a4e:	6c 83       	std	Y+4, r22	; 0x04
     a50:	7d 83       	std	Y+5, r23	; 0x05
     a52:	8e 83       	std	Y+6, r24	; 0x06
     a54:	9f 83       	std	Y+7, r25	; 0x07
	pulseData.setPulseWidthTime();					
     a56:	ce 01       	movw	r24, r28
     a58:	8c df       	rcall	.-232    	; 0x972 <_ZN9pulseInfo17setPulseWidthTimeEv>
	
	if((pulseData.pulseWidthTime<thresholdTime)	&&	(pulseData.pulseWidthTime>maxThresholdTime)	)//flag for error
     a5a:	8a 85       	ldd	r24, Y+10	; 0x0a
     a5c:	9b 85       	ldd	r25, Y+11	; 0x0b
     a5e:	fe 01       	movw	r30, r28
     a60:	eb 59       	subi	r30, 0x9B	; 155
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	20 81       	ld	r18, Z
     a66:	31 81       	ldd	r19, Z+1	; 0x01
     a68:	82 17       	cp	r24, r18
     a6a:	93 07       	cpc	r25, r19
     a6c:	48 f4       	brcc	.+18     	; 0xa80 <_ZN5pulse7captureEv+0xfa>
     a6e:	32 96       	adiw	r30, 0x02	; 2
     a70:	20 81       	ld	r18, Z
     a72:	31 81       	ldd	r19, Z+1	; 0x01
     a74:	28 17       	cp	r18, r24
     a76:	39 07       	cpc	r19, r25
     a78:	18 f4       	brcc	.+6      	; 0xa80 <_ZN5pulse7captureEv+0xfa>
	{
		flag=0;			//invalid flag : unsuccessful
     a7a:	36 97       	sbiw	r30, 0x06	; 6
     a7c:	10 82       	st	Z, r1
     a7e:	05 c0       	rjmp	.+10     	; 0xa8a <_ZN5pulse7captureEv+0x104>
	}else{
		flag=1;			//valid flag   : successful
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	fe 01       	movw	r30, r28
     a84:	ef 59       	subi	r30, 0x9F	; 159
     a86:	ff 4f       	sbci	r31, 0xFF	; 255
     a88:	80 83       	st	Z, r24
	}
	pulseData.ifData=flag;			//says validity of pulse data
     a8a:	fe 01       	movw	r30, r28
     a8c:	ef 59       	subi	r30, 0x9F	; 159
     a8e:	ff 4f       	sbci	r31, 0xFF	; 255
     a90:	80 81       	ld	r24, Z
     a92:	8c 87       	std	Y+12, r24	; 0x0c
	return flag;
}
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	ff 90       	pop	r15
     a9e:	ef 90       	pop	r14
     aa0:	df 90       	pop	r13
     aa2:	cf 90       	pop	r12
     aa4:	bf 90       	pop	r11
     aa6:	af 90       	pop	r10
     aa8:	7f 90       	pop	r7
     aaa:	6f 90       	pop	r6
     aac:	5f 90       	pop	r5
     aae:	4f 90       	pop	r4
     ab0:	08 95       	ret

00000ab2 <_ZN5pulse11receiveCodeEv>:
/***************************************
*char pulse::receiveCode()
*returns 1 if successful 
****************************************/
char pulse::receiveCode()	
{
     ab2:	cf 92       	push	r12
     ab4:	df 92       	push	r13
     ab6:	ef 92       	push	r14
     ab8:	ff 92       	push	r15
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	ec 01       	movw	r28, r24
	//char timeoutNo=0;
	bool isFirstTimeout=true;
	for(int i=0; i<6; )
     ac4:	00 e0       	ldi	r16, 0x00	; 0
     ac6:	10 e0       	ldi	r17, 0x00	; 0
	{
		char isValid = capture();		//receive data for pulse
		if(isValid==1)				
		{
			if(isDitTimeout==false)		//c
     ac8:	7c 01       	movw	r14, r24
     aca:	82 e6       	ldi	r24, 0x62	; 98
     acc:	e8 0e       	add	r14, r24
     ace:	f1 1c       	adc	r15, r1
			{
				morsePulses[i]=pulseData;		//if not ditTimeout then save the data and increment index 'i'
     ad0:	0f 2e       	mov	r0, r31
     ad2:	fd e0       	ldi	r31, 0x0D	; 13
     ad4:	df 2e       	mov	r13, r31
     ad6:	f0 2d       	mov	r31, r0
				morsePulses[i].ifData=1;
     ad8:	cc 24       	eor	r12, r12
     ada:	c3 94       	inc	r12
{
	//char timeoutNo=0;
	bool isFirstTimeout=true;
	for(int i=0; i<6; )
	{
		char isValid = capture();		//receive data for pulse
     adc:	ce 01       	movw	r24, r28
     ade:	53 df       	rcall	.-346    	; 0x986 <_ZN5pulse7captureEv>
		if(isValid==1)				
     ae0:	81 30       	cpi	r24, 0x01	; 1
     ae2:	c1 f5       	brne	.+112    	; 0xb54 <_ZN5pulse11receiveCodeEv+0xa2>
		{
			if(isDitTimeout==false)		//c
     ae4:	f7 01       	movw	r30, r14
     ae6:	80 81       	ld	r24, Z
     ae8:	88 23       	and	r24, r24
     aea:	21 f0       	breq	.+8      	; 0xaf4 <_ZN5pulse11receiveCodeEv+0x42>
			}else{								//else it was a ditTimeout
				
				if(isFirstTimeout==true)	//for first timout repeat and for other return it
				{
					isFirstTimeout = false;	//next time this  will not execute
					for(int j=5;j>i;j--)
     aec:	05 30       	cpi	r16, 0x05	; 5
     aee:	11 05       	cpc	r17, r1
     af0:	ec f0       	brlt	.+58     	; 0xb2c <_ZN5pulse11receiveCodeEv+0x7a>
     af2:	34 c0       	rjmp	.+104    	; 0xb5c <_ZN5pulse11receiveCodeEv+0xaa>
		char isValid = capture();		//receive data for pulse
		if(isValid==1)				
		{
			if(isDitTimeout==false)		//c
			{
				morsePulses[i]=pulseData;		//if not ditTimeout then save the data and increment index 'i'
     af4:	c8 01       	movw	r24, r16
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	d8 9e       	mul	r13, r24
     afa:	d0 01       	movw	r26, r0
     afc:	d9 9e       	mul	r13, r25
     afe:	b0 0d       	add	r27, r0
     b00:	11 24       	eor	r1, r1
     b02:	ac 0f       	add	r26, r28
     b04:	bd 1f       	adc	r27, r29
     b06:	fe 01       	movw	r30, r28
     b08:	2d 2d       	mov	r18, r13
     b0a:	01 90       	ld	r0, Z+
     b0c:	0d 92       	st	X+, r0
     b0e:	2a 95       	dec	r18
     b10:	e1 f7       	brne	.-8      	; 0xb0a <_ZN5pulse11receiveCodeEv+0x58>
				morsePulses[i].ifData=1;
     b12:	d0 9e       	mul	r13, r16
     b14:	f0 01       	movw	r30, r0
     b16:	d1 9e       	mul	r13, r17
     b18:	f0 0d       	add	r31, r0
     b1a:	11 24       	eor	r1, r1
     b1c:	ec 0f       	add	r30, r28
     b1e:	fd 1f       	adc	r31, r29
     b20:	c1 8e       	std	Z+25, r12	; 0x19
				i++;
     b22:	8c 01       	movw	r16, r24
****************************************/
char pulse::receiveCode()	
{
	//char timeoutNo=0;
	bool isFirstTimeout=true;
	for(int i=0; i<6; )
     b24:	86 30       	cpi	r24, 0x06	; 6
     b26:	91 05       	cpc	r25, r1
     b28:	cc f4       	brge	.+50     	; 0xb5c <_ZN5pulse11receiveCodeEv+0xaa>
     b2a:	d8 cf       	rjmp	.-80     	; 0xadc <_ZN5pulse11receiveCodeEv+0x2a>
     b2c:	ce 01       	movw	r24, r28
     b2e:	c1 54       	subi	r28, 0x41	; 65
     b30:	d1 09       	sbc	r29, r1
     b32:	4d e0       	ldi	r20, 0x0D	; 13
     b34:	40 9f       	mul	r20, r16
     b36:	90 01       	movw	r18, r0
     b38:	41 9f       	mul	r20, r17
     b3a:	30 0d       	add	r19, r0
     b3c:	11 24       	eor	r1, r1
     b3e:	2c 0f       	add	r18, r28
     b40:	3d 1f       	adc	r19, r29
     b42:	fc 01       	movw	r30, r24
     b44:	e6 5a       	subi	r30, 0xA6	; 166
     b46:	ff 4f       	sbci	r31, 0xFF	; 255
				if(isFirstTimeout==true)	//for first timout repeat and for other return it
				{
					isFirstTimeout = false;	//next time this  will not execute
					for(int j=5;j>i;j--)
					{
						morsePulses[j].ifData=0;				//make all other ifData zero
     b48:	10 82       	st	Z, r1
     b4a:	0d 97       	sbiw	r24, 0x0d	; 13
			}else{								//else it was a ditTimeout
				
				if(isFirstTimeout==true)	//for first timout repeat and for other return it
				{
					isFirstTimeout = false;	//next time this  will not execute
					for(int j=5;j>i;j--)
     b4c:	82 17       	cp	r24, r18
     b4e:	93 07       	cpc	r25, r19
     b50:	c1 f7       	brne	.-16     	; 0xb42 <_ZN5pulse11receiveCodeEv+0x90>
     b52:	04 c0       	rjmp	.+8      	; 0xb5c <_ZN5pulse11receiveCodeEv+0xaa>
****************************************/
char pulse::receiveCode()	
{
	//char timeoutNo=0;
	bool isFirstTimeout=true;
	for(int i=0; i<6; )
     b54:	06 30       	cpi	r16, 0x06	; 6
     b56:	11 05       	cpc	r17, r1
     b58:	0c f4       	brge	.+2      	; 0xb5c <_ZN5pulse11receiveCodeEv+0xaa>
     b5a:	c0 cf       	rjmp	.-128    	; 0xadc <_ZN5pulse11receiveCodeEv+0x2a>
						}
				}
		}else ;					//do nothing if it was not a valid data
	}
	return 1;
}
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	ff 90       	pop	r15
     b68:	ef 90       	pop	r14
     b6a:	df 90       	pop	r13
     b6c:	cf 90       	pop	r12
     b6e:	08 95       	ret

00000b70 <_ZN5pulse14decodeToDitDahEv>:
*extracts dit and dah from the morsePulses array and stores in  DitDah array
*returns true if successful (only if error checking) else false
*absense of errorChecking strictly calculates on based on (tDit+tDah)/2
**********************************************/
bool pulse::decodeToDitDah()
{
     b70:	2f 92       	push	r2
     b72:	3f 92       	push	r3
     b74:	4f 92       	push	r4
     b76:	5f 92       	push	r5
     b78:	6f 92       	push	r6
     b7a:	7f 92       	push	r7
     b7c:	8f 92       	push	r8
     b7e:	9f 92       	push	r9
     b80:	af 92       	push	r10
     b82:	bf 92       	push	r11
     b84:	cf 92       	push	r12
     b86:	df 92       	push	r13
     b88:	ef 92       	push	r14
     b8a:	ff 92       	push	r15
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
	
	//find number of morse pulses
	int i=0;
	for(i=0; i<6; i++) DitDah[i] = 0;		//make  all previous data to zero
     b94:	fc 01       	movw	r30, r24
     b96:	e5 5a       	subi	r30, 0xA5	; 165
     b98:	ff 4f       	sbci	r31, 0xFF	; 255
     b9a:	10 82       	st	Z, r1
     b9c:	31 96       	adiw	r30, 0x01	; 1
     b9e:	10 82       	st	Z, r1
     ba0:	31 96       	adiw	r30, 0x01	; 1
     ba2:	10 82       	st	Z, r1
     ba4:	31 96       	adiw	r30, 0x01	; 1
     ba6:	10 82       	st	Z, r1
     ba8:	31 96       	adiw	r30, 0x01	; 1
     baa:	10 82       	st	Z, r1
     bac:	31 96       	adiw	r30, 0x01	; 1
     bae:	10 82       	st	Z, r1
	for( i=0;morsePulses[i].ifData!=0;i++);
     bb0:	ec 01       	movw	r28, r24
     bb2:	29 8d       	ldd	r18, Y+25	; 0x19
     bb4:	21 11       	cpse	r18, r1
     bb6:	1a c0       	rjmp	.+52     	; 0xbec <_ZN5pulse14decodeToDitDahEv+0x7c>
     bb8:	fc 01       	movw	r30, r24
     bba:	dc 01       	movw	r26, r24
     bbc:	a5 5a       	subi	r26, 0xA5	; 165
     bbe:	bf 4f       	sbci	r27, 0xFF	; 255
*extracts dit and dah from the morsePulses array and stores in  DitDah array
*returns true if successful (only if error checking) else false
*absense of errorChecking strictly calculates on based on (tDit+tDah)/2
**********************************************/
bool pulse::decodeToDitDah()
{
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e0       	ldi	r19, 0x00	; 0
		{
			DitDah[j]=0;
			continue;
		}
		else{
				if(errorCheck)
     bc4:	bc 01       	movw	r22, r24
     bc6:	6f 58       	subi	r22, 0x8F	; 143
     bc8:	7f 4f       	sbci	r23, 0xFF	; 255
					if(!((timeWidth>tDit/2) && ( timeWidth <tDah/2) ))return false;
					}
				}
				//if( absolute(morsePulses[j].pulseWidthTime - tDah ) < tolerance )							//its a dah
			//	if(morsePulses[j].pulseWidthTime>=2*tDit)
				if( absolute((int)(morsePulses[j].pulseWidthTime - tDah) ) < tolerance )		
     bca:	8c 01       	movw	r16, r24
     bcc:	01 59       	subi	r16, 0x91	; 145
     bce:	1f 4f       	sbci	r17, 0xFF	; 255
     bd0:	ac 01       	movw	r20, r24
     bd2:	45 59       	subi	r20, 0x95	; 149
     bd4:	5f 4f       	sbci	r21, 0xFF	; 255
				{
					DitDah[j]=3;
				}
				else if(absolute((int)(morsePulses[j].pulseWidthTime-tDit))<tolerance)							//its a dit
     bd6:	5c 01       	movw	r10, r24
     bd8:	d9 e6       	ldi	r29, 0x69	; 105
     bda:	ad 0e       	add	r10, r29
     bdc:	b1 1c       	adc	r11, r1
			//	else if (morsePulses[j].pulseWidthTime<2*tDit)
				{
					DitDah[j]=1;
     bde:	88 24       	eor	r8, r8
     be0:	83 94       	inc	r8
				}
				//if( absolute(morsePulses[j].pulseWidthTime - tDah ) < tolerance )							//its a dah
			//	if(morsePulses[j].pulseWidthTime>=2*tDit)
				if( absolute((int)(morsePulses[j].pulseWidthTime - tDah) ) < tolerance )		
				{
					DitDah[j]=3;
     be2:	0f 2e       	mov	r0, r31
     be4:	f3 e0       	ldi	r31, 0x03	; 3
     be6:	9f 2e       	mov	r9, r31
     be8:	f0 2d       	mov	r31, r0
     bea:	0b c0       	rjmp	.+22     	; 0xc02 <_ZN5pulse14decodeToDitDahEv+0x92>
     bec:	9c 01       	movw	r18, r24
     bee:	2a 5d       	subi	r18, 0xDA	; 218
     bf0:	3f 4f       	sbci	r19, 0xFF	; 255
     bf2:	23 5f       	subi	r18, 0xF3	; 243
     bf4:	3f 4f       	sbci	r19, 0xFF	; 255
     bf6:	f9 01       	movw	r30, r18
     bf8:	3d 97       	sbiw	r30, 0x0d	; 13
{
	
	//find number of morse pulses
	int i=0;
	for(i=0; i<6; i++) DitDah[i] = 0;		//make  all previous data to zero
	for( i=0;morsePulses[i].ifData!=0;i++);
     bfa:	40 81       	ld	r20, Z
     bfc:	41 11       	cpse	r20, r1
     bfe:	f9 cf       	rjmp	.-14     	; 0xbf2 <_ZN5pulse14decodeToDitDahEv+0x82>
     c00:	db cf       	rjmp	.-74     	; 0xbb8 <_ZN5pulse14decodeToDitDahEv+0x48>
     c02:	1f 01       	movw	r2, r30
	//int numberOfPulses=i;
	for(int j=0;j<6;j++)
	{
		if(morsePulses[j].ifData==0)		//just to be safe
     c04:	81 8d       	ldd	r24, Z+25	; 0x19
     c06:	81 11       	cpse	r24, r1
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <_ZN5pulse14decodeToDitDahEv+0x9e>
		{
			DitDah[j]=0;
     c0a:	1c 92       	st	X, r1
			continue;
     c0c:	55 c0       	rjmp	.+170    	; 0xcb8 <_ZN5pulse14decodeToDitDahEv+0x148>
		}
		else{
				if(errorCheck)
     c0e:	eb 01       	movw	r28, r22
     c10:	88 81       	ld	r24, Y
     c12:	88 23       	and	r24, r24
     c14:	49 f1       	breq	.+82     	; 0xc68 <_ZN5pulse14decodeToDitDahEv+0xf8>
				{
					if(j>0)			//if not the first pulse
     c16:	12 16       	cp	r1, r18
     c18:	13 06       	cpc	r1, r19
     c1a:	34 f5       	brge	.+76     	; 0xc68 <_ZN5pulse14decodeToDitDahEv+0xf8>
					{
					unsigned long timeWidth (morsePulses[j].startTime-morsePulses[j-1].stopTime) ;		//finding time distance betn next pulse falling and previous pulse rising
     c1c:	c5 84       	ldd	r12, Z+13	; 0x0d
     c1e:	d6 84       	ldd	r13, Z+14	; 0x0e
     c20:	e7 84       	ldd	r14, Z+15	; 0x0f
     c22:	f0 88       	ldd	r15, Z+16	; 0x10
     c24:	44 80       	ldd	r4, Z+4	; 0x04
     c26:	55 80       	ldd	r5, Z+5	; 0x05
     c28:	66 80       	ldd	r6, Z+6	; 0x06
     c2a:	77 80       	ldd	r7, Z+7	; 0x07
     c2c:	c4 18       	sub	r12, r4
     c2e:	d5 08       	sbc	r13, r5
     c30:	e6 08       	sbc	r14, r6
     c32:	f7 08       	sbc	r15, r7
					if(!((timeWidth>tDit/2) && ( timeWidth <tDah/2) ))return false;
     c34:	e5 01       	movw	r28, r10
     c36:	88 81       	ld	r24, Y
     c38:	99 81       	ldd	r25, Y+1	; 0x01
     c3a:	96 95       	lsr	r25
     c3c:	87 95       	ror	r24
     c3e:	2c 01       	movw	r4, r24
     c40:	61 2c       	mov	r6, r1
     c42:	71 2c       	mov	r7, r1
     c44:	4c 14       	cp	r4, r12
     c46:	5d 04       	cpc	r5, r13
     c48:	6e 04       	cpc	r6, r14
     c4a:	7f 04       	cpc	r7, r15
     c4c:	f0 f5       	brcc	.+124    	; 0xcca <_ZN5pulse14decodeToDitDahEv+0x15a>
     c4e:	ea 01       	movw	r28, r20
     c50:	88 81       	ld	r24, Y
     c52:	99 81       	ldd	r25, Y+1	; 0x01
     c54:	96 95       	lsr	r25
     c56:	87 95       	ror	r24
     c58:	2c 01       	movw	r4, r24
     c5a:	61 2c       	mov	r6, r1
     c5c:	71 2c       	mov	r7, r1
     c5e:	c4 14       	cp	r12, r4
     c60:	d5 04       	cpc	r13, r5
     c62:	e6 04       	cpc	r14, r6
     c64:	f7 04       	cpc	r15, r7
     c66:	98 f5       	brcc	.+102    	; 0xcce <_ZN5pulse14decodeToDitDahEv+0x15e>
					}
				}
				//if( absolute(morsePulses[j].pulseWidthTime - tDah ) < tolerance )							//its a dah
			//	if(morsePulses[j].pulseWidthTime>=2*tDit)
				if( absolute((int)(morsePulses[j].pulseWidthTime - tDah) ) < tolerance )		
     c68:	e1 01       	movw	r28, r2
     c6a:	ef 88       	ldd	r14, Y+23	; 0x17
     c6c:	f8 8c       	ldd	r15, Y+24	; 0x18
     c6e:	e8 01       	movw	r28, r16
     c70:	68 80       	ld	r6, Y
     c72:	79 80       	ldd	r7, Y+1	; 0x01
     c74:	ea 01       	movw	r28, r20
     c76:	88 81       	ld	r24, Y
     c78:	99 81       	ldd	r25, Y+1	; 0x01
     c7a:	67 01       	movw	r12, r14
     c7c:	c8 1a       	sub	r12, r24
     c7e:	d9 0a       	sbc	r13, r25
*unsigned int pulse::absolute(int x)
*return absolute value of an integer
*********************************/
unsigned int pulse::absolute(int x)
{
	return (  (x>=0)?x:(-1)*x   );
     c80:	c6 01       	movw	r24, r12
     c82:	99 23       	and	r25, r25
     c84:	24 f4       	brge	.+8      	; 0xc8e <_ZN5pulse14decodeToDitDahEv+0x11e>
     c86:	88 27       	eor	r24, r24
     c88:	99 27       	eor	r25, r25
     c8a:	8c 19       	sub	r24, r12
     c8c:	9d 09       	sbc	r25, r13
					if(!((timeWidth>tDit/2) && ( timeWidth <tDah/2) ))return false;
					}
				}
				//if( absolute(morsePulses[j].pulseWidthTime - tDah ) < tolerance )							//its a dah
			//	if(morsePulses[j].pulseWidthTime>=2*tDit)
				if( absolute((int)(morsePulses[j].pulseWidthTime - tDah) ) < tolerance )		
     c8e:	86 15       	cp	r24, r6
     c90:	97 05       	cpc	r25, r7
     c92:	10 f4       	brcc	.+4      	; 0xc98 <_ZN5pulse14decodeToDitDahEv+0x128>
				{
					DitDah[j]=3;
     c94:	9c 92       	st	X, r9
     c96:	10 c0       	rjmp	.+32     	; 0xcb8 <_ZN5pulse14decodeToDitDahEv+0x148>
				}
				else if(absolute((int)(morsePulses[j].pulseWidthTime-tDit))<tolerance)							//its a dit
     c98:	e5 01       	movw	r28, r10
     c9a:	88 81       	ld	r24, Y
     c9c:	99 81       	ldd	r25, Y+1	; 0x01
     c9e:	e8 1a       	sub	r14, r24
     ca0:	f9 0a       	sbc	r15, r25
*unsigned int pulse::absolute(int x)
*return absolute value of an integer
*********************************/
unsigned int pulse::absolute(int x)
{
	return (  (x>=0)?x:(-1)*x   );
     ca2:	c7 01       	movw	r24, r14
     ca4:	99 23       	and	r25, r25
     ca6:	24 f4       	brge	.+8      	; 0xcb0 <_ZN5pulse14decodeToDitDahEv+0x140>
     ca8:	88 27       	eor	r24, r24
     caa:	99 27       	eor	r25, r25
     cac:	8e 19       	sub	r24, r14
     cae:	9f 09       	sbc	r25, r15
			//	if(morsePulses[j].pulseWidthTime>=2*tDit)
				if( absolute((int)(morsePulses[j].pulseWidthTime - tDah) ) < tolerance )		
				{
					DitDah[j]=3;
				}
				else if(absolute((int)(morsePulses[j].pulseWidthTime-tDit))<tolerance)							//its a dit
     cb0:	86 15       	cp	r24, r6
     cb2:	97 05       	cpc	r25, r7
     cb4:	70 f4       	brcc	.+28     	; 0xcd2 <_ZN5pulse14decodeToDitDahEv+0x162>
			//	else if (morsePulses[j].pulseWidthTime<2*tDit)
				{
					DitDah[j]=1;
     cb6:	8c 92       	st	X, r8
	//find number of morse pulses
	int i=0;
	for(i=0; i<6; i++) DitDah[i] = 0;		//make  all previous data to zero
	for( i=0;morsePulses[i].ifData!=0;i++);
	//int numberOfPulses=i;
	for(int j=0;j<6;j++)
     cb8:	2f 5f       	subi	r18, 0xFF	; 255
     cba:	3f 4f       	sbci	r19, 0xFF	; 255
     cbc:	3d 96       	adiw	r30, 0x0d	; 13
     cbe:	11 96       	adiw	r26, 0x01	; 1
     cc0:	26 30       	cpi	r18, 0x06	; 6
     cc2:	31 05       	cpc	r19, r1
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <_ZN5pulse14decodeToDitDahEv+0x158>
     cc6:	9d cf       	rjmp	.-198    	; 0xc02 <_ZN5pulse14decodeToDitDahEv+0x92>
     cc8:	06 c0       	rjmp	.+12     	; 0xcd6 <_ZN5pulse14decodeToDitDahEv+0x166>
				if(errorCheck)
				{
					if(j>0)			//if not the first pulse
					{
					unsigned long timeWidth (morsePulses[j].startTime-morsePulses[j-1].stopTime) ;		//finding time distance betn next pulse falling and previous pulse rising
					if(!((timeWidth>tDit/2) && ( timeWidth <tDah/2) ))return false;
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	05 c0       	rjmp	.+10     	; 0xcd8 <_ZN5pulse14decodeToDitDahEv+0x168>
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <_ZN5pulse14decodeToDitDahEv+0x168>
				{
					DitDah[j]=1;
				}
				else
				{
					return false;
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <_ZN5pulse14decodeToDitDahEv+0x168>
				}
			}
	}
	return true;
     cd6:	81 e0       	ldi	r24, 0x01	; 1
}
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	df 90       	pop	r13
     ce6:	cf 90       	pop	r12
     ce8:	bf 90       	pop	r11
     cea:	af 90       	pop	r10
     cec:	9f 90       	pop	r9
     cee:	8f 90       	pop	r8
     cf0:	7f 90       	pop	r7
     cf2:	6f 90       	pop	r6
     cf4:	5f 90       	pop	r5
     cf6:	4f 90       	pop	r4
     cf8:	3f 90       	pop	r3
     cfa:	2f 90       	pop	r2
     cfc:	08 95       	ret

00000cfe <_ZN5pulse14getDecodedDataEPc>:
/************************************************************************/
/* void pulse::getDecodedData(char *buffer)								*/
/* input : pointer to a  buffer for storing decoded output              */
/************************************************************************/
void pulse::getDecodedData(char *buffer)
{
     cfe:	dc 01       	movw	r26, r24
     d00:	a5 5a       	subi	r26, 0xA5	; 165
     d02:	bf 4f       	sbci	r27, 0xFF	; 255
     d04:	e6 2f       	mov	r30, r22
     d06:	f7 2f       	mov	r31, r23
	for(int i=0;i<6;i++)buffer[i]=DitDah[i]+0x30;
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	8d 91       	ld	r24, X+
     d0e:	80 5d       	subi	r24, 0xD0	; 208
     d10:	81 93       	st	Z+, r24
     d12:	2f 5f       	subi	r18, 0xFF	; 255
     d14:	3f 4f       	sbci	r19, 0xFF	; 255
     d16:	26 30       	cpi	r18, 0x06	; 6
     d18:	31 05       	cpc	r19, r1
     d1a:	c1 f7       	brne	.-16     	; 0xd0c <_ZN5pulse14getDecodedDataEPc+0xe>
}
     d1c:	08 95       	ret

00000d1e <main>:
#include "uart0.h"
#include "Processor.h"
#include "morsebuzzer.h"
#include "morseToText.h"
int main(void)
{
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	cd 5e       	subi	r28, 0xED	; 237
     d28:	d1 09       	sbc	r29, r1
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
	LCD lcd;
     d34:	ce 01       	movw	r24, r28
     d36:	8c 54       	subi	r24, 0x4C	; 76
     d38:	9f 4f       	sbci	r25, 0xFF	; 255
     d3a:	d9 da       	rcall	.-2638   	; 0x2ee <_ZN3LCDC1Ev>
	pulse code;
     d3c:	ce 01       	movw	r24, r28
     d3e:	01 96       	adiw	r24, 0x01	; 1
     d40:	c8 dd       	rcall	.-1136   	; 0x8d2 <_ZN5pulseC1Ev>
	uart0 serial(57600);
     d42:	40 e0       	ldi	r20, 0x00	; 0
     d44:	51 ee       	ldi	r21, 0xE1	; 225
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	ce 01       	movw	r24, r28
     d4c:	89 51       	subi	r24, 0x19	; 25
     d4e:	9f 4f       	sbci	r25, 0xFF	; 255
     d50:	26 d1       	rcall	.+588    	; 0xf9e <_ZN5uart0C1Em>
	decoder decodeIt;
     d52:	ce 01       	movw	r24, r28
     d54:	8d 58       	subi	r24, 0x8D	; 141
     d56:	9f 4f       	sbci	r25, 0xFF	; 255
     d58:	55 dd       	rcall	.-1366   	; 0x804 <_ZN7decoderC1Ev>
	Processor motor;
     d5a:	ce 01       	movw	r24, r28
     d5c:	83 51       	subi	r24, 0x13	; 19
     d5e:	9f 4f       	sbci	r25, 0xFF	; 255
     d60:	b6 dd       	rcall	.-1172   	; 0x8ce <_ZN9ProcessorC1Ev>
	morsebuzzer buzz;
     d62:	68 e2       	ldi	r22, 0x28	; 40
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	ce 01       	movw	r24, r28
     d68:	85 51       	subi	r24, 0x15	; 21
     d6a:	9f 4f       	sbci	r25, 0xFF	; 255
     d6c:	2f db       	rcall	.-2466   	; 0x3cc <_ZN11morsebuzzerC1Ei>
	
	buzz.morseTransmit("Hello");
     d6e:	6f e3       	ldi	r22, 0x3F	; 63
     d70:	72 e0       	ldi	r23, 0x02	; 2
     d72:	ce 01       	movw	r24, r28
     d74:	85 51       	subi	r24, 0x15	; 21
     d76:	9f 4f       	sbci	r25, 0xFF	; 255
     d78:	43 dd       	rcall	.-1402   	; 0x800 <_ZN11morsebuzzer13morseTransmitEPKc>
	lcd.print(":)");
     d7a:	65 e4       	ldi	r22, 0x45	; 69
     d7c:	72 e0       	ldi	r23, 0x02	; 2
     d7e:	ce 01       	movw	r24, r28
     d80:	8c 54       	subi	r24, 0x4C	; 76
     d82:	9f 4f       	sbci	r25, 0xFF	; 255
     d84:	fb da       	rcall	.-2570   	; 0x37c <_ZN3LCD5printEPKc>
	serial.printStr("Initialised\r\n");
     d86:	68 e4       	ldi	r22, 0x48	; 72
     d88:	72 e0       	ldi	r23, 0x02	; 2
     d8a:	ce 01       	movw	r24, r28
     d8c:	89 51       	subi	r24, 0x19	; 25
     d8e:	9f 4f       	sbci	r25, 0xFF	; 255
     d90:	35 d1       	rcall	.+618    	; 0xffc <_ZN5uart08printStrEPKc>
	systime::sysTimeInit();
     d92:	cd d0       	rcall	.+410    	; 0xf2e <_ZN7systime11sysTimeInitEv>
	char data[7]="";
     d94:	c0 52       	subi	r28, 0x20	; 32
     d96:	df 4f       	sbci	r29, 0xFF	; 255
     d98:	18 82       	st	Y, r1
     d9a:	19 82       	std	Y+1, r1	; 0x01
     d9c:	1a 82       	std	Y+2, r1	; 0x02
     d9e:	1b 82       	std	Y+3, r1	; 0x03
     da0:	c0 5e       	subi	r28, 0xE0	; 224
     da2:	d0 40       	sbci	r29, 0x00	; 0
     da4:	cc 51       	subi	r28, 0x1C	; 28
     da6:	df 4f       	sbci	r29, 0xFF	; 255
     da8:	18 82       	st	Y, r1
     daa:	19 82       	std	Y+1, r1	; 0x01
     dac:	1a 82       	std	Y+2, r1	; 0x02
     dae:	c4 5e       	subi	r28, 0xE4	; 228
     db0:	d0 40       	sbci	r29, 0x00	; 0
		 if(data[1]=='0')isValid=0;		//avoiding one units of transmit
		 if(isValid>0)
		 {
		 lcd.cursor(2,10);
		 lcd.print("Ok");
		 sprintf(buffer,"T:%lu",systime::getSysTime());
     db2:	0f 2e       	mov	r0, r31
     db4:	f9 e5       	ldi	r31, 0x59	; 89
     db6:	ef 2e       	mov	r14, r31
     db8:	f2 e0       	ldi	r31, 0x02	; 2
     dba:	ff 2e       	mov	r15, r31
     dbc:	f0 2d       	mov	r31, r0
     dbe:	8e 01       	movw	r16, r28
     dc0:	04 53       	subi	r16, 0x34	; 52
     dc2:	1f 4f       	sbci	r17, 0xFF	; 255
	char buffer [20];
	
    while(1)
    {
		char  isValid;
         if(code.receiveCode()>0)
     dc4:	ce 01       	movw	r24, r28
     dc6:	01 96       	adiw	r24, 0x01	; 1
     dc8:	74 de       	rcall	.-792    	; 0xab2 <_ZN5pulse11receiveCodeEv>
		 else 
		 {
			 isValid=0;
		 }
		 
		  isValid=code.decodeToDitDah();
     dca:	ce 01       	movw	r24, r28
     dcc:	01 96       	adiw	r24, 0x01	; 1
     dce:	d0 de       	rcall	.-608    	; 0xb70 <_ZN5pulse14decodeToDitDahEv>
     dd0:	d8 2e       	mov	r13, r24
		 code.getDecodedData(data);
     dd2:	be 01       	movw	r22, r28
     dd4:	60 52       	subi	r22, 0x20	; 32
     dd6:	7f 4f       	sbci	r23, 0xFF	; 255
     dd8:	ce 01       	movw	r24, r28
     dda:	01 96       	adiw	r24, 0x01	; 1
     ddc:	90 df       	rcall	.-224    	; 0xcfe <_ZN5pulse14getDecodedDataEPc>
		 if(data[1]=='0')isValid=0;		//avoiding one units of transmit
     dde:	cf 51       	subi	r28, 0x1F	; 31
     de0:	df 4f       	sbci	r29, 0xFF	; 255
     de2:	98 81       	ld	r25, Y
     de4:	c1 5e       	subi	r28, 0xE1	; 225
     de6:	d0 40       	sbci	r29, 0x00	; 0
     de8:	90 33       	cpi	r25, 0x30	; 48
     dea:	09 f4       	brne	.+2      	; 0xdee <main+0xd0>
     dec:	6e c0       	rjmp	.+220    	; 0xeca <main+0x1ac>
		 if(isValid>0)
     dee:	dd 20       	and	r13, r13
     df0:	09 f4       	brne	.+2      	; 0xdf4 <main+0xd6>
     df2:	6b c0       	rjmp	.+214    	; 0xeca <main+0x1ac>
		 {
		 lcd.cursor(2,10);
     df4:	4a e0       	ldi	r20, 0x0A	; 10
     df6:	62 e0       	ldi	r22, 0x02	; 2
     df8:	ce 01       	movw	r24, r28
     dfa:	8c 54       	subi	r24, 0x4C	; 76
     dfc:	9f 4f       	sbci	r25, 0xFF	; 255
     dfe:	c0 da       	rcall	.-2688   	; 0x380 <_ZN3LCD6cursorEcc>
		 lcd.print("Ok");
     e00:	66 e5       	ldi	r22, 0x56	; 86
     e02:	72 e0       	ldi	r23, 0x02	; 2
     e04:	ce 01       	movw	r24, r28
     e06:	8c 54       	subi	r24, 0x4C	; 76
     e08:	9f 4f       	sbci	r25, 0xFF	; 255
     e0a:	b8 da       	rcall	.-2704   	; 0x37c <_ZN3LCD5printEPKc>
		 sprintf(buffer,"T:%lu",systime::getSysTime());
     e0c:	bf d0       	rcall	.+382    	; 0xf8c <_ZN7systime10getSysTimeEv>
     e0e:	9f 93       	push	r25
     e10:	8f 93       	push	r24
     e12:	7f 93       	push	r23
     e14:	6f 93       	push	r22
     e16:	ff 92       	push	r15
     e18:	ef 92       	push	r14
     e1a:	1f 93       	push	r17
     e1c:	0f 93       	push	r16
     e1e:	4f d2       	rcall	.+1182   	; 0x12be <sprintf>
		 data[6]=0;
     e20:	ca 51       	subi	r28, 0x1A	; 26
     e22:	df 4f       	sbci	r29, 0xFF	; 255
     e24:	18 82       	st	Y, r1
     e26:	c6 5e       	subi	r28, 0xE6	; 230
     e28:	d0 40       	sbci	r29, 0x00	; 0
		 serial.printStr(data);
     e2a:	be 01       	movw	r22, r28
     e2c:	60 52       	subi	r22, 0x20	; 32
     e2e:	7f 4f       	sbci	r23, 0xFF	; 255
     e30:	ce 01       	movw	r24, r28
     e32:	89 51       	subi	r24, 0x19	; 25
     e34:	9f 4f       	sbci	r25, 0xFF	; 255
     e36:	e2 d0       	rcall	.+452    	; 0xffc <_ZN5uart08printStrEPKc>
		 serial.printStr("\t");
     e38:	6f e5       	ldi	r22, 0x5F	; 95
     e3a:	72 e0       	ldi	r23, 0x02	; 2
     e3c:	ce 01       	movw	r24, r28
     e3e:	89 51       	subi	r24, 0x19	; 25
     e40:	9f 4f       	sbci	r25, 0xFF	; 255
     e42:	dc d0       	rcall	.+440    	; 0xffc <_ZN5uart08printStrEPKc>
		 serial.printStr(buffer);
     e44:	b8 01       	movw	r22, r16
     e46:	ce 01       	movw	r24, r28
     e48:	89 51       	subi	r24, 0x19	; 25
     e4a:	9f 4f       	sbci	r25, 0xFF	; 255
     e4c:	d7 d0       	rcall	.+430    	; 0xffc <_ZN5uart08printStrEPKc>
		 serial.write(0x0d);
     e4e:	6d e0       	ldi	r22, 0x0D	; 13
     e50:	ce 01       	movw	r24, r28
     e52:	89 51       	subi	r24, 0x19	; 25
     e54:	9f 4f       	sbci	r25, 0xFF	; 255
     e56:	ca d0       	rcall	.+404    	; 0xfec <_ZN5uart05writeEh>
		 serial.write(0x0a);
     e58:	6a e0       	ldi	r22, 0x0A	; 10
     e5a:	ce 01       	movw	r24, r28
     e5c:	89 51       	subi	r24, 0x19	; 25
     e5e:	9f 4f       	sbci	r25, 0xFF	; 255
     e60:	c5 d0       	rcall	.+394    	; 0xfec <_ZN5uart05writeEh>
		 lcd.home();
     e62:	ce 01       	movw	r24, r28
     e64:	8c 54       	subi	r24, 0x4C	; 76
     e66:	9f 4f       	sbci	r25, 0xFF	; 255
     e68:	72 da       	rcall	.-2844   	; 0x34e <_ZN3LCD4homeEv>
		 lcd.print(data);
     e6a:	be 01       	movw	r22, r28
     e6c:	60 52       	subi	r22, 0x20	; 32
     e6e:	7f 4f       	sbci	r23, 0xFF	; 255
     e70:	ce 01       	movw	r24, r28
     e72:	8c 54       	subi	r24, 0x4C	; 76
     e74:	9f 4f       	sbci	r25, 0xFF	; 255
     e76:	6e da       	rcall	.-2852   	; 0x354 <_ZN3LCD5printEPc>
		 char letter=decodeIt.decodeToLetter(data);
     e78:	be 01       	movw	r22, r28
     e7a:	60 52       	subi	r22, 0x20	; 32
     e7c:	7f 4f       	sbci	r23, 0xFF	; 255
     e7e:	ce 01       	movw	r24, r28
     e80:	8d 58       	subi	r24, 0x8D	; 141
     e82:	9f 4f       	sbci	r25, 0xFF	; 255
     e84:	cb dc       	rcall	.-1642   	; 0x81c <_ZN7decoder14decodeToLetterEPKc>
     e86:	d8 2e       	mov	r13, r24
		 motor.process(letter);
     e88:	68 2f       	mov	r22, r24
     e8a:	ce 01       	movw	r24, r28
     e8c:	83 51       	subi	r24, 0x13	; 19
     e8e:	9f 4f       	sbci	r25, 0xFF	; 255
     e90:	0f dd       	rcall	.-1506   	; 0x8b0 <_ZN9Processor7processEc>
		 lcd.cursor(1,10);
     e92:	4a e0       	ldi	r20, 0x0A	; 10
     e94:	61 e0       	ldi	r22, 0x01	; 1
     e96:	ce 01       	movw	r24, r28
     e98:	8c 54       	subi	r24, 0x4C	; 76
     e9a:	9f 4f       	sbci	r25, 0xFF	; 255
     e9c:	71 da       	rcall	.-2846   	; 0x380 <_ZN3LCD6cursorEcc>
		 lcd.print(letter);
     e9e:	6d 2d       	mov	r22, r13
     ea0:	ce 01       	movw	r24, r28
     ea2:	8c 54       	subi	r24, 0x4C	; 76
     ea4:	9f 4f       	sbci	r25, 0xFF	; 255
     ea6:	8d da       	rcall	.-2790   	; 0x3c2 <_ZN3LCD5printEc>
		 lcd.cursor(2,1);
     ea8:	41 e0       	ldi	r20, 0x01	; 1
     eaa:	62 e0       	ldi	r22, 0x02	; 2
     eac:	ce 01       	movw	r24, r28
     eae:	8c 54       	subi	r24, 0x4C	; 76
     eb0:	9f 4f       	sbci	r25, 0xFF	; 255
     eb2:	66 da       	rcall	.-2868   	; 0x380 <_ZN3LCD6cursorEcc>
		 lcd.print(buffer);
     eb4:	b8 01       	movw	r22, r16
     eb6:	ce 01       	movw	r24, r28
     eb8:	8c 54       	subi	r24, 0x4C	; 76
     eba:	9f 4f       	sbci	r25, 0xFF	; 255
     ebc:	4b da       	rcall	.-2922   	; 0x354 <_ZN3LCD5printEPc>
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	7d cf       	rjmp	.-262    	; 0xdc4 <main+0xa6>
		 }else{
			  lcd.cursor(2,10);
     eca:	4a e0       	ldi	r20, 0x0A	; 10
     ecc:	62 e0       	ldi	r22, 0x02	; 2
     ece:	ce 01       	movw	r24, r28
     ed0:	8c 54       	subi	r24, 0x4C	; 76
     ed2:	9f 4f       	sbci	r25, 0xFF	; 255
     ed4:	55 da       	rcall	.-2902   	; 0x380 <_ZN3LCD6cursorEcc>
			  lcd.print("Er");
     ed6:	61 e6       	ldi	r22, 0x61	; 97
     ed8:	72 e0       	ldi	r23, 0x02	; 2
     eda:	ce 01       	movw	r24, r28
     edc:	8c 54       	subi	r24, 0x4C	; 76
     ede:	9f 4f       	sbci	r25, 0xFF	; 255
     ee0:	4d da       	rcall	.-2918   	; 0x37c <_ZN3LCD5printEPKc>
     ee2:	70 cf       	rjmp	.-288    	; 0xdc4 <main+0xa6>

00000ee4 <__vector_35>:
//OUTPUT	: number of timer3 overflows

unsigned long getOverflows()		
{
	return overflows;	
}
     ee4:	1f 92       	push	r1
     ee6:	0f 92       	push	r0
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	0f 92       	push	r0
     eec:	11 24       	eor	r1, r1
     eee:	8f 93       	push	r24
     ef0:	9f 93       	push	r25
     ef2:	af 93       	push	r26
     ef4:	bf 93       	push	r27
     ef6:	80 91 64 02 	lds	r24, 0x0264
     efa:	90 91 65 02 	lds	r25, 0x0265
     efe:	a0 91 66 02 	lds	r26, 0x0266
     f02:	b0 91 67 02 	lds	r27, 0x0267
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	a1 1d       	adc	r26, r1
     f0a:	b1 1d       	adc	r27, r1
     f0c:	80 93 64 02 	sts	0x0264, r24
     f10:	90 93 65 02 	sts	0x0265, r25
     f14:	a0 93 66 02 	sts	0x0266, r26
     f18:	b0 93 67 02 	sts	0x0267, r27
     f1c:	bf 91       	pop	r27
     f1e:	af 91       	pop	r26
     f20:	9f 91       	pop	r25
     f22:	8f 91       	pop	r24
     f24:	0f 90       	pop	r0
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	0f 90       	pop	r0
     f2a:	1f 90       	pop	r1
     f2c:	18 95       	reti

00000f2e <_ZN7systime11sysTimeInitEv>:
//OUTPUT	: NONE
//	Initialises the Timer3 with prescaler of 1024 sync to system clock
void sysTimeInit()
{
	
	cli();							//disable interrupts
     f2e:	f8 94       	cli
	TCCR3A=0;
     f30:	10 92 90 00 	sts	0x0090, r1
	TCCR3B=(1<<CS32)|(1<<CS30);		//use prescaler of 1024
     f34:	85 e0       	ldi	r24, 0x05	; 5
     f36:	80 93 91 00 	sts	0x0091, r24
									//counting clock is now F_OSC/1024
									//corresponding to 69.44 uS on 14.7456 MHz
	TCCR3C=0;
     f3a:	10 92 92 00 	sts	0x0092, r1
	TIMSK3=1<<TOIE3;				// Enable timer overflow interrupt
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	80 93 71 00 	sts	0x0071, r24
	overflows=0;
     f44:	10 92 64 02 	sts	0x0264, r1
     f48:	10 92 65 02 	sts	0x0265, r1
     f4c:	10 92 66 02 	sts	0x0266, r1
     f50:	10 92 67 02 	sts	0x0267, r1
	TCNT3=0;						//clear timer3 counter value
     f54:	10 92 95 00 	sts	0x0095, r1
     f58:	10 92 94 00 	sts	0x0094, r1
	sei();							//Enable interrupts	
     f5c:	78 94       	sei
     f5e:	08 95       	ret

00000f60 <_ZN7systime13getSysTimeRawEv>:
//FUNCTION  : getSysTimeRaw()
//INPUT		: NONE
//OUTPUT	: returns time ticks (raw counter values with overflows) after initialisation of sysTime
unsigned long  getSysTimeRaw()			//returns the raw countervalue
{
	unsigned long temptime=TCNT3;					//get counter value at this state
     f60:	20 91 94 00 	lds	r18, 0x0094
     f64:	30 91 95 00 	lds	r19, 0x0095
	return overflows*65536+temptime;				
     f68:	80 91 64 02 	lds	r24, 0x0264
     f6c:	90 91 65 02 	lds	r25, 0x0265
     f70:	a0 91 66 02 	lds	r26, 0x0266
     f74:	b0 91 67 02 	lds	r27, 0x0267
     f78:	dc 01       	movw	r26, r24
     f7a:	99 27       	eor	r25, r25
     f7c:	88 27       	eor	r24, r24
     f7e:	bc 01       	movw	r22, r24
     f80:	cd 01       	movw	r24, r26
     f82:	62 0f       	add	r22, r18
     f84:	73 1f       	adc	r23, r19
     f86:	81 1d       	adc	r24, r1
     f88:	91 1d       	adc	r25, r1
}
     f8a:	08 95       	ret

00000f8c <_ZN7systime10getSysTimeEv>:
//FUNCTION  : getSysTime()
//INPUT		: NONE
//OUTPUT	: returns time in milli Seconds after initialisatin of sysTime
unsigned long getSysTime()		
{
	return (unsigned long)(getSysTimeRaw()*0.06944);
     f8c:	e9 df       	rcall	.-46     	; 0xf60 <_ZN7systime13getSysTimeRawEv>
     f8e:	76 d0       	rcall	.+236    	; 0x107c <__floatunsisf>
     f90:	2f e8       	ldi	r18, 0x8F	; 143
     f92:	36 e3       	ldi	r19, 0x36	; 54
     f94:	4e e8       	ldi	r20, 0x8E	; 142
     f96:	5d e3       	ldi	r21, 0x3D	; 61
     f98:	d7 d0       	rcall	.+430    	; 0x1148 <__mulsf3>
     f9a:	44 c0       	rjmp	.+136    	; 0x1024 <__fixunssfsi>
}
     f9c:	08 95       	ret

00000f9e <_ZN5uart0C1Em>:

unsigned char uart0::read(void)
{
	while(!(UCSR0A & (1<<RXC0)));		//wait for data to be received
	return UDR0;
}
     f9e:	cf 92       	push	r12
     fa0:	df 92       	push	r13
     fa2:	ef 92       	push	r14
     fa4:	ff 92       	push	r15
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	ec 01       	movw	r28, r24
     fac:	6a 01       	movw	r12, r20
     fae:	7b 01       	movw	r14, r22
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	70 e1       	ldi	r23, 0x10	; 16
     fb4:	8e e0       	ldi	r24, 0x0E	; 14
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	a7 01       	movw	r20, r14
     fba:	96 01       	movw	r18, r12
     fbc:	50 d1       	rcall	.+672    	; 0x125e <__udivmodsi4>
     fbe:	21 50       	subi	r18, 0x01	; 1
     fc0:	31 09       	sbc	r19, r1
     fc2:	30 93 c5 00 	sts	0x00C5, r19
     fc6:	20 93 c4 00 	sts	0x00C4, r18
     fca:	88 e1       	ldi	r24, 0x18	; 24
     fcc:	80 93 c1 00 	sts	0x00C1, r24
     fd0:	86 e0       	ldi	r24, 0x06	; 6
     fd2:	80 93 c2 00 	sts	0x00C2, r24
     fd6:	c8 82       	st	Y, r12
     fd8:	d9 82       	std	Y+1, r13	; 0x01
     fda:	ea 82       	std	Y+2, r14	; 0x02
     fdc:	fb 82       	std	Y+3, r15	; 0x03
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	ff 90       	pop	r15
     fe4:	ef 90       	pop	r14
     fe6:	df 90       	pop	r13
     fe8:	cf 90       	pop	r12
     fea:	08 95       	ret

00000fec <_ZN5uart05writeEh>:
     fec:	e0 ec       	ldi	r30, 0xC0	; 192
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	85 ff       	sbrs	r24, 5
     ff4:	fd cf       	rjmp	.-6      	; 0xff0 <_ZN5uart05writeEh+0x4>
     ff6:	60 93 c6 00 	sts	0x00C6, r22
     ffa:	08 95       	ret

00000ffc <_ZN5uart08printStrEPKc>:

void uart0::printStr(const char * str)
{
     ffc:	0f 93       	push	r16
     ffe:	1f 93       	push	r17
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	8c 01       	movw	r16, r24
    1006:	eb 01       	movw	r28, r22
	while(*str)
    1008:	68 81       	ld	r22, Y
    100a:	66 23       	and	r22, r22
    100c:	31 f0       	breq	.+12     	; 0x101a <_ZN5uart08printStrEPKc+0x1e>
    100e:	21 96       	adiw	r28, 0x01	; 1
	{
		write(*str++);
    1010:	c8 01       	movw	r24, r16
    1012:	ec df       	rcall	.-40     	; 0xfec <_ZN5uart05writeEh>
	return UDR0;
}

void uart0::printStr(const char * str)
{
	while(*str)
    1014:	69 91       	ld	r22, Y+
    1016:	61 11       	cpse	r22, r1
    1018:	fb cf       	rjmp	.-10     	; 0x1010 <_ZN5uart08printStrEPKc+0x14>
	{
		write(*str++);
	}
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	08 95       	ret

00001024 <__fixunssfsi>:
    1024:	70 d0       	rcall	.+224    	; 0x1106 <__fp_splitA>
    1026:	88 f0       	brcs	.+34     	; 0x104a <__fixunssfsi+0x26>
    1028:	9f 57       	subi	r25, 0x7F	; 127
    102a:	90 f0       	brcs	.+36     	; 0x1050 <__fixunssfsi+0x2c>
    102c:	b9 2f       	mov	r27, r25
    102e:	99 27       	eor	r25, r25
    1030:	b7 51       	subi	r27, 0x17	; 23
    1032:	a0 f0       	brcs	.+40     	; 0x105c <__fixunssfsi+0x38>
    1034:	d1 f0       	breq	.+52     	; 0x106a <__fixunssfsi+0x46>
    1036:	66 0f       	add	r22, r22
    1038:	77 1f       	adc	r23, r23
    103a:	88 1f       	adc	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	1a f0       	brmi	.+6      	; 0x1046 <__fixunssfsi+0x22>
    1040:	ba 95       	dec	r27
    1042:	c9 f7       	brne	.-14     	; 0x1036 <__fixunssfsi+0x12>
    1044:	12 c0       	rjmp	.+36     	; 0x106a <__fixunssfsi+0x46>
    1046:	b1 30       	cpi	r27, 0x01	; 1
    1048:	81 f0       	breq	.+32     	; 0x106a <__fixunssfsi+0x46>
    104a:	77 d0       	rcall	.+238    	; 0x113a <__fp_zero>
    104c:	b1 e0       	ldi	r27, 0x01	; 1
    104e:	08 95       	ret
    1050:	74 c0       	rjmp	.+232    	; 0x113a <__fp_zero>
    1052:	67 2f       	mov	r22, r23
    1054:	78 2f       	mov	r23, r24
    1056:	88 27       	eor	r24, r24
    1058:	b8 5f       	subi	r27, 0xF8	; 248
    105a:	39 f0       	breq	.+14     	; 0x106a <__fixunssfsi+0x46>
    105c:	b9 3f       	cpi	r27, 0xF9	; 249
    105e:	cc f3       	brlt	.-14     	; 0x1052 <__fixunssfsi+0x2e>
    1060:	86 95       	lsr	r24
    1062:	77 95       	ror	r23
    1064:	67 95       	ror	r22
    1066:	b3 95       	inc	r27
    1068:	d9 f7       	brne	.-10     	; 0x1060 <__fixunssfsi+0x3c>
    106a:	3e f4       	brtc	.+14     	; 0x107a <__fixunssfsi+0x56>
    106c:	90 95       	com	r25
    106e:	80 95       	com	r24
    1070:	70 95       	com	r23
    1072:	61 95       	neg	r22
    1074:	7f 4f       	sbci	r23, 0xFF	; 255
    1076:	8f 4f       	sbci	r24, 0xFF	; 255
    1078:	9f 4f       	sbci	r25, 0xFF	; 255
    107a:	08 95       	ret

0000107c <__floatunsisf>:
    107c:	e8 94       	clt
    107e:	09 c0       	rjmp	.+18     	; 0x1092 <__floatsisf+0x12>

00001080 <__floatsisf>:
    1080:	97 fb       	bst	r25, 7
    1082:	3e f4       	brtc	.+14     	; 0x1092 <__floatsisf+0x12>
    1084:	90 95       	com	r25
    1086:	80 95       	com	r24
    1088:	70 95       	com	r23
    108a:	61 95       	neg	r22
    108c:	7f 4f       	sbci	r23, 0xFF	; 255
    108e:	8f 4f       	sbci	r24, 0xFF	; 255
    1090:	9f 4f       	sbci	r25, 0xFF	; 255
    1092:	99 23       	and	r25, r25
    1094:	a9 f0       	breq	.+42     	; 0x10c0 <__floatsisf+0x40>
    1096:	f9 2f       	mov	r31, r25
    1098:	96 e9       	ldi	r25, 0x96	; 150
    109a:	bb 27       	eor	r27, r27
    109c:	93 95       	inc	r25
    109e:	f6 95       	lsr	r31
    10a0:	87 95       	ror	r24
    10a2:	77 95       	ror	r23
    10a4:	67 95       	ror	r22
    10a6:	b7 95       	ror	r27
    10a8:	f1 11       	cpse	r31, r1
    10aa:	f8 cf       	rjmp	.-16     	; 0x109c <__floatsisf+0x1c>
    10ac:	fa f4       	brpl	.+62     	; 0x10ec <__floatsisf+0x6c>
    10ae:	bb 0f       	add	r27, r27
    10b0:	11 f4       	brne	.+4      	; 0x10b6 <__floatsisf+0x36>
    10b2:	60 ff       	sbrs	r22, 0
    10b4:	1b c0       	rjmp	.+54     	; 0x10ec <__floatsisf+0x6c>
    10b6:	6f 5f       	subi	r22, 0xFF	; 255
    10b8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ba:	8f 4f       	sbci	r24, 0xFF	; 255
    10bc:	9f 4f       	sbci	r25, 0xFF	; 255
    10be:	16 c0       	rjmp	.+44     	; 0x10ec <__floatsisf+0x6c>
    10c0:	88 23       	and	r24, r24
    10c2:	11 f0       	breq	.+4      	; 0x10c8 <__floatsisf+0x48>
    10c4:	96 e9       	ldi	r25, 0x96	; 150
    10c6:	11 c0       	rjmp	.+34     	; 0x10ea <__floatsisf+0x6a>
    10c8:	77 23       	and	r23, r23
    10ca:	21 f0       	breq	.+8      	; 0x10d4 <__floatsisf+0x54>
    10cc:	9e e8       	ldi	r25, 0x8E	; 142
    10ce:	87 2f       	mov	r24, r23
    10d0:	76 2f       	mov	r23, r22
    10d2:	05 c0       	rjmp	.+10     	; 0x10de <__floatsisf+0x5e>
    10d4:	66 23       	and	r22, r22
    10d6:	71 f0       	breq	.+28     	; 0x10f4 <__floatsisf+0x74>
    10d8:	96 e8       	ldi	r25, 0x86	; 134
    10da:	86 2f       	mov	r24, r22
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	60 e0       	ldi	r22, 0x00	; 0
    10e0:	2a f0       	brmi	.+10     	; 0x10ec <__floatsisf+0x6c>
    10e2:	9a 95       	dec	r25
    10e4:	66 0f       	add	r22, r22
    10e6:	77 1f       	adc	r23, r23
    10e8:	88 1f       	adc	r24, r24
    10ea:	da f7       	brpl	.-10     	; 0x10e2 <__floatsisf+0x62>
    10ec:	88 0f       	add	r24, r24
    10ee:	96 95       	lsr	r25
    10f0:	87 95       	ror	r24
    10f2:	97 f9       	bld	r25, 7
    10f4:	08 95       	ret

000010f6 <__fp_split3>:
    10f6:	57 fd       	sbrc	r21, 7
    10f8:	90 58       	subi	r25, 0x80	; 128
    10fa:	44 0f       	add	r20, r20
    10fc:	55 1f       	adc	r21, r21
    10fe:	59 f0       	breq	.+22     	; 0x1116 <__fp_splitA+0x10>
    1100:	5f 3f       	cpi	r21, 0xFF	; 255
    1102:	71 f0       	breq	.+28     	; 0x1120 <__fp_splitA+0x1a>
    1104:	47 95       	ror	r20

00001106 <__fp_splitA>:
    1106:	88 0f       	add	r24, r24
    1108:	97 fb       	bst	r25, 7
    110a:	99 1f       	adc	r25, r25
    110c:	61 f0       	breq	.+24     	; 0x1126 <__fp_splitA+0x20>
    110e:	9f 3f       	cpi	r25, 0xFF	; 255
    1110:	79 f0       	breq	.+30     	; 0x1130 <__fp_splitA+0x2a>
    1112:	87 95       	ror	r24
    1114:	08 95       	ret
    1116:	12 16       	cp	r1, r18
    1118:	13 06       	cpc	r1, r19
    111a:	14 06       	cpc	r1, r20
    111c:	55 1f       	adc	r21, r21
    111e:	f2 cf       	rjmp	.-28     	; 0x1104 <__fp_split3+0xe>
    1120:	46 95       	lsr	r20
    1122:	f1 df       	rcall	.-30     	; 0x1106 <__fp_splitA>
    1124:	08 c0       	rjmp	.+16     	; 0x1136 <__fp_splitA+0x30>
    1126:	16 16       	cp	r1, r22
    1128:	17 06       	cpc	r1, r23
    112a:	18 06       	cpc	r1, r24
    112c:	99 1f       	adc	r25, r25
    112e:	f1 cf       	rjmp	.-30     	; 0x1112 <__fp_splitA+0xc>
    1130:	86 95       	lsr	r24
    1132:	71 05       	cpc	r23, r1
    1134:	61 05       	cpc	r22, r1
    1136:	08 94       	sec
    1138:	08 95       	ret

0000113a <__fp_zero>:
    113a:	e8 94       	clt

0000113c <__fp_szero>:
    113c:	bb 27       	eor	r27, r27
    113e:	66 27       	eor	r22, r22
    1140:	77 27       	eor	r23, r23
    1142:	cb 01       	movw	r24, r22
    1144:	97 f9       	bld	r25, 7
    1146:	08 95       	ret

00001148 <__mulsf3>:
    1148:	0b d0       	rcall	.+22     	; 0x1160 <__mulsf3x>
    114a:	78 c0       	rjmp	.+240    	; 0x123c <__fp_round>
    114c:	69 d0       	rcall	.+210    	; 0x1220 <__fp_pscA>
    114e:	28 f0       	brcs	.+10     	; 0x115a <__mulsf3+0x12>
    1150:	6e d0       	rcall	.+220    	; 0x122e <__fp_pscB>
    1152:	18 f0       	brcs	.+6      	; 0x115a <__mulsf3+0x12>
    1154:	95 23       	and	r25, r21
    1156:	09 f0       	breq	.+2      	; 0x115a <__mulsf3+0x12>
    1158:	5a c0       	rjmp	.+180    	; 0x120e <__fp_inf>
    115a:	5f c0       	rjmp	.+190    	; 0x121a <__fp_nan>
    115c:	11 24       	eor	r1, r1
    115e:	ee cf       	rjmp	.-36     	; 0x113c <__fp_szero>

00001160 <__mulsf3x>:
    1160:	ca df       	rcall	.-108    	; 0x10f6 <__fp_split3>
    1162:	a0 f3       	brcs	.-24     	; 0x114c <__mulsf3+0x4>

00001164 <__mulsf3_pse>:
    1164:	95 9f       	mul	r25, r21
    1166:	d1 f3       	breq	.-12     	; 0x115c <__mulsf3+0x14>
    1168:	95 0f       	add	r25, r21
    116a:	50 e0       	ldi	r21, 0x00	; 0
    116c:	55 1f       	adc	r21, r21
    116e:	62 9f       	mul	r22, r18
    1170:	f0 01       	movw	r30, r0
    1172:	72 9f       	mul	r23, r18
    1174:	bb 27       	eor	r27, r27
    1176:	f0 0d       	add	r31, r0
    1178:	b1 1d       	adc	r27, r1
    117a:	63 9f       	mul	r22, r19
    117c:	aa 27       	eor	r26, r26
    117e:	f0 0d       	add	r31, r0
    1180:	b1 1d       	adc	r27, r1
    1182:	aa 1f       	adc	r26, r26
    1184:	64 9f       	mul	r22, r20
    1186:	66 27       	eor	r22, r22
    1188:	b0 0d       	add	r27, r0
    118a:	a1 1d       	adc	r26, r1
    118c:	66 1f       	adc	r22, r22
    118e:	82 9f       	mul	r24, r18
    1190:	22 27       	eor	r18, r18
    1192:	b0 0d       	add	r27, r0
    1194:	a1 1d       	adc	r26, r1
    1196:	62 1f       	adc	r22, r18
    1198:	73 9f       	mul	r23, r19
    119a:	b0 0d       	add	r27, r0
    119c:	a1 1d       	adc	r26, r1
    119e:	62 1f       	adc	r22, r18
    11a0:	83 9f       	mul	r24, r19
    11a2:	a0 0d       	add	r26, r0
    11a4:	61 1d       	adc	r22, r1
    11a6:	22 1f       	adc	r18, r18
    11a8:	74 9f       	mul	r23, r20
    11aa:	33 27       	eor	r19, r19
    11ac:	a0 0d       	add	r26, r0
    11ae:	61 1d       	adc	r22, r1
    11b0:	23 1f       	adc	r18, r19
    11b2:	84 9f       	mul	r24, r20
    11b4:	60 0d       	add	r22, r0
    11b6:	21 1d       	adc	r18, r1
    11b8:	82 2f       	mov	r24, r18
    11ba:	76 2f       	mov	r23, r22
    11bc:	6a 2f       	mov	r22, r26
    11be:	11 24       	eor	r1, r1
    11c0:	9f 57       	subi	r25, 0x7F	; 127
    11c2:	50 40       	sbci	r21, 0x00	; 0
    11c4:	8a f0       	brmi	.+34     	; 0x11e8 <__mulsf3_pse+0x84>
    11c6:	e1 f0       	breq	.+56     	; 0x1200 <__mulsf3_pse+0x9c>
    11c8:	88 23       	and	r24, r24
    11ca:	4a f0       	brmi	.+18     	; 0x11de <__mulsf3_pse+0x7a>
    11cc:	ee 0f       	add	r30, r30
    11ce:	ff 1f       	adc	r31, r31
    11d0:	bb 1f       	adc	r27, r27
    11d2:	66 1f       	adc	r22, r22
    11d4:	77 1f       	adc	r23, r23
    11d6:	88 1f       	adc	r24, r24
    11d8:	91 50       	subi	r25, 0x01	; 1
    11da:	50 40       	sbci	r21, 0x00	; 0
    11dc:	a9 f7       	brne	.-22     	; 0x11c8 <__mulsf3_pse+0x64>
    11de:	9e 3f       	cpi	r25, 0xFE	; 254
    11e0:	51 05       	cpc	r21, r1
    11e2:	70 f0       	brcs	.+28     	; 0x1200 <__mulsf3_pse+0x9c>
    11e4:	14 c0       	rjmp	.+40     	; 0x120e <__fp_inf>
    11e6:	aa cf       	rjmp	.-172    	; 0x113c <__fp_szero>
    11e8:	5f 3f       	cpi	r21, 0xFF	; 255
    11ea:	ec f3       	brlt	.-6      	; 0x11e6 <__mulsf3_pse+0x82>
    11ec:	98 3e       	cpi	r25, 0xE8	; 232
    11ee:	dc f3       	brlt	.-10     	; 0x11e6 <__mulsf3_pse+0x82>
    11f0:	86 95       	lsr	r24
    11f2:	77 95       	ror	r23
    11f4:	67 95       	ror	r22
    11f6:	b7 95       	ror	r27
    11f8:	f7 95       	ror	r31
    11fa:	e7 95       	ror	r30
    11fc:	9f 5f       	subi	r25, 0xFF	; 255
    11fe:	c1 f7       	brne	.-16     	; 0x11f0 <__mulsf3_pse+0x8c>
    1200:	fe 2b       	or	r31, r30
    1202:	88 0f       	add	r24, r24
    1204:	91 1d       	adc	r25, r1
    1206:	96 95       	lsr	r25
    1208:	87 95       	ror	r24
    120a:	97 f9       	bld	r25, 7
    120c:	08 95       	ret

0000120e <__fp_inf>:
    120e:	97 f9       	bld	r25, 7
    1210:	9f 67       	ori	r25, 0x7F	; 127
    1212:	80 e8       	ldi	r24, 0x80	; 128
    1214:	70 e0       	ldi	r23, 0x00	; 0
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	08 95       	ret

0000121a <__fp_nan>:
    121a:	9f ef       	ldi	r25, 0xFF	; 255
    121c:	80 ec       	ldi	r24, 0xC0	; 192
    121e:	08 95       	ret

00001220 <__fp_pscA>:
    1220:	00 24       	eor	r0, r0
    1222:	0a 94       	dec	r0
    1224:	16 16       	cp	r1, r22
    1226:	17 06       	cpc	r1, r23
    1228:	18 06       	cpc	r1, r24
    122a:	09 06       	cpc	r0, r25
    122c:	08 95       	ret

0000122e <__fp_pscB>:
    122e:	00 24       	eor	r0, r0
    1230:	0a 94       	dec	r0
    1232:	12 16       	cp	r1, r18
    1234:	13 06       	cpc	r1, r19
    1236:	14 06       	cpc	r1, r20
    1238:	05 06       	cpc	r0, r21
    123a:	08 95       	ret

0000123c <__fp_round>:
    123c:	09 2e       	mov	r0, r25
    123e:	03 94       	inc	r0
    1240:	00 0c       	add	r0, r0
    1242:	11 f4       	brne	.+4      	; 0x1248 <__fp_round+0xc>
    1244:	88 23       	and	r24, r24
    1246:	52 f0       	brmi	.+20     	; 0x125c <__fp_round+0x20>
    1248:	bb 0f       	add	r27, r27
    124a:	40 f4       	brcc	.+16     	; 0x125c <__fp_round+0x20>
    124c:	bf 2b       	or	r27, r31
    124e:	11 f4       	brne	.+4      	; 0x1254 <__fp_round+0x18>
    1250:	60 ff       	sbrs	r22, 0
    1252:	04 c0       	rjmp	.+8      	; 0x125c <__fp_round+0x20>
    1254:	6f 5f       	subi	r22, 0xFF	; 255
    1256:	7f 4f       	sbci	r23, 0xFF	; 255
    1258:	8f 4f       	sbci	r24, 0xFF	; 255
    125a:	9f 4f       	sbci	r25, 0xFF	; 255
    125c:	08 95       	ret

0000125e <__udivmodsi4>:
    125e:	a1 e2       	ldi	r26, 0x21	; 33
    1260:	1a 2e       	mov	r1, r26
    1262:	aa 1b       	sub	r26, r26
    1264:	bb 1b       	sub	r27, r27
    1266:	fd 01       	movw	r30, r26
    1268:	0d c0       	rjmp	.+26     	; 0x1284 <__udivmodsi4_ep>

0000126a <__udivmodsi4_loop>:
    126a:	aa 1f       	adc	r26, r26
    126c:	bb 1f       	adc	r27, r27
    126e:	ee 1f       	adc	r30, r30
    1270:	ff 1f       	adc	r31, r31
    1272:	a2 17       	cp	r26, r18
    1274:	b3 07       	cpc	r27, r19
    1276:	e4 07       	cpc	r30, r20
    1278:	f5 07       	cpc	r31, r21
    127a:	20 f0       	brcs	.+8      	; 0x1284 <__udivmodsi4_ep>
    127c:	a2 1b       	sub	r26, r18
    127e:	b3 0b       	sbc	r27, r19
    1280:	e4 0b       	sbc	r30, r20
    1282:	f5 0b       	sbc	r31, r21

00001284 <__udivmodsi4_ep>:
    1284:	66 1f       	adc	r22, r22
    1286:	77 1f       	adc	r23, r23
    1288:	88 1f       	adc	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	1a 94       	dec	r1
    128e:	69 f7       	brne	.-38     	; 0x126a <__udivmodsi4_loop>
    1290:	60 95       	com	r22
    1292:	70 95       	com	r23
    1294:	80 95       	com	r24
    1296:	90 95       	com	r25
    1298:	9b 01       	movw	r18, r22
    129a:	ac 01       	movw	r20, r24
    129c:	bd 01       	movw	r22, r26
    129e:	cf 01       	movw	r24, r30
    12a0:	08 95       	ret

000012a2 <__tablejump2__>:
    12a2:	ee 0f       	add	r30, r30
    12a4:	ff 1f       	adc	r31, r31

000012a6 <__tablejump__>:
    12a6:	05 90       	lpm	r0, Z+
    12a8:	f4 91       	lpm	r31, Z
    12aa:	e0 2d       	mov	r30, r0
    12ac:	19 94       	eijmp

000012ae <toupper>:
    12ae:	91 11       	cpse	r25, r1
    12b0:	08 95       	ret
    12b2:	81 56       	subi	r24, 0x61	; 97
    12b4:	8a 51       	subi	r24, 0x1A	; 26
    12b6:	08 f4       	brcc	.+2      	; 0x12ba <toupper+0xc>
    12b8:	80 52       	subi	r24, 0x20	; 32
    12ba:	85 58       	subi	r24, 0x85	; 133
    12bc:	08 95       	ret

000012be <sprintf>:
    12be:	0f 93       	push	r16
    12c0:	1f 93       	push	r17
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	2e 97       	sbiw	r28, 0x0e	; 14
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	0e 89       	ldd	r16, Y+22	; 0x16
    12d8:	1f 89       	ldd	r17, Y+23	; 0x17
    12da:	86 e0       	ldi	r24, 0x06	; 6
    12dc:	8c 83       	std	Y+4, r24	; 0x04
    12de:	1a 83       	std	Y+2, r17	; 0x02
    12e0:	09 83       	std	Y+1, r16	; 0x01
    12e2:	8f ef       	ldi	r24, 0xFF	; 255
    12e4:	9f e7       	ldi	r25, 0x7F	; 127
    12e6:	9e 83       	std	Y+6, r25	; 0x06
    12e8:	8d 83       	std	Y+5, r24	; 0x05
    12ea:	ae 01       	movw	r20, r28
    12ec:	46 5e       	subi	r20, 0xE6	; 230
    12ee:	5f 4f       	sbci	r21, 0xFF	; 255
    12f0:	68 8d       	ldd	r22, Y+24	; 0x18
    12f2:	79 8d       	ldd	r23, Y+25	; 0x19
    12f4:	ce 01       	movw	r24, r28
    12f6:	01 96       	adiw	r24, 0x01	; 1
    12f8:	10 d0       	rcall	.+32     	; 0x131a <vfprintf>
    12fa:	ef 81       	ldd	r30, Y+7	; 0x07
    12fc:	f8 85       	ldd	r31, Y+8	; 0x08
    12fe:	e0 0f       	add	r30, r16
    1300:	f1 1f       	adc	r31, r17
    1302:	10 82       	st	Z, r1
    1304:	2e 96       	adiw	r28, 0x0e	; 14
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	1f 91       	pop	r17
    1316:	0f 91       	pop	r16
    1318:	08 95       	ret

0000131a <vfprintf>:
    131a:	2f 92       	push	r2
    131c:	3f 92       	push	r3
    131e:	4f 92       	push	r4
    1320:	5f 92       	push	r5
    1322:	6f 92       	push	r6
    1324:	7f 92       	push	r7
    1326:	8f 92       	push	r8
    1328:	9f 92       	push	r9
    132a:	af 92       	push	r10
    132c:	bf 92       	push	r11
    132e:	cf 92       	push	r12
    1330:	df 92       	push	r13
    1332:	ef 92       	push	r14
    1334:	ff 92       	push	r15
    1336:	0f 93       	push	r16
    1338:	1f 93       	push	r17
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	2c 97       	sbiw	r28, 0x0c	; 12
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	7c 01       	movw	r14, r24
    1350:	6b 01       	movw	r12, r22
    1352:	8a 01       	movw	r16, r20
    1354:	fc 01       	movw	r30, r24
    1356:	17 82       	std	Z+7, r1	; 0x07
    1358:	16 82       	std	Z+6, r1	; 0x06
    135a:	83 81       	ldd	r24, Z+3	; 0x03
    135c:	81 ff       	sbrs	r24, 1
    135e:	b0 c1       	rjmp	.+864    	; 0x16c0 <vfprintf+0x3a6>
    1360:	ce 01       	movw	r24, r28
    1362:	01 96       	adiw	r24, 0x01	; 1
    1364:	4c 01       	movw	r8, r24
    1366:	f7 01       	movw	r30, r14
    1368:	93 81       	ldd	r25, Z+3	; 0x03
    136a:	f6 01       	movw	r30, r12
    136c:	93 fd       	sbrc	r25, 3
    136e:	85 91       	lpm	r24, Z+
    1370:	93 ff       	sbrs	r25, 3
    1372:	81 91       	ld	r24, Z+
    1374:	6f 01       	movw	r12, r30
    1376:	88 23       	and	r24, r24
    1378:	09 f4       	brne	.+2      	; 0x137c <vfprintf+0x62>
    137a:	9e c1       	rjmp	.+828    	; 0x16b8 <vfprintf+0x39e>
    137c:	85 32       	cpi	r24, 0x25	; 37
    137e:	39 f4       	brne	.+14     	; 0x138e <vfprintf+0x74>
    1380:	93 fd       	sbrc	r25, 3
    1382:	85 91       	lpm	r24, Z+
    1384:	93 ff       	sbrs	r25, 3
    1386:	81 91       	ld	r24, Z+
    1388:	6f 01       	movw	r12, r30
    138a:	85 32       	cpi	r24, 0x25	; 37
    138c:	21 f4       	brne	.+8      	; 0x1396 <vfprintf+0x7c>
    138e:	b7 01       	movw	r22, r14
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	c7 d1       	rcall	.+910    	; 0x1722 <fputc>
    1394:	e8 cf       	rjmp	.-48     	; 0x1366 <vfprintf+0x4c>
    1396:	51 2c       	mov	r5, r1
    1398:	31 2c       	mov	r3, r1
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	20 32       	cpi	r18, 0x20	; 32
    139e:	a0 f4       	brcc	.+40     	; 0x13c8 <vfprintf+0xae>
    13a0:	8b 32       	cpi	r24, 0x2B	; 43
    13a2:	69 f0       	breq	.+26     	; 0x13be <vfprintf+0xa4>
    13a4:	30 f4       	brcc	.+12     	; 0x13b2 <vfprintf+0x98>
    13a6:	80 32       	cpi	r24, 0x20	; 32
    13a8:	59 f0       	breq	.+22     	; 0x13c0 <vfprintf+0xa6>
    13aa:	83 32       	cpi	r24, 0x23	; 35
    13ac:	69 f4       	brne	.+26     	; 0x13c8 <vfprintf+0xae>
    13ae:	20 61       	ori	r18, 0x10	; 16
    13b0:	2c c0       	rjmp	.+88     	; 0x140a <vfprintf+0xf0>
    13b2:	8d 32       	cpi	r24, 0x2D	; 45
    13b4:	39 f0       	breq	.+14     	; 0x13c4 <vfprintf+0xaa>
    13b6:	80 33       	cpi	r24, 0x30	; 48
    13b8:	39 f4       	brne	.+14     	; 0x13c8 <vfprintf+0xae>
    13ba:	21 60       	ori	r18, 0x01	; 1
    13bc:	26 c0       	rjmp	.+76     	; 0x140a <vfprintf+0xf0>
    13be:	22 60       	ori	r18, 0x02	; 2
    13c0:	24 60       	ori	r18, 0x04	; 4
    13c2:	23 c0       	rjmp	.+70     	; 0x140a <vfprintf+0xf0>
    13c4:	28 60       	ori	r18, 0x08	; 8
    13c6:	21 c0       	rjmp	.+66     	; 0x140a <vfprintf+0xf0>
    13c8:	27 fd       	sbrc	r18, 7
    13ca:	27 c0       	rjmp	.+78     	; 0x141a <vfprintf+0x100>
    13cc:	30 ed       	ldi	r19, 0xD0	; 208
    13ce:	38 0f       	add	r19, r24
    13d0:	3a 30       	cpi	r19, 0x0A	; 10
    13d2:	78 f4       	brcc	.+30     	; 0x13f2 <vfprintf+0xd8>
    13d4:	26 ff       	sbrs	r18, 6
    13d6:	06 c0       	rjmp	.+12     	; 0x13e4 <vfprintf+0xca>
    13d8:	fa e0       	ldi	r31, 0x0A	; 10
    13da:	5f 9e       	mul	r5, r31
    13dc:	30 0d       	add	r19, r0
    13de:	11 24       	eor	r1, r1
    13e0:	53 2e       	mov	r5, r19
    13e2:	13 c0       	rjmp	.+38     	; 0x140a <vfprintf+0xf0>
    13e4:	8a e0       	ldi	r24, 0x0A	; 10
    13e6:	38 9e       	mul	r3, r24
    13e8:	30 0d       	add	r19, r0
    13ea:	11 24       	eor	r1, r1
    13ec:	33 2e       	mov	r3, r19
    13ee:	20 62       	ori	r18, 0x20	; 32
    13f0:	0c c0       	rjmp	.+24     	; 0x140a <vfprintf+0xf0>
    13f2:	8e 32       	cpi	r24, 0x2E	; 46
    13f4:	21 f4       	brne	.+8      	; 0x13fe <vfprintf+0xe4>
    13f6:	26 fd       	sbrc	r18, 6
    13f8:	5f c1       	rjmp	.+702    	; 0x16b8 <vfprintf+0x39e>
    13fa:	20 64       	ori	r18, 0x40	; 64
    13fc:	06 c0       	rjmp	.+12     	; 0x140a <vfprintf+0xf0>
    13fe:	8c 36       	cpi	r24, 0x6C	; 108
    1400:	11 f4       	brne	.+4      	; 0x1406 <vfprintf+0xec>
    1402:	20 68       	ori	r18, 0x80	; 128
    1404:	02 c0       	rjmp	.+4      	; 0x140a <vfprintf+0xf0>
    1406:	88 36       	cpi	r24, 0x68	; 104
    1408:	41 f4       	brne	.+16     	; 0x141a <vfprintf+0x100>
    140a:	f6 01       	movw	r30, r12
    140c:	93 fd       	sbrc	r25, 3
    140e:	85 91       	lpm	r24, Z+
    1410:	93 ff       	sbrs	r25, 3
    1412:	81 91       	ld	r24, Z+
    1414:	6f 01       	movw	r12, r30
    1416:	81 11       	cpse	r24, r1
    1418:	c1 cf       	rjmp	.-126    	; 0x139c <vfprintf+0x82>
    141a:	98 2f       	mov	r25, r24
    141c:	9f 7d       	andi	r25, 0xDF	; 223
    141e:	95 54       	subi	r25, 0x45	; 69
    1420:	93 30       	cpi	r25, 0x03	; 3
    1422:	28 f4       	brcc	.+10     	; 0x142e <vfprintf+0x114>
    1424:	0c 5f       	subi	r16, 0xFC	; 252
    1426:	1f 4f       	sbci	r17, 0xFF	; 255
    1428:	ff e3       	ldi	r31, 0x3F	; 63
    142a:	f9 83       	std	Y+1, r31	; 0x01
    142c:	0d c0       	rjmp	.+26     	; 0x1448 <vfprintf+0x12e>
    142e:	83 36       	cpi	r24, 0x63	; 99
    1430:	31 f0       	breq	.+12     	; 0x143e <vfprintf+0x124>
    1432:	83 37       	cpi	r24, 0x73	; 115
    1434:	71 f0       	breq	.+28     	; 0x1452 <vfprintf+0x138>
    1436:	83 35       	cpi	r24, 0x53	; 83
    1438:	09 f0       	breq	.+2      	; 0x143c <vfprintf+0x122>
    143a:	57 c0       	rjmp	.+174    	; 0x14ea <vfprintf+0x1d0>
    143c:	21 c0       	rjmp	.+66     	; 0x1480 <vfprintf+0x166>
    143e:	f8 01       	movw	r30, r16
    1440:	80 81       	ld	r24, Z
    1442:	89 83       	std	Y+1, r24	; 0x01
    1444:	0e 5f       	subi	r16, 0xFE	; 254
    1446:	1f 4f       	sbci	r17, 0xFF	; 255
    1448:	44 24       	eor	r4, r4
    144a:	43 94       	inc	r4
    144c:	51 2c       	mov	r5, r1
    144e:	54 01       	movw	r10, r8
    1450:	14 c0       	rjmp	.+40     	; 0x147a <vfprintf+0x160>
    1452:	38 01       	movw	r6, r16
    1454:	f2 e0       	ldi	r31, 0x02	; 2
    1456:	6f 0e       	add	r6, r31
    1458:	71 1c       	adc	r7, r1
    145a:	f8 01       	movw	r30, r16
    145c:	a0 80       	ld	r10, Z
    145e:	b1 80       	ldd	r11, Z+1	; 0x01
    1460:	26 ff       	sbrs	r18, 6
    1462:	03 c0       	rjmp	.+6      	; 0x146a <vfprintf+0x150>
    1464:	65 2d       	mov	r22, r5
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	02 c0       	rjmp	.+4      	; 0x146e <vfprintf+0x154>
    146a:	6f ef       	ldi	r22, 0xFF	; 255
    146c:	7f ef       	ldi	r23, 0xFF	; 255
    146e:	c5 01       	movw	r24, r10
    1470:	2c 87       	std	Y+12, r18	; 0x0c
    1472:	4c d1       	rcall	.+664    	; 0x170c <strnlen>
    1474:	2c 01       	movw	r4, r24
    1476:	83 01       	movw	r16, r6
    1478:	2c 85       	ldd	r18, Y+12	; 0x0c
    147a:	2f 77       	andi	r18, 0x7F	; 127
    147c:	22 2e       	mov	r2, r18
    147e:	16 c0       	rjmp	.+44     	; 0x14ac <vfprintf+0x192>
    1480:	38 01       	movw	r6, r16
    1482:	f2 e0       	ldi	r31, 0x02	; 2
    1484:	6f 0e       	add	r6, r31
    1486:	71 1c       	adc	r7, r1
    1488:	f8 01       	movw	r30, r16
    148a:	a0 80       	ld	r10, Z
    148c:	b1 80       	ldd	r11, Z+1	; 0x01
    148e:	26 ff       	sbrs	r18, 6
    1490:	03 c0       	rjmp	.+6      	; 0x1498 <vfprintf+0x17e>
    1492:	65 2d       	mov	r22, r5
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	02 c0       	rjmp	.+4      	; 0x149c <vfprintf+0x182>
    1498:	6f ef       	ldi	r22, 0xFF	; 255
    149a:	7f ef       	ldi	r23, 0xFF	; 255
    149c:	c5 01       	movw	r24, r10
    149e:	2c 87       	std	Y+12, r18	; 0x0c
    14a0:	2a d1       	rcall	.+596    	; 0x16f6 <strnlen_P>
    14a2:	2c 01       	movw	r4, r24
    14a4:	2c 85       	ldd	r18, Y+12	; 0x0c
    14a6:	20 68       	ori	r18, 0x80	; 128
    14a8:	22 2e       	mov	r2, r18
    14aa:	83 01       	movw	r16, r6
    14ac:	23 fc       	sbrc	r2, 3
    14ae:	19 c0       	rjmp	.+50     	; 0x14e2 <vfprintf+0x1c8>
    14b0:	83 2d       	mov	r24, r3
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	48 16       	cp	r4, r24
    14b6:	59 06       	cpc	r5, r25
    14b8:	a0 f4       	brcc	.+40     	; 0x14e2 <vfprintf+0x1c8>
    14ba:	b7 01       	movw	r22, r14
    14bc:	80 e2       	ldi	r24, 0x20	; 32
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	30 d1       	rcall	.+608    	; 0x1722 <fputc>
    14c2:	3a 94       	dec	r3
    14c4:	f5 cf       	rjmp	.-22     	; 0x14b0 <vfprintf+0x196>
    14c6:	f5 01       	movw	r30, r10
    14c8:	27 fc       	sbrc	r2, 7
    14ca:	85 91       	lpm	r24, Z+
    14cc:	27 fe       	sbrs	r2, 7
    14ce:	81 91       	ld	r24, Z+
    14d0:	5f 01       	movw	r10, r30
    14d2:	b7 01       	movw	r22, r14
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	25 d1       	rcall	.+586    	; 0x1722 <fputc>
    14d8:	31 10       	cpse	r3, r1
    14da:	3a 94       	dec	r3
    14dc:	f1 e0       	ldi	r31, 0x01	; 1
    14de:	4f 1a       	sub	r4, r31
    14e0:	51 08       	sbc	r5, r1
    14e2:	41 14       	cp	r4, r1
    14e4:	51 04       	cpc	r5, r1
    14e6:	79 f7       	brne	.-34     	; 0x14c6 <vfprintf+0x1ac>
    14e8:	de c0       	rjmp	.+444    	; 0x16a6 <vfprintf+0x38c>
    14ea:	84 36       	cpi	r24, 0x64	; 100
    14ec:	11 f0       	breq	.+4      	; 0x14f2 <vfprintf+0x1d8>
    14ee:	89 36       	cpi	r24, 0x69	; 105
    14f0:	31 f5       	brne	.+76     	; 0x153e <vfprintf+0x224>
    14f2:	f8 01       	movw	r30, r16
    14f4:	27 ff       	sbrs	r18, 7
    14f6:	07 c0       	rjmp	.+14     	; 0x1506 <vfprintf+0x1ec>
    14f8:	60 81       	ld	r22, Z
    14fa:	71 81       	ldd	r23, Z+1	; 0x01
    14fc:	82 81       	ldd	r24, Z+2	; 0x02
    14fe:	93 81       	ldd	r25, Z+3	; 0x03
    1500:	0c 5f       	subi	r16, 0xFC	; 252
    1502:	1f 4f       	sbci	r17, 0xFF	; 255
    1504:	08 c0       	rjmp	.+16     	; 0x1516 <vfprintf+0x1fc>
    1506:	60 81       	ld	r22, Z
    1508:	71 81       	ldd	r23, Z+1	; 0x01
    150a:	88 27       	eor	r24, r24
    150c:	77 fd       	sbrc	r23, 7
    150e:	80 95       	com	r24
    1510:	98 2f       	mov	r25, r24
    1512:	0e 5f       	subi	r16, 0xFE	; 254
    1514:	1f 4f       	sbci	r17, 0xFF	; 255
    1516:	2f 76       	andi	r18, 0x6F	; 111
    1518:	b2 2e       	mov	r11, r18
    151a:	97 ff       	sbrs	r25, 7
    151c:	09 c0       	rjmp	.+18     	; 0x1530 <vfprintf+0x216>
    151e:	90 95       	com	r25
    1520:	80 95       	com	r24
    1522:	70 95       	com	r23
    1524:	61 95       	neg	r22
    1526:	7f 4f       	sbci	r23, 0xFF	; 255
    1528:	8f 4f       	sbci	r24, 0xFF	; 255
    152a:	9f 4f       	sbci	r25, 0xFF	; 255
    152c:	20 68       	ori	r18, 0x80	; 128
    152e:	b2 2e       	mov	r11, r18
    1530:	2a e0       	ldi	r18, 0x0A	; 10
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	a4 01       	movw	r20, r8
    1536:	27 d1       	rcall	.+590    	; 0x1786 <__ultoa_invert>
    1538:	a8 2e       	mov	r10, r24
    153a:	a8 18       	sub	r10, r8
    153c:	43 c0       	rjmp	.+134    	; 0x15c4 <vfprintf+0x2aa>
    153e:	85 37       	cpi	r24, 0x75	; 117
    1540:	29 f4       	brne	.+10     	; 0x154c <vfprintf+0x232>
    1542:	2f 7e       	andi	r18, 0xEF	; 239
    1544:	b2 2e       	mov	r11, r18
    1546:	2a e0       	ldi	r18, 0x0A	; 10
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	25 c0       	rjmp	.+74     	; 0x1596 <vfprintf+0x27c>
    154c:	f2 2f       	mov	r31, r18
    154e:	f9 7f       	andi	r31, 0xF9	; 249
    1550:	bf 2e       	mov	r11, r31
    1552:	8f 36       	cpi	r24, 0x6F	; 111
    1554:	c1 f0       	breq	.+48     	; 0x1586 <vfprintf+0x26c>
    1556:	18 f4       	brcc	.+6      	; 0x155e <vfprintf+0x244>
    1558:	88 35       	cpi	r24, 0x58	; 88
    155a:	79 f0       	breq	.+30     	; 0x157a <vfprintf+0x260>
    155c:	ad c0       	rjmp	.+346    	; 0x16b8 <vfprintf+0x39e>
    155e:	80 37       	cpi	r24, 0x70	; 112
    1560:	19 f0       	breq	.+6      	; 0x1568 <vfprintf+0x24e>
    1562:	88 37       	cpi	r24, 0x78	; 120
    1564:	21 f0       	breq	.+8      	; 0x156e <vfprintf+0x254>
    1566:	a8 c0       	rjmp	.+336    	; 0x16b8 <vfprintf+0x39e>
    1568:	2f 2f       	mov	r18, r31
    156a:	20 61       	ori	r18, 0x10	; 16
    156c:	b2 2e       	mov	r11, r18
    156e:	b4 fe       	sbrs	r11, 4
    1570:	0d c0       	rjmp	.+26     	; 0x158c <vfprintf+0x272>
    1572:	8b 2d       	mov	r24, r11
    1574:	84 60       	ori	r24, 0x04	; 4
    1576:	b8 2e       	mov	r11, r24
    1578:	09 c0       	rjmp	.+18     	; 0x158c <vfprintf+0x272>
    157a:	24 ff       	sbrs	r18, 4
    157c:	0a c0       	rjmp	.+20     	; 0x1592 <vfprintf+0x278>
    157e:	9f 2f       	mov	r25, r31
    1580:	96 60       	ori	r25, 0x06	; 6
    1582:	b9 2e       	mov	r11, r25
    1584:	06 c0       	rjmp	.+12     	; 0x1592 <vfprintf+0x278>
    1586:	28 e0       	ldi	r18, 0x08	; 8
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	05 c0       	rjmp	.+10     	; 0x1596 <vfprintf+0x27c>
    158c:	20 e1       	ldi	r18, 0x10	; 16
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <vfprintf+0x27c>
    1592:	20 e1       	ldi	r18, 0x10	; 16
    1594:	32 e0       	ldi	r19, 0x02	; 2
    1596:	f8 01       	movw	r30, r16
    1598:	b7 fe       	sbrs	r11, 7
    159a:	07 c0       	rjmp	.+14     	; 0x15aa <vfprintf+0x290>
    159c:	60 81       	ld	r22, Z
    159e:	71 81       	ldd	r23, Z+1	; 0x01
    15a0:	82 81       	ldd	r24, Z+2	; 0x02
    15a2:	93 81       	ldd	r25, Z+3	; 0x03
    15a4:	0c 5f       	subi	r16, 0xFC	; 252
    15a6:	1f 4f       	sbci	r17, 0xFF	; 255
    15a8:	06 c0       	rjmp	.+12     	; 0x15b6 <vfprintf+0x29c>
    15aa:	60 81       	ld	r22, Z
    15ac:	71 81       	ldd	r23, Z+1	; 0x01
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 5f       	subi	r16, 0xFE	; 254
    15b4:	1f 4f       	sbci	r17, 0xFF	; 255
    15b6:	a4 01       	movw	r20, r8
    15b8:	e6 d0       	rcall	.+460    	; 0x1786 <__ultoa_invert>
    15ba:	a8 2e       	mov	r10, r24
    15bc:	a8 18       	sub	r10, r8
    15be:	fb 2d       	mov	r31, r11
    15c0:	ff 77       	andi	r31, 0x7F	; 127
    15c2:	bf 2e       	mov	r11, r31
    15c4:	b6 fe       	sbrs	r11, 6
    15c6:	0b c0       	rjmp	.+22     	; 0x15de <vfprintf+0x2c4>
    15c8:	2b 2d       	mov	r18, r11
    15ca:	2e 7f       	andi	r18, 0xFE	; 254
    15cc:	a5 14       	cp	r10, r5
    15ce:	50 f4       	brcc	.+20     	; 0x15e4 <vfprintf+0x2ca>
    15d0:	b4 fe       	sbrs	r11, 4
    15d2:	0a c0       	rjmp	.+20     	; 0x15e8 <vfprintf+0x2ce>
    15d4:	b2 fc       	sbrc	r11, 2
    15d6:	08 c0       	rjmp	.+16     	; 0x15e8 <vfprintf+0x2ce>
    15d8:	2b 2d       	mov	r18, r11
    15da:	2e 7e       	andi	r18, 0xEE	; 238
    15dc:	05 c0       	rjmp	.+10     	; 0x15e8 <vfprintf+0x2ce>
    15de:	7a 2c       	mov	r7, r10
    15e0:	2b 2d       	mov	r18, r11
    15e2:	03 c0       	rjmp	.+6      	; 0x15ea <vfprintf+0x2d0>
    15e4:	7a 2c       	mov	r7, r10
    15e6:	01 c0       	rjmp	.+2      	; 0x15ea <vfprintf+0x2d0>
    15e8:	75 2c       	mov	r7, r5
    15ea:	24 ff       	sbrs	r18, 4
    15ec:	0d c0       	rjmp	.+26     	; 0x1608 <vfprintf+0x2ee>
    15ee:	fe 01       	movw	r30, r28
    15f0:	ea 0d       	add	r30, r10
    15f2:	f1 1d       	adc	r31, r1
    15f4:	80 81       	ld	r24, Z
    15f6:	80 33       	cpi	r24, 0x30	; 48
    15f8:	11 f4       	brne	.+4      	; 0x15fe <vfprintf+0x2e4>
    15fa:	29 7e       	andi	r18, 0xE9	; 233
    15fc:	09 c0       	rjmp	.+18     	; 0x1610 <vfprintf+0x2f6>
    15fe:	22 ff       	sbrs	r18, 2
    1600:	06 c0       	rjmp	.+12     	; 0x160e <vfprintf+0x2f4>
    1602:	73 94       	inc	r7
    1604:	73 94       	inc	r7
    1606:	04 c0       	rjmp	.+8      	; 0x1610 <vfprintf+0x2f6>
    1608:	82 2f       	mov	r24, r18
    160a:	86 78       	andi	r24, 0x86	; 134
    160c:	09 f0       	breq	.+2      	; 0x1610 <vfprintf+0x2f6>
    160e:	73 94       	inc	r7
    1610:	23 fd       	sbrc	r18, 3
    1612:	12 c0       	rjmp	.+36     	; 0x1638 <vfprintf+0x31e>
    1614:	20 ff       	sbrs	r18, 0
    1616:	06 c0       	rjmp	.+12     	; 0x1624 <vfprintf+0x30a>
    1618:	5a 2c       	mov	r5, r10
    161a:	73 14       	cp	r7, r3
    161c:	18 f4       	brcc	.+6      	; 0x1624 <vfprintf+0x30a>
    161e:	53 0c       	add	r5, r3
    1620:	57 18       	sub	r5, r7
    1622:	73 2c       	mov	r7, r3
    1624:	73 14       	cp	r7, r3
    1626:	60 f4       	brcc	.+24     	; 0x1640 <vfprintf+0x326>
    1628:	b7 01       	movw	r22, r14
    162a:	80 e2       	ldi	r24, 0x20	; 32
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	2c 87       	std	Y+12, r18	; 0x0c
    1630:	78 d0       	rcall	.+240    	; 0x1722 <fputc>
    1632:	73 94       	inc	r7
    1634:	2c 85       	ldd	r18, Y+12	; 0x0c
    1636:	f6 cf       	rjmp	.-20     	; 0x1624 <vfprintf+0x30a>
    1638:	73 14       	cp	r7, r3
    163a:	10 f4       	brcc	.+4      	; 0x1640 <vfprintf+0x326>
    163c:	37 18       	sub	r3, r7
    163e:	01 c0       	rjmp	.+2      	; 0x1642 <vfprintf+0x328>
    1640:	31 2c       	mov	r3, r1
    1642:	24 ff       	sbrs	r18, 4
    1644:	11 c0       	rjmp	.+34     	; 0x1668 <vfprintf+0x34e>
    1646:	b7 01       	movw	r22, r14
    1648:	80 e3       	ldi	r24, 0x30	; 48
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	2c 87       	std	Y+12, r18	; 0x0c
    164e:	69 d0       	rcall	.+210    	; 0x1722 <fputc>
    1650:	2c 85       	ldd	r18, Y+12	; 0x0c
    1652:	22 ff       	sbrs	r18, 2
    1654:	16 c0       	rjmp	.+44     	; 0x1682 <vfprintf+0x368>
    1656:	21 ff       	sbrs	r18, 1
    1658:	03 c0       	rjmp	.+6      	; 0x1660 <vfprintf+0x346>
    165a:	88 e5       	ldi	r24, 0x58	; 88
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <vfprintf+0x34a>
    1660:	88 e7       	ldi	r24, 0x78	; 120
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	b7 01       	movw	r22, r14
    1666:	0c c0       	rjmp	.+24     	; 0x1680 <vfprintf+0x366>
    1668:	82 2f       	mov	r24, r18
    166a:	86 78       	andi	r24, 0x86	; 134
    166c:	51 f0       	breq	.+20     	; 0x1682 <vfprintf+0x368>
    166e:	21 fd       	sbrc	r18, 1
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <vfprintf+0x35c>
    1672:	80 e2       	ldi	r24, 0x20	; 32
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <vfprintf+0x35e>
    1676:	8b e2       	ldi	r24, 0x2B	; 43
    1678:	27 fd       	sbrc	r18, 7
    167a:	8d e2       	ldi	r24, 0x2D	; 45
    167c:	b7 01       	movw	r22, r14
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	50 d0       	rcall	.+160    	; 0x1722 <fputc>
    1682:	a5 14       	cp	r10, r5
    1684:	30 f4       	brcc	.+12     	; 0x1692 <vfprintf+0x378>
    1686:	b7 01       	movw	r22, r14
    1688:	80 e3       	ldi	r24, 0x30	; 48
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	4a d0       	rcall	.+148    	; 0x1722 <fputc>
    168e:	5a 94       	dec	r5
    1690:	f8 cf       	rjmp	.-16     	; 0x1682 <vfprintf+0x368>
    1692:	aa 94       	dec	r10
    1694:	f4 01       	movw	r30, r8
    1696:	ea 0d       	add	r30, r10
    1698:	f1 1d       	adc	r31, r1
    169a:	80 81       	ld	r24, Z
    169c:	b7 01       	movw	r22, r14
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	40 d0       	rcall	.+128    	; 0x1722 <fputc>
    16a2:	a1 10       	cpse	r10, r1
    16a4:	f6 cf       	rjmp	.-20     	; 0x1692 <vfprintf+0x378>
    16a6:	33 20       	and	r3, r3
    16a8:	09 f4       	brne	.+2      	; 0x16ac <vfprintf+0x392>
    16aa:	5d ce       	rjmp	.-838    	; 0x1366 <vfprintf+0x4c>
    16ac:	b7 01       	movw	r22, r14
    16ae:	80 e2       	ldi	r24, 0x20	; 32
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	37 d0       	rcall	.+110    	; 0x1722 <fputc>
    16b4:	3a 94       	dec	r3
    16b6:	f7 cf       	rjmp	.-18     	; 0x16a6 <vfprintf+0x38c>
    16b8:	f7 01       	movw	r30, r14
    16ba:	86 81       	ldd	r24, Z+6	; 0x06
    16bc:	97 81       	ldd	r25, Z+7	; 0x07
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <vfprintf+0x3aa>
    16c0:	8f ef       	ldi	r24, 0xFF	; 255
    16c2:	9f ef       	ldi	r25, 0xFF	; 255
    16c4:	2c 96       	adiw	r28, 0x0c	; 12
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	1f 91       	pop	r17
    16d6:	0f 91       	pop	r16
    16d8:	ff 90       	pop	r15
    16da:	ef 90       	pop	r14
    16dc:	df 90       	pop	r13
    16de:	cf 90       	pop	r12
    16e0:	bf 90       	pop	r11
    16e2:	af 90       	pop	r10
    16e4:	9f 90       	pop	r9
    16e6:	8f 90       	pop	r8
    16e8:	7f 90       	pop	r7
    16ea:	6f 90       	pop	r6
    16ec:	5f 90       	pop	r5
    16ee:	4f 90       	pop	r4
    16f0:	3f 90       	pop	r3
    16f2:	2f 90       	pop	r2
    16f4:	08 95       	ret

000016f6 <strnlen_P>:
    16f6:	fc 01       	movw	r30, r24
    16f8:	05 90       	lpm	r0, Z+
    16fa:	61 50       	subi	r22, 0x01	; 1
    16fc:	70 40       	sbci	r23, 0x00	; 0
    16fe:	01 10       	cpse	r0, r1
    1700:	d8 f7       	brcc	.-10     	; 0x16f8 <strnlen_P+0x2>
    1702:	80 95       	com	r24
    1704:	90 95       	com	r25
    1706:	8e 0f       	add	r24, r30
    1708:	9f 1f       	adc	r25, r31
    170a:	08 95       	ret

0000170c <strnlen>:
    170c:	fc 01       	movw	r30, r24
    170e:	61 50       	subi	r22, 0x01	; 1
    1710:	70 40       	sbci	r23, 0x00	; 0
    1712:	01 90       	ld	r0, Z+
    1714:	01 10       	cpse	r0, r1
    1716:	d8 f7       	brcc	.-10     	; 0x170e <strnlen+0x2>
    1718:	80 95       	com	r24
    171a:	90 95       	com	r25
    171c:	8e 0f       	add	r24, r30
    171e:	9f 1f       	adc	r25, r31
    1720:	08 95       	ret

00001722 <fputc>:
    1722:	0f 93       	push	r16
    1724:	1f 93       	push	r17
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	18 2f       	mov	r17, r24
    172c:	09 2f       	mov	r16, r25
    172e:	eb 01       	movw	r28, r22
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	81 fd       	sbrc	r24, 1
    1734:	03 c0       	rjmp	.+6      	; 0x173c <fputc+0x1a>
    1736:	8f ef       	ldi	r24, 0xFF	; 255
    1738:	9f ef       	ldi	r25, 0xFF	; 255
    173a:	20 c0       	rjmp	.+64     	; 0x177c <fputc+0x5a>
    173c:	82 ff       	sbrs	r24, 2
    173e:	10 c0       	rjmp	.+32     	; 0x1760 <fputc+0x3e>
    1740:	4e 81       	ldd	r20, Y+6	; 0x06
    1742:	5f 81       	ldd	r21, Y+7	; 0x07
    1744:	2c 81       	ldd	r18, Y+4	; 0x04
    1746:	3d 81       	ldd	r19, Y+5	; 0x05
    1748:	42 17       	cp	r20, r18
    174a:	53 07       	cpc	r21, r19
    174c:	7c f4       	brge	.+30     	; 0x176c <fputc+0x4a>
    174e:	e8 81       	ld	r30, Y
    1750:	f9 81       	ldd	r31, Y+1	; 0x01
    1752:	9f 01       	movw	r18, r30
    1754:	2f 5f       	subi	r18, 0xFF	; 255
    1756:	3f 4f       	sbci	r19, 0xFF	; 255
    1758:	39 83       	std	Y+1, r19	; 0x01
    175a:	28 83       	st	Y, r18
    175c:	10 83       	st	Z, r17
    175e:	06 c0       	rjmp	.+12     	; 0x176c <fputc+0x4a>
    1760:	e8 85       	ldd	r30, Y+8	; 0x08
    1762:	f9 85       	ldd	r31, Y+9	; 0x09
    1764:	81 2f       	mov	r24, r17
    1766:	19 95       	eicall
    1768:	89 2b       	or	r24, r25
    176a:	29 f7       	brne	.-54     	; 0x1736 <fputc+0x14>
    176c:	2e 81       	ldd	r18, Y+6	; 0x06
    176e:	3f 81       	ldd	r19, Y+7	; 0x07
    1770:	2f 5f       	subi	r18, 0xFF	; 255
    1772:	3f 4f       	sbci	r19, 0xFF	; 255
    1774:	3f 83       	std	Y+7, r19	; 0x07
    1776:	2e 83       	std	Y+6, r18	; 0x06
    1778:	81 2f       	mov	r24, r17
    177a:	90 2f       	mov	r25, r16
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	08 95       	ret

00001786 <__ultoa_invert>:
    1786:	fa 01       	movw	r30, r20
    1788:	aa 27       	eor	r26, r26
    178a:	28 30       	cpi	r18, 0x08	; 8
    178c:	51 f1       	breq	.+84     	; 0x17e2 <__ultoa_invert+0x5c>
    178e:	20 31       	cpi	r18, 0x10	; 16
    1790:	81 f1       	breq	.+96     	; 0x17f2 <__ultoa_invert+0x6c>
    1792:	e8 94       	clt
    1794:	6f 93       	push	r22
    1796:	6e 7f       	andi	r22, 0xFE	; 254
    1798:	6e 5f       	subi	r22, 0xFE	; 254
    179a:	7f 4f       	sbci	r23, 0xFF	; 255
    179c:	8f 4f       	sbci	r24, 0xFF	; 255
    179e:	9f 4f       	sbci	r25, 0xFF	; 255
    17a0:	af 4f       	sbci	r26, 0xFF	; 255
    17a2:	b1 e0       	ldi	r27, 0x01	; 1
    17a4:	3e d0       	rcall	.+124    	; 0x1822 <__ultoa_invert+0x9c>
    17a6:	b4 e0       	ldi	r27, 0x04	; 4
    17a8:	3c d0       	rcall	.+120    	; 0x1822 <__ultoa_invert+0x9c>
    17aa:	67 0f       	add	r22, r23
    17ac:	78 1f       	adc	r23, r24
    17ae:	89 1f       	adc	r24, r25
    17b0:	9a 1f       	adc	r25, r26
    17b2:	a1 1d       	adc	r26, r1
    17b4:	68 0f       	add	r22, r24
    17b6:	79 1f       	adc	r23, r25
    17b8:	8a 1f       	adc	r24, r26
    17ba:	91 1d       	adc	r25, r1
    17bc:	a1 1d       	adc	r26, r1
    17be:	6a 0f       	add	r22, r26
    17c0:	71 1d       	adc	r23, r1
    17c2:	81 1d       	adc	r24, r1
    17c4:	91 1d       	adc	r25, r1
    17c6:	a1 1d       	adc	r26, r1
    17c8:	20 d0       	rcall	.+64     	; 0x180a <__ultoa_invert+0x84>
    17ca:	09 f4       	brne	.+2      	; 0x17ce <__ultoa_invert+0x48>
    17cc:	68 94       	set
    17ce:	3f 91       	pop	r19
    17d0:	2a e0       	ldi	r18, 0x0A	; 10
    17d2:	26 9f       	mul	r18, r22
    17d4:	11 24       	eor	r1, r1
    17d6:	30 19       	sub	r19, r0
    17d8:	30 5d       	subi	r19, 0xD0	; 208
    17da:	31 93       	st	Z+, r19
    17dc:	de f6       	brtc	.-74     	; 0x1794 <__ultoa_invert+0xe>
    17de:	cf 01       	movw	r24, r30
    17e0:	08 95       	ret
    17e2:	46 2f       	mov	r20, r22
    17e4:	47 70       	andi	r20, 0x07	; 7
    17e6:	40 5d       	subi	r20, 0xD0	; 208
    17e8:	41 93       	st	Z+, r20
    17ea:	b3 e0       	ldi	r27, 0x03	; 3
    17ec:	0f d0       	rcall	.+30     	; 0x180c <__ultoa_invert+0x86>
    17ee:	c9 f7       	brne	.-14     	; 0x17e2 <__ultoa_invert+0x5c>
    17f0:	f6 cf       	rjmp	.-20     	; 0x17de <__ultoa_invert+0x58>
    17f2:	46 2f       	mov	r20, r22
    17f4:	4f 70       	andi	r20, 0x0F	; 15
    17f6:	40 5d       	subi	r20, 0xD0	; 208
    17f8:	4a 33       	cpi	r20, 0x3A	; 58
    17fa:	18 f0       	brcs	.+6      	; 0x1802 <__ultoa_invert+0x7c>
    17fc:	49 5d       	subi	r20, 0xD9	; 217
    17fe:	31 fd       	sbrc	r19, 1
    1800:	40 52       	subi	r20, 0x20	; 32
    1802:	41 93       	st	Z+, r20
    1804:	02 d0       	rcall	.+4      	; 0x180a <__ultoa_invert+0x84>
    1806:	a9 f7       	brne	.-22     	; 0x17f2 <__ultoa_invert+0x6c>
    1808:	ea cf       	rjmp	.-44     	; 0x17de <__ultoa_invert+0x58>
    180a:	b4 e0       	ldi	r27, 0x04	; 4
    180c:	a6 95       	lsr	r26
    180e:	97 95       	ror	r25
    1810:	87 95       	ror	r24
    1812:	77 95       	ror	r23
    1814:	67 95       	ror	r22
    1816:	ba 95       	dec	r27
    1818:	c9 f7       	brne	.-14     	; 0x180c <__ultoa_invert+0x86>
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	61 05       	cpc	r22, r1
    181e:	71 05       	cpc	r23, r1
    1820:	08 95       	ret
    1822:	9b 01       	movw	r18, r22
    1824:	ac 01       	movw	r20, r24
    1826:	0a 2e       	mov	r0, r26
    1828:	06 94       	lsr	r0
    182a:	57 95       	ror	r21
    182c:	47 95       	ror	r20
    182e:	37 95       	ror	r19
    1830:	27 95       	ror	r18
    1832:	ba 95       	dec	r27
    1834:	c9 f7       	brne	.-14     	; 0x1828 <__ultoa_invert+0xa2>
    1836:	62 0f       	add	r22, r18
    1838:	73 1f       	adc	r23, r19
    183a:	84 1f       	adc	r24, r20
    183c:	95 1f       	adc	r25, r21
    183e:	a0 1d       	adc	r26, r0
    1840:	08 95       	ret

00001842 <_exit>:
    1842:	f8 94       	cli

00001844 <__stop_program>:
    1844:	ff cf       	rjmp	.-2      	; 0x1844 <__stop_program>
